
LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000049e  00800200  00003642  000036d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003642  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000cd4  0080069e  0080069e  00003b74  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003b74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003bd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000520  00000000  00000000  00003c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007f40  00000000  00000000  00004130  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033fb  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000338a  00000000  00000000  0000f46b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dc4  00000000  00000000  000127f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002765  00000000  00000000  000135bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003919  00000000  00000000  00015d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000600  00000000  00000000  0001963a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a4 c0       	rjmp	.+328    	; 0x14a <__ctors_end>
       2:	00 00       	nop
       4:	c2 c0       	rjmp	.+388    	; 0x18a <__bad_interrupt>
       6:	00 00       	nop
       8:	c0 c0       	rjmp	.+384    	; 0x18a <__bad_interrupt>
       a:	00 00       	nop
       c:	be c0       	rjmp	.+380    	; 0x18a <__bad_interrupt>
       e:	00 00       	nop
      10:	bc c0       	rjmp	.+376    	; 0x18a <__bad_interrupt>
      12:	00 00       	nop
      14:	ba c0       	rjmp	.+372    	; 0x18a <__bad_interrupt>
      16:	00 00       	nop
      18:	b8 c0       	rjmp	.+368    	; 0x18a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b6 c0       	rjmp	.+364    	; 0x18a <__bad_interrupt>
      1e:	00 00       	nop
      20:	b4 c0       	rjmp	.+360    	; 0x18a <__bad_interrupt>
      22:	00 00       	nop
      24:	b2 c0       	rjmp	.+356    	; 0x18a <__bad_interrupt>
      26:	00 00       	nop
      28:	b0 c0       	rjmp	.+352    	; 0x18a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ae c0       	rjmp	.+348    	; 0x18a <__bad_interrupt>
      2e:	00 00       	nop
      30:	ac c0       	rjmp	.+344    	; 0x18a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__vector_13>
      38:	a8 c0       	rjmp	.+336    	; 0x18a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a6 c0       	rjmp	.+332    	; 0x18a <__bad_interrupt>
      3e:	00 00       	nop
      40:	a4 c0       	rjmp	.+328    	; 0x18a <__bad_interrupt>
      42:	00 00       	nop
      44:	a2 c0       	rjmp	.+324    	; 0x18a <__bad_interrupt>
      46:	00 00       	nop
      48:	a0 c0       	rjmp	.+320    	; 0x18a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9e c0       	rjmp	.+316    	; 0x18a <__bad_interrupt>
      4e:	00 00       	nop
      50:	9c c0       	rjmp	.+312    	; 0x18a <__bad_interrupt>
      52:	00 00       	nop
      54:	9a c0       	rjmp	.+308    	; 0x18a <__bad_interrupt>
      56:	00 00       	nop
      58:	98 c0       	rjmp	.+304    	; 0x18a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	96 c0       	rjmp	.+300    	; 0x18a <__bad_interrupt>
      5e:	00 00       	nop
      60:	94 c0       	rjmp	.+296    	; 0x18a <__bad_interrupt>
      62:	00 00       	nop
      64:	92 c0       	rjmp	.+292    	; 0x18a <__bad_interrupt>
      66:	00 00       	nop
      68:	90 c0       	rjmp	.+288    	; 0x18a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8e c0       	rjmp	.+284    	; 0x18a <__bad_interrupt>
      6e:	00 00       	nop
      70:	8c c0       	rjmp	.+280    	; 0x18a <__bad_interrupt>
      72:	00 00       	nop
      74:	8a c0       	rjmp	.+276    	; 0x18a <__bad_interrupt>
      76:	00 00       	nop
      78:	88 c0       	rjmp	.+272    	; 0x18a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	86 c0       	rjmp	.+268    	; 0x18a <__bad_interrupt>
      7e:	00 00       	nop
      80:	84 c0       	rjmp	.+264    	; 0x18a <__bad_interrupt>
      82:	00 00       	nop
      84:	82 c0       	rjmp	.+260    	; 0x18a <__bad_interrupt>
      86:	00 00       	nop
      88:	80 c0       	rjmp	.+256    	; 0x18a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7e c0       	rjmp	.+252    	; 0x18a <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__vector_36>
      94:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__vector_37>
      98:	78 c0       	rjmp	.+240    	; 0x18a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	76 c0       	rjmp	.+236    	; 0x18a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	74 c0       	rjmp	.+232    	; 0x18a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	72 c0       	rjmp	.+228    	; 0x18a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__vector_42>
      ac:	6e c0       	rjmp	.+220    	; 0x18a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	6c c0       	rjmp	.+216    	; 0x18a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	6a c0       	rjmp	.+212    	; 0x18a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	68 c0       	rjmp	.+208    	; 0x18a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	66 c0       	rjmp	.+204    	; 0x18a <__bad_interrupt>
      be:	00 00       	nop
      c0:	64 c0       	rjmp	.+200    	; 0x18a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	62 c0       	rjmp	.+196    	; 0x18a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	60 c0       	rjmp	.+192    	; 0x18a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	5e c0       	rjmp	.+188    	; 0x18a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	5c c0       	rjmp	.+184    	; 0x18a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	5a c0       	rjmp	.+180    	; 0x18a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	58 c0       	rjmp	.+176    	; 0x18a <__bad_interrupt>
      da:	00 00       	nop
      dc:	56 c0       	rjmp	.+172    	; 0x18a <__bad_interrupt>
      de:	00 00       	nop
      e0:	54 c0       	rjmp	.+168    	; 0x18a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	52 c0       	rjmp	.+164    	; 0x18a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	50 c0       	rjmp	.+160    	; 0x18a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	4e c0       	rjmp	.+156    	; 0x18a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	4c c0       	rjmp	.+152    	; 0x18a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	4a c0       	rjmp	.+148    	; 0x18a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	48 c0       	rjmp	.+144    	; 0x18a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	46 c0       	rjmp	.+140    	; 0x18a <__bad_interrupt>
      fe:	00 00       	nop
     100:	44 c0       	rjmp	.+136    	; 0x18a <__bad_interrupt>
     102:	00 00       	nop
     104:	42 c0       	rjmp	.+132    	; 0x18a <__bad_interrupt>
     106:	00 00       	nop
     108:	40 c0       	rjmp	.+128    	; 0x18a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	3e c0       	rjmp	.+124    	; 0x18a <__bad_interrupt>
     10e:	00 00       	nop
     110:	3c c0       	rjmp	.+120    	; 0x18a <__bad_interrupt>
     112:	00 00       	nop
     114:	3a c0       	rjmp	.+116    	; 0x18a <__bad_interrupt>
     116:	00 00       	nop
     118:	38 c0       	rjmp	.+112    	; 0x18a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	36 c0       	rjmp	.+108    	; 0x18a <__bad_interrupt>
     11e:	00 00       	nop
     120:	34 c0       	rjmp	.+104    	; 0x18a <__bad_interrupt>
     122:	00 00       	nop
     124:	32 c0       	rjmp	.+100    	; 0x18a <__bad_interrupt>
     126:	00 00       	nop
     128:	30 c0       	rjmp	.+96     	; 0x18a <__bad_interrupt>
     12a:	00 00       	nop
     12c:	2e c0       	rjmp	.+92     	; 0x18a <__bad_interrupt>
     12e:	00 00       	nop
     130:	2c c0       	rjmp	.+88     	; 0x18a <__bad_interrupt>
     132:	00 00       	nop
     134:	5b 07       	cpc	r21, r27
     136:	9a 08       	sbc	r9, r10
     138:	4b 07       	cpc	r20, r27
     13a:	12 08       	sbc	r1, r2
     13c:	4b 07       	cpc	r20, r27
     13e:	ce 08       	sbc	r12, r14
     140:	4b 07       	cpc	r20, r27
     142:	4b 07       	cpc	r20, r27
     144:	d6 08       	sbc	r13, r6
     146:	de 08       	sbc	r13, r14
     148:	e7 08       	sbc	r14, r7

0000014a <__ctors_end>:
     14a:	11 24       	eor	r1, r1
     14c:	1f be       	out	0x3f, r1	; 63
     14e:	cf ef       	ldi	r28, 0xFF	; 255
     150:	d1 e8       	ldi	r29, 0x81	; 129
     152:	de bf       	out	0x3e, r29	; 62
     154:	cd bf       	out	0x3d, r28	; 61
     156:	00 e0       	ldi	r16, 0x00	; 0
     158:	0c bf       	out	0x3c, r16	; 60

0000015a <__do_copy_data>:
     15a:	16 e0       	ldi	r17, 0x06	; 6
     15c:	a0 e0       	ldi	r26, 0x00	; 0
     15e:	b2 e0       	ldi	r27, 0x02	; 2
     160:	e2 e4       	ldi	r30, 0x42	; 66
     162:	f6 e3       	ldi	r31, 0x36	; 54
     164:	00 e0       	ldi	r16, 0x00	; 0
     166:	0b bf       	out	0x3b, r16	; 59
     168:	02 c0       	rjmp	.+4      	; 0x16e <__do_copy_data+0x14>
     16a:	07 90       	elpm	r0, Z+
     16c:	0d 92       	st	X+, r0
     16e:	ae 39       	cpi	r26, 0x9E	; 158
     170:	b1 07       	cpc	r27, r17
     172:	d9 f7       	brne	.-10     	; 0x16a <__do_copy_data+0x10>

00000174 <__do_clear_bss>:
     174:	23 e1       	ldi	r18, 0x13	; 19
     176:	ae e9       	ldi	r26, 0x9E	; 158
     178:	b6 e0       	ldi	r27, 0x06	; 6
     17a:	01 c0       	rjmp	.+2      	; 0x17e <.do_clear_bss_start>

0000017c <.do_clear_bss_loop>:
     17c:	1d 92       	st	X+, r1

0000017e <.do_clear_bss_start>:
     17e:	a2 37       	cpi	r26, 0x72	; 114
     180:	b2 07       	cpc	r27, r18
     182:	e1 f7       	brne	.-8      	; 0x17c <.do_clear_bss_loop>
     184:	b0 d4       	rcall	.+2400   	; 0xae6 <main>
     186:	0c 94 1f 1b 	jmp	0x363e	; 0x363e <_exit>

0000018a <__bad_interrupt>:
     18a:	3a cf       	rjmp	.-396    	; 0x0 <__vectors>

0000018c <appCmdIdentifyPeriodTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void appCmdIdentifyPeriodTimerHandler(SYS_Timer_t *timer)
{
     18c:	08 95       	ret

0000018e <appCmdHandle>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appCmdHandle(uint8_t *data, uint8_t size)
{
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
  AppCmdHeader_t *header = (AppCmdHeader_t *)data;

  if (size < sizeof(AppCmdHeader_t))
     192:	66 23       	and	r22, r22
     194:	c1 f1       	breq	.+112    	; 0x206 <appCmdHandle+0x78>
    return false;

  if (APP_COMMAND_ID_IDENTIFY == header->id)
     196:	fc 01       	movw	r30, r24
     198:	20 81       	ld	r18, Z
     19a:	20 31       	cpi	r18, 0x10	; 16
     19c:	b1 f5       	brne	.+108    	; 0x20a <appCmdHandle+0x7c>
  {
    AppCmdIdentify_t *req = (AppCmdIdentify_t *)data;

    if (sizeof(AppCmdIdentify_t) != size)
     19e:	65 30       	cpi	r22, 0x05	; 5
     1a0:	b1 f5       	brne	.+108    	; 0x20e <appCmdHandle+0x80>
     1a2:	ec 01       	movw	r28, r24
      return false;

    SYS_TimerStop(&appCmdIdentifyDurationTimer);
     1a4:	8b ee       	ldi	r24, 0xEB	; 235
     1a6:	96 e0       	ldi	r25, 0x06	; 6
     1a8:	0e 94 ad 14 	call	0x295a	; 0x295a <SYS_TimerStop>
    SYS_TimerStop(&appCmdIdentifyPeriodTimer);
     1ac:	8e ed       	ldi	r24, 0xDE	; 222
     1ae:	96 e0       	ldi	r25, 0x06	; 6
     1b0:	0e 94 ad 14 	call	0x295a	; 0x295a <SYS_TimerStop>

    appCmdIdentifyDurationTimer.interval = req->duration;
     1b4:	eb ee       	ldi	r30, 0xEB	; 235
     1b6:	f6 e0       	ldi	r31, 0x06	; 6
     1b8:	89 81       	ldd	r24, Y+1	; 0x01
     1ba:	9a 81       	ldd	r25, Y+2	; 0x02
     1bc:	a0 e0       	ldi	r26, 0x00	; 0
     1be:	b0 e0       	ldi	r27, 0x00	; 0
     1c0:	86 83       	std	Z+6, r24	; 0x06
     1c2:	97 83       	std	Z+7, r25	; 0x07
     1c4:	a0 87       	std	Z+8, r26	; 0x08
     1c6:	b1 87       	std	Z+9, r27	; 0x09
    appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
     1c8:	12 86       	std	Z+10, r1	; 0x0a
    appCmdIdentifyDurationTimer.handler = appCmdIdentifyDurationTimerHandler;
     1ca:	86 e5       	ldi	r24, 0x56	; 86
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	94 87       	std	Z+12, r25	; 0x0c
     1d0:	83 87       	std	Z+11, r24	; 0x0b
    SYS_TimerStart(&appCmdIdentifyDurationTimer);
     1d2:	cf 01       	movw	r24, r30
     1d4:	0e 94 04 15 	call	0x2a08	; 0x2a08 <SYS_TimerStart>

    appCmdIdentifyPeriodTimer.interval = req->period;
     1d8:	ee ed       	ldi	r30, 0xDE	; 222
     1da:	f6 e0       	ldi	r31, 0x06	; 6
     1dc:	8b 81       	ldd	r24, Y+3	; 0x03
     1de:	9c 81       	ldd	r25, Y+4	; 0x04
     1e0:	a0 e0       	ldi	r26, 0x00	; 0
     1e2:	b0 e0       	ldi	r27, 0x00	; 0
     1e4:	86 83       	std	Z+6, r24	; 0x06
     1e6:	97 83       	std	Z+7, r25	; 0x07
     1e8:	a0 87       	std	Z+8, r26	; 0x08
     1ea:	b1 87       	std	Z+9, r27	; 0x09
    appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	82 87       	std	Z+10, r24	; 0x0a
    appCmdIdentifyPeriodTimer.handler = appCmdIdentifyPeriodTimerHandler;
     1f0:	86 ec       	ldi	r24, 0xC6	; 198
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	94 87       	std	Z+12, r25	; 0x0c
     1f6:	83 87       	std	Z+11, r24	; 0x0b
    SYS_TimerStart(&appCmdIdentifyPeriodTimer);
     1f8:	cf 01       	movw	r24, r30
     1fa:	0e 94 04 15 	call	0x2a08	; 0x2a08 <SYS_TimerStart>

    HAL_LedOn(LED_IDENTIFY);
    NWK_Lock();
     1fe:	0e 94 26 0b 	call	0x164c	; 0x164c <NWK_Lock>

    return true;
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	05 c0       	rjmp	.+10     	; 0x210 <appCmdHandle+0x82>
static bool appCmdHandle(uint8_t *data, uint8_t size)
{
  AppCmdHeader_t *header = (AppCmdHeader_t *)data;

  if (size < sizeof(AppCmdHeader_t))
    return false;
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	03 c0       	rjmp	.+6      	; 0x210 <appCmdHandle+0x82>
    NWK_Lock();

    return true;
  }

  return false;
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	01 c0       	rjmp	.+2      	; 0x210 <appCmdHandle+0x82>
  if (APP_COMMAND_ID_IDENTIFY == header->id)
  {
    AppCmdIdentify_t *req = (AppCmdIdentify_t *)data;

    if (sizeof(AppCmdIdentify_t) != size)
      return false;
     20e:	80 e0       	ldi	r24, 0x00	; 0

    return true;
  }

  return false;
}
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	08 95       	ret

00000216 <appCmdDataInd>:

/*************************************************************************//**
*****************************************************************************/
static bool appCmdDataInd(NWK_DataInd_t *ind)
{
  return appCmdHandle(ind->data, ind->size);
     216:	fc 01       	movw	r30, r24
     218:	61 85       	ldd	r22, Z+9	; 0x09
     21a:	87 81       	ldd	r24, Z+7	; 0x07
     21c:	90 85       	ldd	r25, Z+8	; 0x08
     21e:	b7 cf       	rjmp	.-146    	; 0x18e <appCmdHandle>
}
     220:	08 95       	ret

00000222 <appCmdCheckPendingTable>:
}

/*************************************************************************//**
*****************************************************************************/
static void appCmdCheckPendingTable(void)
{
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
  if (appCmdInProgress)
     22e:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <appCmdInProgress>
     232:	90 91 b0 06 	lds	r25, 0x06B0	; 0x8006b0 <appCmdInProgress+0x1>
     236:	89 2b       	or	r24, r25
     238:	19 f5       	brne	.+70     	; 0x280 <appCmdCheckPendingTable+0x5e>
     23a:	c1 eb       	ldi	r28, 0xB1	; 177
     23c:	d6 e0       	ldi	r29, 0x06	; 6
     23e:	0f 2e       	mov	r0, r31
     240:	fe ed       	ldi	r31, 0xDE	; 222
     242:	ef 2e       	mov	r14, r31
     244:	f6 e0       	ldi	r31, 0x06	; 6
     246:	ff 2e       	mov	r15, r31
     248:	f0 2d       	mov	r31, r0
*****************************************************************************/
static void appCmdDataRequest(AppCmdPendingTableEntry_t *entry)
{
  appCmdInProgress = entry;

  appCmdDataReq.dstAddr = entry->addr;
     24a:	0e e9       	ldi	r16, 0x9E	; 158
     24c:	16 e0       	ldi	r17, 0x06	; 6
  if (appCmdInProgress)
    return;

  for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++)
  {
    if (appCmdPendingTable[i].ready)
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	88 23       	and	r24, r24
     252:	91 f0       	breq	.+36     	; 0x278 <appCmdCheckPendingTable+0x56>

/*************************************************************************//**
*****************************************************************************/
static void appCmdDataRequest(AppCmdPendingTableEntry_t *entry)
{
  appCmdInProgress = entry;
     254:	d0 93 b0 06 	sts	0x06B0, r29	; 0x8006b0 <appCmdInProgress+0x1>
     258:	c0 93 af 06 	sts	0x06AF, r28	; 0x8006af <appCmdInProgress>

  appCmdDataReq.dstAddr = entry->addr;
     25c:	88 81       	ld	r24, Y
     25e:	99 81       	ldd	r25, Y+1	; 0x01
     260:	f8 01       	movw	r30, r16
     262:	96 83       	std	Z+6, r25	; 0x06
     264:	85 83       	std	Z+5, r24	; 0x05
  appCmdDataReq.data = &entry->payload;
     266:	ce 01       	movw	r24, r28
     268:	04 96       	adiw	r24, 0x04	; 4
     26a:	93 87       	std	Z+11, r25	; 0x0b
     26c:	82 87       	std	Z+10, r24	; 0x0a
  appCmdDataReq.size = entry->size;
     26e:	8a 81       	ldd	r24, Y+2	; 0x02
     270:	84 87       	std	Z+12, r24	; 0x0c
  NWK_DataReq(&appCmdDataReq);
     272:	c8 01       	movw	r24, r16
     274:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <NWK_DataReq>
     278:	29 96       	adiw	r28, 0x09	; 9
static void appCmdCheckPendingTable(void)
{
  if (appCmdInProgress)
    return;

  for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++)
     27a:	ce 15       	cp	r28, r14
     27c:	df 05       	cpc	r29, r15
     27e:	39 f7       	brne	.-50     	; 0x24e <appCmdCheckPendingTable+0x2c>
  {
    if (appCmdPendingTable[i].ready)
      appCmdDataRequest(&appCmdPendingTable[i]);
  }
}
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	08 95       	ret

0000028e <appCmdDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appCmdDataConf(NWK_DataReq_t *req)
{
  appCmdInProgress->addr = APP_CMD_INVALID_ADDR;
     28e:	e0 91 af 06 	lds	r30, 0x06AF	; 0x8006af <appCmdInProgress>
     292:	f0 91 b0 06 	lds	r31, 0x06B0	; 0x8006b0 <appCmdInProgress+0x1>
     296:	8f ef       	ldi	r24, 0xFF	; 255
     298:	9f ef       	ldi	r25, 0xFF	; 255
     29a:	91 83       	std	Z+1, r25	; 0x01
     29c:	80 83       	st	Z, r24
  appCmdInProgress->ready = false;
     29e:	13 82       	std	Z+3, r1	; 0x03
  appCmdInProgress = NULL;
     2a0:	10 92 b0 06 	sts	0x06B0, r1	; 0x8006b0 <appCmdInProgress+0x1>
     2a4:	10 92 af 06 	sts	0x06AF, r1	; 0x8006af <appCmdInProgress>

  appCmdCheckPendingTable();
     2a8:	bc cf       	rjmp	.-136    	; 0x222 <appCmdCheckPendingTable>
     2aa:	08 95       	ret

000002ac <appCmdIdentifyDurationTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appCmdIdentifyDurationTimerHandler(SYS_Timer_t *timer)
{
  NWK_Unlock();
     2ac:	0e 94 2e 0b 	call	0x165c	; 0x165c <NWK_Unlock>
  HAL_LedOn(LED_IDENTIFY);
  SYS_TimerStop(&appCmdIdentifyPeriodTimer);
     2b0:	8e ed       	ldi	r24, 0xDE	; 222
     2b2:	96 e0       	ldi	r25, 0x06	; 6
     2b4:	0c 94 ad 14 	jmp	0x295a	; 0x295a <SYS_TimerStop>
     2b8:	08 95       	ret

000002ba <APP_CommandsInit>:

/*************************************************************************//**
*****************************************************************************/
void APP_CommandsInit(void)
{
  appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
     2ba:	eb ee       	ldi	r30, 0xEB	; 235
     2bc:	f6 e0       	ldi	r31, 0x06	; 6
     2be:	12 86       	std	Z+10, r1	; 0x0a
  appCmdIdentifyDurationTimer.handler = appCmdIdentifyDurationTimerHandler;
     2c0:	86 e5       	ldi	r24, 0x56	; 86
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	94 87       	std	Z+12, r25	; 0x0c
     2c6:	83 87       	std	Z+11, r24	; 0x0b

  appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
     2c8:	ee ed       	ldi	r30, 0xDE	; 222
     2ca:	f6 e0       	ldi	r31, 0x06	; 6
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	82 87       	std	Z+10, r24	; 0x0a
  appCmdIdentifyPeriodTimer.handler = appCmdIdentifyPeriodTimerHandler;
     2d0:	86 ec       	ldi	r24, 0xC6	; 198
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	94 87       	std	Z+12, r25	; 0x0c
     2d6:	83 87       	std	Z+11, r24	; 0x0b

  appCmdInProgress = NULL;
     2d8:	10 92 b0 06 	sts	0x06B0, r1	; 0x8006b0 <appCmdInProgress+0x1>
     2dc:	10 92 af 06 	sts	0x06AF, r1	; 0x8006af <appCmdInProgress>
  appCmdDataReq.dstAddr = 0;
     2e0:	ee e9       	ldi	r30, 0x9E	; 158
     2e2:	f6 e0       	ldi	r31, 0x06	; 6
     2e4:	16 82       	std	Z+6, r1	; 0x06
     2e6:	15 82       	std	Z+5, r1	; 0x05
  appCmdDataReq.dstEndpoint = APP_CMD_ENDPOINT;
     2e8:	8f e0       	ldi	r24, 0x0F	; 15
     2ea:	87 83       	std	Z+7, r24	; 0x07
  appCmdDataReq.srcEndpoint = APP_CMD_ENDPOINT;
     2ec:	80 87       	std	Z+8, r24	; 0x08
  appCmdDataReq.options = NWK_OPT_ENABLE_SECURITY;
     2ee:	82 e0       	ldi	r24, 0x02	; 2
     2f0:	81 87       	std	Z+9, r24	; 0x09
  appCmdDataReq.confirm = appCmdDataConf;
     2f2:	87 e4       	ldi	r24, 0x47	; 71
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	96 87       	std	Z+14, r25	; 0x0e
     2f8:	85 87       	std	Z+13, r24	; 0x0d
     2fa:	e1 eb       	ldi	r30, 0xB1	; 177
     2fc:	f6 e0       	ldi	r31, 0x06	; 6
     2fe:	2e ed       	ldi	r18, 0xDE	; 222
     300:	36 e0       	ldi	r19, 0x06	; 6

  for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++)
  {
    appCmdPendingTable[i].addr = APP_CMD_INVALID_ADDR;
     302:	8f ef       	ldi	r24, 0xFF	; 255
     304:	9f ef       	ldi	r25, 0xFF	; 255
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	80 83       	st	Z, r24
    appCmdPendingTable[i].ready = false;
     30a:	13 82       	std	Z+3, r1	; 0x03
     30c:	39 96       	adiw	r30, 0x09	; 9
  appCmdDataReq.dstEndpoint = APP_CMD_ENDPOINT;
  appCmdDataReq.srcEndpoint = APP_CMD_ENDPOINT;
  appCmdDataReq.options = NWK_OPT_ENABLE_SECURITY;
  appCmdDataReq.confirm = appCmdDataConf;

  for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++)
     30e:	e2 17       	cp	r30, r18
     310:	f3 07       	cpc	r31, r19
     312:	c9 f7       	brne	.-14     	; 0x306 <APP_CommandsInit+0x4c>
  {
    appCmdPendingTable[i].addr = APP_CMD_INVALID_ADDR;
    appCmdPendingTable[i].ready = false;
  }

  NWK_OpenEndpoint(APP_CMD_ENDPOINT, appCmdDataInd);
     314:	6b e0       	ldi	r22, 0x0B	; 11
     316:	71 e0       	ldi	r23, 0x01	; 1
     318:	8f e0       	ldi	r24, 0x0F	; 15
     31a:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <NWK_OpenEndpoint>
     31e:	08 95       	ret

00000320 <APP_CommandsPending>:
*****************************************************************************/
bool APP_CommandsPending(uint16_t addr)
{
  for (uint8_t i = 1; i < APP_CMD_PENDING_TABLE_SIZE; i++)
  {
    if (addr == appCmdPendingTable[i].addr)
     320:	20 91 ba 06 	lds	r18, 0x06BA	; 0x8006ba <appCmdPendingTable+0x9>
     324:	30 91 bb 06 	lds	r19, 0x06BB	; 0x8006bb <appCmdPendingTable+0xa>
     328:	82 17       	cp	r24, r18
     32a:	93 07       	cpc	r25, r19
     32c:	f1 f0       	breq	.+60     	; 0x36a <APP_CommandsPending+0x4a>
     32e:	20 91 c3 06 	lds	r18, 0x06C3	; 0x8006c3 <appCmdPendingTable+0x12>
     332:	30 91 c4 06 	lds	r19, 0x06C4	; 0x8006c4 <appCmdPendingTable+0x13>
     336:	82 17       	cp	r24, r18
     338:	93 07       	cpc	r25, r19
     33a:	89 f0       	breq	.+34     	; 0x35e <APP_CommandsPending+0x3e>
     33c:	20 91 cc 06 	lds	r18, 0x06CC	; 0x8006cc <appCmdPendingTable+0x1b>
     340:	30 91 cd 06 	lds	r19, 0x06CD	; 0x8006cd <appCmdPendingTable+0x1c>
     344:	82 17       	cp	r24, r18
     346:	93 07       	cpc	r25, r19
     348:	69 f0       	breq	.+26     	; 0x364 <APP_CommandsPending+0x44>
     34a:	20 91 d5 06 	lds	r18, 0x06D5	; 0x8006d5 <appCmdPendingTable+0x24>
     34e:	30 91 d6 06 	lds	r19, 0x06D6	; 0x8006d6 <appCmdPendingTable+0x25>
     352:	28 17       	cp	r18, r24
     354:	39 07       	cpc	r19, r25
     356:	e1 f4       	brne	.+56     	; 0x390 <APP_CommandsPending+0x70>
     358:	84 e0       	ldi	r24, 0x04	; 4
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	08 c0       	rjmp	.+16     	; 0x36e <APP_CommandsPending+0x4e>
     35e:	82 e0       	ldi	r24, 0x02	; 2
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	05 c0       	rjmp	.+10     	; 0x36e <APP_CommandsPending+0x4e>
     364:	83 e0       	ldi	r24, 0x03	; 3
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	02 c0       	rjmp	.+4      	; 0x36e <APP_CommandsPending+0x4e>
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	90 e0       	ldi	r25, 0x00	; 0
    {
      appCmdPendingTable[i].ready = true;
     36e:	fc 01       	movw	r30, r24
     370:	ee 0f       	add	r30, r30
     372:	ff 1f       	adc	r31, r31
     374:	ee 0f       	add	r30, r30
     376:	ff 1f       	adc	r31, r31
     378:	ee 0f       	add	r30, r30
     37a:	ff 1f       	adc	r31, r31
     37c:	8e 0f       	add	r24, r30
     37e:	9f 1f       	adc	r25, r31
     380:	fc 01       	movw	r30, r24
     382:	ef 54       	subi	r30, 0x4F	; 79
     384:	f9 4f       	sbci	r31, 0xF9	; 249
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	83 83       	std	Z+3, r24	; 0x03
      appCmdCheckPendingTable();
     38a:	4b df       	rcall	.-362    	; 0x222 <appCmdCheckPendingTable>
      return true;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	08 95       	ret
    }
  }

  return false;
     390:	80 e0       	ldi	r24, 0x00	; 0
}
     392:	08 95       	ret

00000394 <APP_CommandsByteReceived>:

/*************************************************************************//**
*****************************************************************************/
void APP_CommandsByteReceived(uint8_t byte)
{
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	00 d0       	rcall	.+0      	; 0x39e <APP_CommandsByteReceived+0xa>
     39e:	1f 92       	push	r1
     3a0:	1f 92       	push	r1
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
  switch (appCmdUartState)
     3a6:	90 91 0a 07 	lds	r25, 0x070A	; 0x80070a <appCmdUartState>
     3aa:	92 30       	cpi	r25, 0x02	; 2
     3ac:	21 f1       	breq	.+72     	; 0x3f6 <APP_CommandsByteReceived+0x62>
     3ae:	28 f4       	brcc	.+10     	; 0x3ba <APP_CommandsByteReceived+0x26>
     3b0:	99 23       	and	r25, r25
     3b2:	49 f0       	breq	.+18     	; 0x3c6 <APP_CommandsByteReceived+0x32>
     3b4:	91 30       	cpi	r25, 0x01	; 1
     3b6:	91 f0       	breq	.+36     	; 0x3dc <APP_CommandsByteReceived+0x48>
     3b8:	e1 c0       	rjmp	.+450    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     3ba:	93 30       	cpi	r25, 0x03	; 3
     3bc:	c9 f1       	breq	.+114    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     3be:	94 30       	cpi	r25, 0x04	; 4
     3c0:	09 f4       	brne	.+2      	; 0x3c4 <APP_CommandsByteReceived+0x30>
     3c2:	5a c0       	rjmp	.+180    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     3c4:	db c0       	rjmp	.+438    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
  {
    case APP_CMD_UART_STATE_IDLE:
    {
      if (0x10 == byte)
     3c6:	80 31       	cpi	r24, 0x10	; 16
     3c8:	09 f0       	breq	.+2      	; 0x3cc <APP_CommandsByteReceived+0x38>
     3ca:	d8 c0       	rjmp	.+432    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
      {
        appCmdUartPtr = 0;
     3cc:	10 92 09 07 	sts	0x0709, r1	; 0x800709 <appCmdUartPtr>
        appCmdUartCsum = byte;
     3d0:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <appCmdUartCsum>
        appCmdUartState = APP_CMD_UART_STATE_SYNC;
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <appCmdUartState>
     3da:	d0 c0       	rjmp	.+416    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
      }
    } break;

    case APP_CMD_UART_STATE_SYNC:
    {
      appCmdUartCsum += byte;
     3dc:	90 91 f8 06 	lds	r25, 0x06F8	; 0x8006f8 <appCmdUartCsum>
     3e0:	98 0f       	add	r25, r24
     3e2:	90 93 f8 06 	sts	0x06F8, r25	; 0x8006f8 <appCmdUartCsum>

      if (0x02 == byte)
     3e6:	82 30       	cpi	r24, 0x02	; 2
     3e8:	19 f4       	brne	.+6      	; 0x3f0 <APP_CommandsByteReceived+0x5c>
        appCmdUartState = APP_CMD_UART_STATE_DATA;
     3ea:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <appCmdUartState>
     3ee:	c6 c0       	rjmp	.+396    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
      else
        appCmdUartState = APP_CMD_UART_STATE_IDLE;
     3f0:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <appCmdUartState>
     3f4:	c3 c0       	rjmp	.+390    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
    } break;

    case APP_CMD_UART_STATE_DATA:
    {
      appCmdUartCsum += byte;
     3f6:	90 91 f8 06 	lds	r25, 0x06F8	; 0x8006f8 <appCmdUartCsum>
     3fa:	98 0f       	add	r25, r24
     3fc:	90 93 f8 06 	sts	0x06F8, r25	; 0x8006f8 <appCmdUartCsum>

      if (0x10 == byte)
     400:	80 31       	cpi	r24, 0x10	; 16
     402:	21 f4       	brne	.+8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
        appCmdUartState = APP_CMD_UART_STATE_MARK;
     404:	83 e0       	ldi	r24, 0x03	; 3
     406:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <appCmdUartState>
     40a:	0a c0       	rjmp	.+20     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
      else
        appCmdUartBuf[appCmdUartPtr++] = byte;
     40c:	e0 91 09 07 	lds	r30, 0x0709	; 0x800709 <appCmdUartPtr>
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	9e 0f       	add	r25, r30
     414:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <appCmdUartPtr>
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	e7 50       	subi	r30, 0x07	; 7
     41c:	f9 4f       	sbci	r31, 0xF9	; 249
     41e:	80 83       	st	Z, r24

      if (appCmdUartPtr == APP_CMD_UART_BUFFER_SIZE)
     420:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <appCmdUartPtr>
     424:	80 31       	cpi	r24, 0x10	; 16
     426:	09 f0       	breq	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     428:	a9 c0       	rjmp	.+338    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
        appCmdUartState = APP_CMD_UART_STATE_IDLE;
     42a:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <appCmdUartState>
     42e:	a6 c0       	rjmp	.+332    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
    } break;

    case APP_CMD_UART_STATE_MARK:
    {
      appCmdUartCsum += byte;
     430:	90 91 f8 06 	lds	r25, 0x06F8	; 0x8006f8 <appCmdUartCsum>
     434:	98 0f       	add	r25, r24
     436:	90 93 f8 06 	sts	0x06F8, r25	; 0x8006f8 <appCmdUartCsum>

      if (0x10 == byte)
     43a:	80 31       	cpi	r24, 0x10	; 16
     43c:	a1 f4       	brne	.+40     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
      {
        appCmdUartBuf[appCmdUartPtr++] = byte;
     43e:	e0 91 09 07 	lds	r30, 0x0709	; 0x800709 <appCmdUartPtr>
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	8e 0f       	add	r24, r30
     446:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <appCmdUartPtr>
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	e7 50       	subi	r30, 0x07	; 7
     44e:	f9 4f       	sbci	r31, 0xF9	; 249
     450:	90 e1       	ldi	r25, 0x10	; 16
     452:	90 83       	st	Z, r25

        if (appCmdUartPtr == APP_CMD_UART_BUFFER_SIZE)
     454:	80 31       	cpi	r24, 0x10	; 16
     456:	19 f4       	brne	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
          appCmdUartState = APP_CMD_UART_STATE_IDLE;
     458:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <appCmdUartState>
     45c:	8f c0       	rjmp	.+286    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
        else
          appCmdUartState = APP_CMD_UART_STATE_DATA;
     45e:	82 e0       	ldi	r24, 0x02	; 2
     460:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <appCmdUartState>
     464:	8b c0       	rjmp	.+278    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
      }

      else if (0x03 == byte)
     466:	83 30       	cpi	r24, 0x03	; 3
     468:	21 f4       	brne	.+8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
        appCmdUartState = APP_CMD_UART_STATE_CSUM;
     46a:	84 e0       	ldi	r24, 0x04	; 4
     46c:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <appCmdUartState>
     470:	85 c0       	rjmp	.+266    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>

      else
        appCmdUartState = APP_CMD_UART_STATE_IDLE;
     472:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <appCmdUartState>
     476:	82 c0       	rjmp	.+260    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
    } break;

    case APP_CMD_UART_STATE_CSUM:
    {
      if (byte == appCmdUartCsum)
     478:	90 91 f8 06 	lds	r25, 0x06F8	; 0x8006f8 <appCmdUartCsum>
     47c:	89 13       	cpse	r24, r25
     47e:	7c c0       	rjmp	.+248    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
*****************************************************************************/
static void appCmdUartProcess(uint8_t *data, uint8_t size)
{
  AppCmdUartHeader_t *header = (AppCmdUartHeader_t *)data;

  if (size < sizeof(AppCmdUartHeader_t))
     480:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <appCmdUartPtr>
     484:	89 30       	cpi	r24, 0x09	; 9
     486:	08 f4       	brcc	.+2      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     488:	77 c0       	rjmp	.+238    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
    return;

  if (APP_COMMAND_ID_IDENTIFY == header->commandId)
     48a:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <appCmdUartBuf>
     48e:	80 31       	cpi	r24, 0x10	; 16
     490:	09 f0       	breq	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     492:	72 c0       	rjmp	.+228    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
  {
    AppCmdUartIdentify_t *uartCmd = (AppCmdUartIdentify_t *)data;
    AppCmdIdentify_t cmd;

    cmd.id = APP_COMMAND_ID_IDENTIFY;
     494:	89 83       	std	Y+1, r24	; 0x01
    cmd.duration = uartCmd->duration;
     496:	e9 ef       	ldi	r30, 0xF9	; 249
     498:	f6 e0       	ldi	r31, 0x06	; 6
     49a:	81 85       	ldd	r24, Z+9	; 0x09
     49c:	92 85       	ldd	r25, Z+10	; 0x0a
     49e:	9b 83       	std	Y+3, r25	; 0x03
     4a0:	8a 83       	std	Y+2, r24	; 0x02
    cmd.period = uartCmd->period;
     4a2:	83 85       	ldd	r24, Z+11	; 0x0b
     4a4:	94 85       	ldd	r25, Z+12	; 0x0c
     4a6:	9d 83       	std	Y+5, r25	; 0x05
     4a8:	8c 83       	std	Y+4, r24	; 0x04

    appCmdBuffer(header->dstAddr, (uint8_t *)&cmd, sizeof(AppCmdIdentify_t));
     4aa:	01 81       	ldd	r16, Z+1	; 0x01
     4ac:	12 81       	ldd	r17, Z+2	; 0x02
     4ae:	c8 01       	movw	r24, r16

/*************************************************************************//**
*****************************************************************************/
static void appCmdBuffer(uint16_t addr, uint8_t *data, uint8_t size)
{
  if (APP_ADDR == addr)
     4b0:	80 31       	cpi	r24, 0x10	; 16
     4b2:	e0 e7       	ldi	r30, 0x70	; 112
     4b4:	9e 07       	cpc	r25, r30
     4b6:	29 f4       	brne	.+10     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
  {
    appCmdHandle(data, size);
     4b8:	65 e0       	ldi	r22, 0x05	; 5
     4ba:	ce 01       	movw	r24, r28
     4bc:	01 96       	adiw	r24, 0x01	; 1
     4be:	67 de       	rcall	.-818    	; 0x18e <appCmdHandle>
     4c0:	5b c0       	rjmp	.+182    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
  }

  else if (addr & NWK_ROUTE_NON_ROUTING)
     4c2:	11 23       	and	r17, r17
     4c4:	0c f0       	brlt	.+2      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4c6:	3f c0       	rjmp	.+126    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
  {
    for (uint8_t i = 1; i < APP_CMD_PENDING_TABLE_SIZE; i++)
    {
      if (APP_CMD_INVALID_ADDR == appCmdPendingTable[i].addr)
     4c8:	20 91 ba 06 	lds	r18, 0x06BA	; 0x8006ba <appCmdPendingTable+0x9>
     4cc:	30 91 bb 06 	lds	r19, 0x06BB	; 0x8006bb <appCmdPendingTable+0xa>
     4d0:	2f 3f       	cpi	r18, 0xFF	; 255
     4d2:	3f 4f       	sbci	r19, 0xFF	; 255
     4d4:	f1 f0       	breq	.+60     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     4d6:	20 91 c3 06 	lds	r18, 0x06C3	; 0x8006c3 <appCmdPendingTable+0x12>
     4da:	30 91 c4 06 	lds	r19, 0x06C4	; 0x8006c4 <appCmdPendingTable+0x13>
     4de:	2f 3f       	cpi	r18, 0xFF	; 255
     4e0:	3f 4f       	sbci	r19, 0xFF	; 255
     4e2:	89 f0       	breq	.+34     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
     4e4:	20 91 cc 06 	lds	r18, 0x06CC	; 0x8006cc <appCmdPendingTable+0x1b>
     4e8:	30 91 cd 06 	lds	r19, 0x06CD	; 0x8006cd <appCmdPendingTable+0x1c>
     4ec:	2f 3f       	cpi	r18, 0xFF	; 255
     4ee:	3f 4f       	sbci	r19, 0xFF	; 255
     4f0:	69 f0       	breq	.+26     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     4f2:	20 91 d5 06 	lds	r18, 0x06D5	; 0x8006d5 <appCmdPendingTable+0x24>
     4f6:	30 91 d6 06 	lds	r19, 0x06D6	; 0x8006d6 <appCmdPendingTable+0x25>
     4fa:	2f 3f       	cpi	r18, 0xFF	; 255
     4fc:	3f 4f       	sbci	r19, 0xFF	; 255
     4fe:	e1 f5       	brne	.+120    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     500:	44 e0       	ldi	r20, 0x04	; 4
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	08 c0       	rjmp	.+16     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     506:	42 e0       	ldi	r20, 0x02	; 2
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	05 c0       	rjmp	.+10     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     50c:	43 e0       	ldi	r20, 0x03	; 3
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	02 c0       	rjmp	.+4      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     512:	41 e0       	ldi	r20, 0x01	; 1
     514:	50 e0       	ldi	r21, 0x00	; 0
      {
        appCmdPendingTable[i].addr = addr;
     516:	69 e0       	ldi	r22, 0x09	; 9
     518:	64 9f       	mul	r22, r20
     51a:	90 01       	movw	r18, r0
     51c:	65 9f       	mul	r22, r21
     51e:	30 0d       	add	r19, r0
     520:	11 24       	eor	r1, r1
     522:	f9 01       	movw	r30, r18
     524:	ef 54       	subi	r30, 0x4F	; 79
     526:	f9 4f       	sbci	r31, 0xF9	; 249
     528:	91 83       	std	Z+1, r25	; 0x01
     52a:	80 83       	st	Z, r24
        appCmdPendingTable[i].size = size;
     52c:	85 e0       	ldi	r24, 0x05	; 5
     52e:	82 83       	std	Z+2, r24	; 0x02
        appCmdPendingTable[i].ready = false;
     530:	13 82       	std	Z+3, r1	; 0x03
        memcpy(&appCmdPendingTable[i].payload, data, size);
     532:	d9 01       	movw	r26, r18
     534:	ab 54       	subi	r26, 0x4B	; 75
     536:	b9 4f       	sbci	r27, 0xF9	; 249
     538:	fe 01       	movw	r30, r28
     53a:	31 96       	adiw	r30, 0x01	; 1
     53c:	01 90       	ld	r0, Z+
     53e:	0d 92       	st	X+, r0
     540:	8a 95       	dec	r24
     542:	e1 f7       	brne	.-8      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     544:	19 c0       	rjmp	.+50     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
  }

  else
  {
    // Entry 0 in the table is reserved for non-sleeping devices
    if (APP_CMD_INVALID_ADDR == appCmdPendingTable[0].addr)
     546:	20 91 b1 06 	lds	r18, 0x06B1	; 0x8006b1 <appCmdPendingTable>
     54a:	30 91 b2 06 	lds	r19, 0x06B2	; 0x8006b2 <appCmdPendingTable+0x1>
     54e:	2f 3f       	cpi	r18, 0xFF	; 255
     550:	3f 4f       	sbci	r19, 0xFF	; 255
     552:	91 f4       	brne	.+36     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
    {
      appCmdPendingTable[0].addr = addr;
     554:	e1 eb       	ldi	r30, 0xB1	; 177
     556:	f6 e0       	ldi	r31, 0x06	; 6
     558:	91 83       	std	Z+1, r25	; 0x01
     55a:	80 83       	st	Z, r24
      appCmdPendingTable[0].size = size;
     55c:	85 e0       	ldi	r24, 0x05	; 5
     55e:	82 83       	std	Z+2, r24	; 0x02
      appCmdPendingTable[0].ready = true;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	83 83       	std	Z+3, r24	; 0x03
      memcpy(&appCmdPendingTable[0].payload, data, size);
     564:	85 e0       	ldi	r24, 0x05	; 5
     566:	fe 01       	movw	r30, r28
     568:	31 96       	adiw	r30, 0x01	; 1
     56a:	a5 eb       	ldi	r26, 0xB5	; 181
     56c:	b6 e0       	ldi	r27, 0x06	; 6
     56e:	01 90       	ld	r0, Z+
     570:	0d 92       	st	X+, r0
     572:	8a 95       	dec	r24
      appCmdCheckPendingTable();
     574:	e1 f7       	brne	.-8      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
     576:	55 de       	rcall	.-854    	; 0x222 <appCmdCheckPendingTable>
    case APP_CMD_UART_STATE_CSUM:
    {
      if (byte == appCmdUartCsum)
        appCmdUartProcess(appCmdUartBuf, appCmdUartPtr);

      appCmdUartState = APP_CMD_UART_STATE_IDLE;
     578:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <appCmdUartState>
    } break;

    default:
      break;
  }
}
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	08 95       	ret

00000590 <UART_SendChar>:
    UART_SendString(str);
    // Send newline
    UART_SendString("\r\n");
    // Reset color
    UART_SendString(RESET_COLOR);
}
     590:	e8 ec       	ldi	r30, 0xC8	; 200
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	90 81       	ld	r25, Z
     596:	95 ff       	sbrs	r25, 5
     598:	fd cf       	rjmp	.-6      	; 0x594 <UART_SendChar+0x4>
     59a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     59e:	08 95       	ret

000005a0 <UART_GetChar>:
     5a0:	e8 ec       	ldi	r30, 0xC8	; 200
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	80 81       	ld	r24, Z
     5a6:	88 23       	and	r24, r24
     5a8:	ec f7       	brge	.-6      	; 0x5a4 <UART_GetChar+0x4>
     5aa:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     5ae:	08 95       	ret

000005b0 <UART_SendStringNewLine>:
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	ec 01       	movw	r28, r24
     5b6:	88 81       	ld	r24, Y
     5b8:	88 23       	and	r24, r24
     5ba:	29 f0       	breq	.+10     	; 0x5c6 <UART_SendStringNewLine+0x16>
     5bc:	21 96       	adiw	r28, 0x01	; 1
     5be:	e8 df       	rcall	.-48     	; 0x590 <UART_SendChar>
     5c0:	89 91       	ld	r24, Y+
     5c2:	81 11       	cpse	r24, r1
     5c4:	fc cf       	rjmp	.-8      	; 0x5be <UART_SendStringNewLine+0xe>
     5c6:	8d e0       	ldi	r24, 0x0D	; 13
     5c8:	e3 df       	rcall	.-58     	; 0x590 <UART_SendChar>
     5ca:	8a e0       	ldi	r24, 0x0A	; 10
     5cc:	e1 df       	rcall	.-62     	; 0x590 <UART_SendChar>
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	df df       	rcall	.-66     	; 0x590 <UART_SendChar>
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	08 95       	ret

000005d8 <printCHAR>:

int printCHAR(char character, FILE *stream) {
	UART_SendChar(character);  // Send character via UART
     5d8:	db df       	rcall	.-74     	; 0x590 <UART_SendChar>
	return 0;
}
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	08 95       	ret

000005e0 <appNetworkStatusTimerHandler>:

float get_weight_in_grams(unsigned long raw_reading, unsigned long tare_weight, float scale_factor) {
	long tared_reading = (long)raw_reading - (long)tare_weight;  // now can be negative
	float scaled_reading = tared_reading / scale_factor;
	return scaled_reading;
}
     5e0:	08 95       	ret

000005e2 <appCommandWaitTimerHandler>:
     5e2:	85 e0       	ldi	r24, 0x05	; 5
     5e4:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <appState>
     5e8:	08 95       	ret

000005ea <appADDR_REQ_Conf>:
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <appState>
     5f0:	08 95       	ret

000005f2 <appADDR_CONF_Conf>:
     5f2:	83 e0       	ldi	r24, 0x03	; 3
     5f4:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <appState>
     5f8:	08 95       	ret

000005fa <appDataSendingTimerHandler>:
     5fa:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <appState>
     5fe:	86 30       	cpi	r24, 0x06	; 6
     600:	21 f4       	brne	.+8      	; 0x60a <appDataSendingTimerHandler+0x10>
     602:	83 e0       	ldi	r24, 0x03	; 3
     604:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <appState>
     608:	08 95       	ret
     60a:	8b e1       	ldi	r24, 0x1B	; 27
     60c:	97 e0       	ldi	r25, 0x07	; 7
     60e:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <SYS_TimerStart>
     612:	08 95       	ret

00000614 <appAddrInd>:
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	ec 01       	movw	r28, r24
     61e:	8f e2       	ldi	r24, 0x2F	; 47
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	9f 93       	push	r25
     624:	8f 93       	push	r24
     626:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     62a:	0f 80       	ldd	r0, Y+7	; 0x07
     62c:	d8 85       	ldd	r29, Y+8	; 0x08
     62e:	c0 2d       	mov	r28, r0
     630:	88 81       	ld	r24, Y
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	80 32       	cpi	r24, 0x20	; 32
     638:	09 f0       	breq	.+2      	; 0x63c <appAddrInd+0x28>
     63a:	4b c0       	rjmp	.+150    	; 0x6d2 <appAddrInd+0xbe>
     63c:	8a 81       	ldd	r24, Y+2	; 0x02
     63e:	8f 93       	push	r24
     640:	89 81       	ldd	r24, Y+1	; 0x01
     642:	8f 93       	push	r24
     644:	82 e4       	ldi	r24, 0x42	; 66
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	9f 93       	push	r25
     64a:	8f 93       	push	r24
     64c:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     650:	e8 e2       	ldi	r30, 0x28	; 40
     652:	f7 e0       	ldi	r31, 0x07	; 7
     654:	09 81       	ldd	r16, Y+1	; 0x01
     656:	1a 81       	ldd	r17, Y+2	; 0x02
     658:	02 83       	std	Z+2, r16	; 0x02
     65a:	13 83       	std	Z+3, r17	; 0x03
     65c:	14 82       	std	Z+4, r1	; 0x04
     65e:	15 82       	std	Z+5, r1	; 0x05
     660:	16 82       	std	Z+6, r1	; 0x06
     662:	17 82       	std	Z+7, r1	; 0x07
     664:	10 86       	std	Z+8, r1	; 0x08
     666:	11 86       	std	Z+9, r1	; 0x09
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
     66c:	93 87       	std	Z+11, r25	; 0x0b
     66e:	82 87       	std	Z+10, r24	; 0x0a
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	9a 81       	ldd	r25, Y+2	; 0x02
     674:	cb d7       	rcall	.+3990   	; 0x160c <NWK_SetAddr>
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	9a 81       	ldd	r25, Y+2	; 0x02
     67a:	a0 e1       	ldi	r26, 0x10	; 16
     67c:	b7 e0       	ldi	r27, 0x07	; 7
     67e:	20 91 19 07 	lds	r18, 0x0719	; 0x800719 <myNodeID>
     682:	30 91 1a 07 	lds	r19, 0x071A	; 0x80071a <myNodeID+0x1>
     686:	14 96       	adiw	r26, 0x04	; 4
     688:	3c 93       	st	X, r19
     68a:	2e 93       	st	-X, r18
     68c:	13 97       	sbiw	r26, 0x03	; 3
     68e:	20 e3       	ldi	r18, 0x30	; 48
     690:	2c 93       	st	X, r18
     692:	12 96       	adiw	r26, 0x02	; 2
     694:	9c 93       	st	X, r25
     696:	8e 93       	st	-X, r24
     698:	11 97       	sbiw	r26, 0x01	; 1
     69a:	e6 e8       	ldi	r30, 0x86	; 134
     69c:	f7 e0       	ldi	r31, 0x07	; 7
     69e:	16 82       	std	Z+6, r1	; 0x06
     6a0:	15 82       	std	Z+5, r1	; 0x05
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	87 83       	std	Z+7, r24	; 0x07
     6a6:	80 87       	std	Z+8, r24	; 0x08
     6a8:	83 e0       	ldi	r24, 0x03	; 3
     6aa:	81 87       	std	Z+9, r24	; 0x09
     6ac:	b3 87       	std	Z+11, r27	; 0x0b
     6ae:	a2 87       	std	Z+10, r26	; 0x0a
     6b0:	85 e0       	ldi	r24, 0x05	; 5
     6b2:	84 87       	std	Z+12, r24	; 0x0c
     6b4:	89 ef       	ldi	r24, 0xF9	; 249
     6b6:	92 e0       	ldi	r25, 0x02	; 2
     6b8:	96 87       	std	Z+14, r25	; 0x0e
     6ba:	85 87       	std	Z+13, r24	; 0x0d
     6bc:	cf 01       	movw	r24, r30
     6be:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <NWK_DataReq>
     6c2:	84 e0       	ldi	r24, 0x04	; 4
     6c4:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <appState>
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	0c c0       	rjmp	.+24     	; 0x6ea <appAddrInd+0xd6>
     6d2:	1f 92       	push	r1
     6d4:	8f 93       	push	r24
     6d6:	8e e5       	ldi	r24, 0x5E	; 94
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	9f 93       	push	r25
     6dc:	8f 93       	push	r24
     6de:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	0f 91       	pop	r16
     6f4:	08 95       	ret

000006f6 <appDataInd>:
     6f6:	cf 92       	push	r12
     6f8:	df 92       	push	r13
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	6c 01       	movw	r12, r24
     708:	dc 01       	movw	r26, r24
     70a:	17 96       	adiw	r26, 0x07	; 7
     70c:	ed 91       	ld	r30, X+
     70e:	fc 91       	ld	r31, X
     710:	18 97       	sbiw	r26, 0x08	; 8
     712:	1a 96       	adiw	r26, 0x0a	; 10
     714:	8c 91       	ld	r24, X
     716:	1a 97       	sbiw	r26, 0x0a	; 10
     718:	81 8f       	std	Z+25, r24	; 0x19
     71a:	1b 96       	adiw	r26, 0x0b	; 11
     71c:	8c 91       	ld	r24, X
     71e:	1b 97       	sbiw	r26, 0x0b	; 11
     720:	82 8f       	std	Z+26, r24	; 0x1a
     722:	17 96       	adiw	r26, 0x07	; 7
     724:	cd 91       	ld	r28, X+
     726:	dc 91       	ld	r29, X
     728:	18 97       	sbiw	r26, 0x08	; 8
     72a:	8a 85       	ldd	r24, Y+10	; 0x0a
     72c:	9b 85       	ldd	r25, Y+11	; 0x0b
     72e:	89 2b       	or	r24, r25
     730:	09 f4       	brne	.+2      	; 0x734 <appDataInd+0x3e>
     732:	e4 c0       	rjmp	.+456    	; 0x8fc <appDataInd+0x206>
     734:	80 e8       	ldi	r24, 0x80	; 128
     736:	92 e0       	ldi	r25, 0x02	; 2
     738:	9f 93       	push	r25
     73a:	8f 93       	push	r24
     73c:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     740:	89 81       	ldd	r24, Y+1	; 0x01
     742:	1f 92       	push	r1
     744:	8f 93       	push	r24
     746:	09 e9       	ldi	r16, 0x99	; 153
     748:	12 e0       	ldi	r17, 0x02	; 2
     74a:	1f 93       	push	r17
     74c:	0f 93       	push	r16
     74e:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     752:	8b 85       	ldd	r24, Y+11	; 0x0b
     754:	8f 93       	push	r24
     756:	8a 85       	ldd	r24, Y+10	; 0x0a
     758:	8f 93       	push	r24
     75a:	8a ea       	ldi	r24, 0xAA	; 170
     75c:	92 e0       	ldi	r25, 0x02	; 2
     75e:	9f 93       	push	r25
     760:	8f 93       	push	r24
     762:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     766:	88 8d       	ldd	r24, Y+24	; 0x18
     768:	8f 93       	push	r24
     76a:	8f 89       	ldd	r24, Y+23	; 0x17
     76c:	8f 93       	push	r24
     76e:	8e eb       	ldi	r24, 0xBE	; 190
     770:	92 e0       	ldi	r25, 0x02	; 2
     772:	9f 93       	push	r25
     774:	8f 93       	push	r24
     776:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     77a:	89 8d       	ldd	r24, Y+25	; 0x19
     77c:	1f 92       	push	r1
     77e:	8f 93       	push	r24
     780:	83 ed       	ldi	r24, 0xD3	; 211
     782:	92 e0       	ldi	r25, 0x02	; 2
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     78c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     78e:	28 2f       	mov	r18, r24
     790:	08 2e       	mov	r0, r24
     792:	00 0c       	add	r0, r0
     794:	33 0b       	sbc	r19, r19
     796:	3f 93       	push	r19
     798:	8f 93       	push	r24
     79a:	8e ed       	ldi	r24, 0xDE	; 222
     79c:	92 e0       	ldi	r25, 0x02	; 2
     79e:	9f 93       	push	r25
     7a0:	8f 93       	push	r24
     7a2:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	1f 92       	push	r1
     7aa:	8f 93       	push	r24
     7ac:	1f 93       	push	r17
     7ae:	0f 93       	push	r16
     7b0:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     7b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7b6:	1f 92       	push	r1
     7b8:	8f 93       	push	r24
     7ba:	8a ee       	ldi	r24, 0xEA	; 234
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	9f 93       	push	r25
     7c0:	8f 93       	push	r24
     7c2:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     7c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7c8:	1f 92       	push	r1
     7ca:	8f 93       	push	r24
     7cc:	8e ef       	ldi	r24, 0xFE	; 254
     7ce:	92 e0       	ldi	r25, 0x02	; 2
     7d0:	9f 93       	push	r25
     7d2:	8f 93       	push	r24
     7d4:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     7d8:	ed b7       	in	r30, 0x3d	; 61
     7da:	fe b7       	in	r31, 0x3e	; 62
     7dc:	b2 96       	adiw	r30, 0x22	; 34
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	fe bf       	out	0x3e, r31	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	ed bf       	out	0x3d, r30	; 61
     7e8:	88 a1       	ldd	r24, Y+32	; 0x20
     7ea:	8f 93       	push	r24
     7ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7ee:	8f 93       	push	r24
     7f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     7f2:	8f 93       	push	r24
     7f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     7f6:	8f 93       	push	r24
     7f8:	82 e1       	ldi	r24, 0x12	; 18
     7fa:	93 e0       	ldi	r25, 0x03	; 3
     7fc:	9f 93       	push	r25
     7fe:	8f 93       	push	r24
     800:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     804:	8c a1       	ldd	r24, Y+36	; 0x24
     806:	8f 93       	push	r24
     808:	8b a1       	ldd	r24, Y+35	; 0x23
     80a:	8f 93       	push	r24
     80c:	8a a1       	ldd	r24, Y+34	; 0x22
     80e:	8f 93       	push	r24
     810:	89 a1       	ldd	r24, Y+33	; 0x21
     812:	8f 93       	push	r24
     814:	89 e2       	ldi	r24, 0x29	; 41
     816:	93 e0       	ldi	r25, 0x03	; 3
     818:	9f 93       	push	r25
     81a:	8f 93       	push	r24
     81c:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     820:	88 a5       	ldd	r24, Y+40	; 0x28
     822:	8f 93       	push	r24
     824:	8f a1       	ldd	r24, Y+39	; 0x27
     826:	8f 93       	push	r24
     828:	8e a1       	ldd	r24, Y+38	; 0x26
     82a:	8f 93       	push	r24
     82c:	8d a1       	ldd	r24, Y+37	; 0x25
     82e:	8f 93       	push	r24
     830:	8d e3       	ldi	r24, 0x3D	; 61
     832:	93 e0       	ldi	r25, 0x03	; 3
     834:	9f 93       	push	r25
     836:	8f 93       	push	r24
     838:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     83c:	8c a5       	ldd	r24, Y+44	; 0x2c
     83e:	8f 93       	push	r24
     840:	8b a5       	ldd	r24, Y+43	; 0x2b
     842:	8f 93       	push	r24
     844:	8a a5       	ldd	r24, Y+42	; 0x2a
     846:	8f 93       	push	r24
     848:	89 a5       	ldd	r24, Y+41	; 0x29
     84a:	8f 93       	push	r24
     84c:	82 e5       	ldi	r24, 0x52	; 82
     84e:	93 e0       	ldi	r25, 0x03	; 3
     850:	9f 93       	push	r25
     852:	8f 93       	push	r24
     854:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     858:	88 a9       	ldd	r24, Y+48	; 0x30
     85a:	8f 93       	push	r24
     85c:	8f a5       	ldd	r24, Y+47	; 0x2f
     85e:	8f 93       	push	r24
     860:	8e a5       	ldd	r24, Y+46	; 0x2e
     862:	8f 93       	push	r24
     864:	8d a5       	ldd	r24, Y+45	; 0x2d
     866:	8f 93       	push	r24
     868:	8a e6       	ldi	r24, 0x6A	; 106
     86a:	93 e0       	ldi	r25, 0x03	; 3
     86c:	9f 93       	push	r25
     86e:	8f 93       	push	r24
     870:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     874:	89 a9       	ldd	r24, Y+49	; 0x31
     876:	1f 92       	push	r1
     878:	8f 93       	push	r24
     87a:	80 e8       	ldi	r24, 0x80	; 128
     87c:	93 e0       	ldi	r25, 0x03	; 3
     87e:	9f 93       	push	r25
     880:	8f 93       	push	r24
     882:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     886:	8d b7       	in	r24, 0x3d	; 61
     888:	9e b7       	in	r25, 0x3e	; 62
     88a:	82 96       	adiw	r24, 0x22	; 34
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	9e bf       	out	0x3e, r25	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	8d bf       	out	0x3d, r24	; 61
     896:	8a a9       	ldd	r24, Y+50	; 0x32
     898:	1f 92       	push	r1
     89a:	8f 93       	push	r24
     89c:	84 e9       	ldi	r24, 0x94	; 148
     89e:	93 e0       	ldi	r25, 0x03	; 3
     8a0:	9f 93       	push	r25
     8a2:	8f 93       	push	r24
     8a4:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     8a8:	88 ea       	ldi	r24, 0xA8	; 168
     8aa:	93 e0       	ldi	r25, 0x03	; 3
     8ac:	9f 93       	push	r25
     8ae:	8f 93       	push	r24
     8b0:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     8b4:	8a a9       	ldd	r24, Y+50	; 0x32
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	88 23       	and	r24, r24
     8c4:	99 f0       	breq	.+38     	; 0x8ec <appDataInd+0x1f6>
     8c6:	7e 01       	movw	r14, r28
     8c8:	93 e3       	ldi	r25, 0x33	; 51
     8ca:	e9 0e       	add	r14, r25
     8cc:	f1 1c       	adc	r15, r1
     8ce:	00 e0       	ldi	r16, 0x00	; 0
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	d7 01       	movw	r26, r14
     8d4:	8d 91       	ld	r24, X+
     8d6:	7d 01       	movw	r14, r26
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 20 18 	call	0x3040	; 0x3040 <putchar>
     8de:	0f 5f       	subi	r16, 0xFF	; 255
     8e0:	1f 4f       	sbci	r17, 0xFF	; 255
     8e2:	8a a9       	ldd	r24, Y+50	; 0x32
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	08 17       	cp	r16, r24
     8e8:	19 07       	cpc	r17, r25
     8ea:	9c f3       	brlt	.-26     	; 0x8d2 <appDataInd+0x1dc>
     8ec:	80 ed       	ldi	r24, 0xD0	; 208
     8ee:	92 e0       	ldi	r25, 0x02	; 2
     8f0:	9f 93       	push	r25
     8f2:	8f 93       	push	r24
     8f4:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	f6 01       	movw	r30, r12
     8fe:	80 81       	ld	r24, Z
     900:	91 81       	ldd	r25, Z+1	; 0x01
     902:	0e dd       	rcall	.-1508   	; 0x320 <APP_CommandsPending>
     904:	88 23       	and	r24, r24
     906:	19 f0       	breq	.+6      	; 0x90e <appDataInd+0x218>
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <NWK_SetAckControl>
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	08 95       	ret

00000922 <appDataConf>:
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	ec 01       	movw	r28, r24
     928:	8f 85       	ldd	r24, Y+15	; 0x0f
     92a:	81 11       	cpse	r24, r1
     92c:	0c c0       	rjmp	.+24     	; 0x946 <appDataConf+0x24>
     92e:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <appNetworkStatus>
     932:	81 11       	cpse	r24, r1
     934:	12 c0       	rjmp	.+36     	; 0x95a <appDataConf+0x38>
     936:	89 e7       	ldi	r24, 0x79	; 121
     938:	97 e0       	ldi	r25, 0x07	; 7
     93a:	0e 94 ad 14 	call	0x295a	; 0x295a <SYS_TimerStop>
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <appNetworkStatus>
     944:	0a c0       	rjmp	.+20     	; 0x95a <appDataConf+0x38>
     946:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <appNetworkStatus>
     94a:	88 23       	and	r24, r24
     94c:	31 f0       	breq	.+12     	; 0x95a <appDataConf+0x38>
     94e:	89 e7       	ldi	r24, 0x79	; 121
     950:	97 e0       	ldi	r25, 0x07	; 7
     952:	0e 94 04 15 	call	0x2a08	; 0x2a08 <SYS_TimerStart>
     956:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <appNetworkStatus>
     95a:	88 89       	ldd	r24, Y+16	; 0x10
     95c:	81 30       	cpi	r24, 0x01	; 1
     95e:	41 f4       	brne	.+16     	; 0x970 <appDataConf+0x4e>
     960:	8c e6       	ldi	r24, 0x6C	; 108
     962:	97 e0       	ldi	r25, 0x07	; 7
     964:	0e 94 04 15 	call	0x2a08	; 0x2a08 <SYS_TimerStart>
     968:	87 e0       	ldi	r24, 0x07	; 7
     96a:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <appState>
     96e:	07 c0       	rjmp	.+14     	; 0x97e <appDataConf+0x5c>
     970:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <appState>
     974:	82 30       	cpi	r24, 0x02	; 2
     976:	19 f0       	breq	.+6      	; 0x97e <appDataConf+0x5c>
     978:	85 e0       	ldi	r24, 0x05	; 5
     97a:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <appState>
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	08 95       	ret

00000984 <HAL_UartBytesReceived>:
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	00 97       	sbiw	r24, 0x00	; 0
     98e:	49 f0       	breq	.+18     	; 0x9a2 <HAL_UartBytesReceived+0x1e>
     990:	8c 01       	movw	r16, r24
     992:	c0 e0       	ldi	r28, 0x00	; 0
     994:	d0 e0       	ldi	r29, 0x00	; 0
     996:	47 d5       	rcall	.+2702   	; 0x1426 <HAL_UartReadByte>
     998:	fd dc       	rcall	.-1542   	; 0x394 <APP_CommandsByteReceived>
     99a:	21 96       	adiw	r28, 0x01	; 1
     99c:	0c 17       	cp	r16, r28
     99e:	1d 07       	cpc	r17, r29
     9a0:	d1 f7       	brne	.-12     	; 0x996 <HAL_UartBytesReceived+0x12>
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	08 95       	ret

000009ac <Hx711_init>:
     9ac:	9d 98       	cbi	0x13, 5	; 19
     9ae:	a5 9a       	sbi	0x14, 5	; 20
     9b0:	83 9a       	sbi	0x10, 3	; 16
     9b2:	8b 98       	cbi	0x11, 3	; 17
     9b4:	08 95       	ret

000009b6 <Hx711_read>:
     9b6:	95 99       	sbic	0x12, 5	; 18
     9b8:	fe cf       	rjmp	.-4      	; 0x9b6 <Hx711_read>
     9ba:	28 e1       	ldi	r18, 0x18	; 24
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	dc 01       	movw	r26, r24
     9c2:	8b 9a       	sbi	0x11, 3	; 17
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	aa 1f       	adc	r26, r26
     9ca:	bb 1f       	adc	r27, r27
     9cc:	8b 98       	cbi	0x11, 3	; 17
     9ce:	95 9b       	sbis	0x12, 5	; 18
     9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <Hx711_read+0x22>
     9d2:	01 96       	adiw	r24, 0x01	; 1
     9d4:	a1 1d       	adc	r26, r1
     9d6:	b1 1d       	adc	r27, r1
     9d8:	21 50       	subi	r18, 0x01	; 1
     9da:	99 f7       	brne	.-26     	; 0x9c2 <Hx711_read+0xc>
     9dc:	8b 9a       	sbi	0x11, 3	; 17
     9de:	8b 98       	cbi	0x11, 3	; 17
     9e0:	bc 01       	movw	r22, r24
     9e2:	cd 01       	movw	r24, r26
     9e4:	80 58       	subi	r24, 0x80	; 128
     9e6:	08 95       	ret

000009e8 <print_weight>:

void print_weight(float weight_grams) {
     9e8:	8f 92       	push	r8
     9ea:	9f 92       	push	r9
     9ec:	af 92       	push	r10
     9ee:	bf 92       	push	r11
     9f0:	ef 92       	push	r14
     9f2:	ff 92       	push	r15
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	c0 54       	subi	r28, 0x40	; 64
     a02:	d1 09       	sbc	r29, r1
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	de bf       	out	0x3e, r29	; 62
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	cd bf       	out	0x3d, r28	; 61
     a0e:	4b 01       	movw	r8, r22
     a10:	5c 01       	movw	r10, r24
	char temp_str[64];
	long whole = (long)weight_grams;
     a12:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixsfsi>
     a16:	16 2f       	mov	r17, r22
     a18:	07 2f       	mov	r16, r23
     a1a:	f8 2e       	mov	r15, r24
     a1c:	e9 2e       	mov	r14, r25
	long decimal = labs((long)((weight_grams - whole) * 100));  // safe abs for long
	sprintf(temp_str, "Value: %ld.%02ld g", whole, decimal);
     a1e:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <__floatsisf>
     a22:	9b 01       	movw	r18, r22
     a24:	ac 01       	movw	r20, r24
     a26:	c5 01       	movw	r24, r10
     a28:	b4 01       	movw	r22, r8
     a2a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__subsf3>
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	48 ec       	ldi	r20, 0xC8	; 200
     a34:	52 e4       	ldi	r21, 0x42	; 66
     a36:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <__mulsf3>
     a3a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixsfsi>
     a3e:	99 23       	and	r25, r25
     a40:	3c f4       	brge	.+14     	; 0xa50 <print_weight+0x68>
     a42:	90 95       	com	r25
     a44:	80 95       	com	r24
     a46:	70 95       	com	r23
     a48:	61 95       	neg	r22
     a4a:	7f 4f       	sbci	r23, 0xFF	; 255
     a4c:	8f 4f       	sbci	r24, 0xFF	; 255
     a4e:	9f 4f       	sbci	r25, 0xFF	; 255
     a50:	9f 93       	push	r25
     a52:	8f 93       	push	r24
     a54:	7f 93       	push	r23
     a56:	6f 93       	push	r22
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	86 eb       	ldi	r24, 0xB6	; 182
     a62:	93 e0       	ldi	r25, 0x03	; 3
     a64:	9f 93       	push	r25
     a66:	8f 93       	push	r24
     a68:	8e 01       	movw	r16, r28
     a6a:	0f 5f       	subi	r16, 0xFF	; 255
     a6c:	1f 4f       	sbci	r17, 0xFF	; 255
     a6e:	1f 93       	push	r17
     a70:	0f 93       	push	r16
     a72:	0e 94 25 18 	call	0x304a	; 0x304a <sprintf>
	UART_SendStringNewLine(temp_str);
     a76:	c8 01       	movw	r24, r16
     a78:	9b dd       	rcall	.-1226   	; 0x5b0 <UART_SendStringNewLine>
}
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	c0 5c       	subi	r28, 0xC0	; 192
     a86:	df 4f       	sbci	r29, 0xFF	; 255
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	de bf       	out	0x3e, r29	; 62
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	cd bf       	out	0x3d, r28	; 61
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	bf 90       	pop	r11
     aa0:	af 90       	pop	r10
     aa2:	9f 90       	pop	r9
     aa4:	8f 90       	pop	r8
     aa6:	08 95       	ret

00000aa8 <printMenu>:
appSendData();
(void)timer;
}

void printMenu() {
	UART_SendStringNewLine("Welcome to interactive terminal!");
     aa8:	89 ec       	ldi	r24, 0xC9	; 201
     aaa:	93 e0       	ldi	r25, 0x03	; 3
     aac:	81 dd       	rcall	.-1278   	; 0x5b0 <UART_SendStringNewLine>
	UART_SendStringNewLine("1 ...... read weight ADC values");
     aae:	8a ee       	ldi	r24, 0xEA	; 234
     ab0:	93 e0       	ldi	r25, 0x03	; 3
     ab2:	7e dd       	rcall	.-1284   	; 0x5b0 <UART_SendStringNewLine>
	UART_SendStringNewLine("2 ...... calibrate weight reading");
     ab4:	8a e0       	ldi	r24, 0x0A	; 10
     ab6:	94 e0       	ldi	r25, 0x04	; 4
     ab8:	7b dd       	rcall	.-1290   	; 0x5b0 <UART_SendStringNewLine>
	UART_SendStringNewLine("3 ...... read calibrated values");
     aba:	8c e2       	ldi	r24, 0x2C	; 44
     abc:	94 e0       	ldi	r25, 0x04	; 4
     abe:	78 dd       	rcall	.-1296   	; 0x5b0 <UART_SendStringNewLine>
	UART_SendStringNewLine("4 ...... read calibrated values and send them to gateway");
     ac0:	8c e4       	ldi	r24, 0x4C	; 76
     ac2:	94 e0       	ldi	r25, 0x04	; 4
     ac4:	75 dd       	rcall	.-1302   	; 0x5b0 <UART_SendStringNewLine>
	UART_SendStringNewLine("0 ...... clear");
     ac6:	85 e8       	ldi	r24, 0x85	; 133
     ac8:	94 e0       	ldi	r25, 0x04	; 4
     aca:	72 cd       	rjmp	.-1308   	; 0x5b0 <UART_SendStringNewLine>
     acc:	08 95       	ret

00000ace <cleanConsole>:
     ace:	cf 93       	push	r28
}

void cleanConsole() {
     ad0:	df 93       	push	r29
     ad2:	ce e1       	ldi	r28, 0x1E	; 30
     ad4:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < 30; i++) {
		UART_SendStringNewLine("");  // Send an empty string which is just a newline
     ad6:	82 ed       	ldi	r24, 0xD2	; 210
     ad8:	92 e0       	ldi	r25, 0x02	; 2
     ada:	6a dd       	rcall	.-1324   	; 0x5b0 <UART_SendStringNewLine>
     adc:	21 97       	sbiw	r28, 0x01	; 1
	UART_SendStringNewLine("4 ...... read calibrated values and send them to gateway");
	UART_SendStringNewLine("0 ...... clear");
}

void cleanConsole() {
	for (int i = 0; i < 30; i++) {
     ade:	d9 f7       	brne	.-10     	; 0xad6 <cleanConsole+0x8>
		UART_SendStringNewLine("");  // Send an empty string which is just a newline
	}
}
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <main>:

int main(void) {
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
     aee:	2f 97       	sbiw	r28, 0x0f	; 15
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61
	SYS_Init();
     afa:	0e 94 38 14 	call	0x2870	; 0x2870 <SYS_Init>
	HAL_UartInit(38400);
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	76 e9       	ldi	r23, 0x96	; 150
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	3b d4       	rcall	.+2166   	; 0x137e <HAL_UartInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b08:	2f ef       	ldi	r18, 0xFF	; 255
     b0a:	34 e3       	ldi	r19, 0x34	; 52
     b0c:	4c e0       	ldi	r20, 0x0C	; 12
     b0e:	21 50       	subi	r18, 0x01	; 1
     b10:	30 40       	sbci	r19, 0x00	; 0
     b12:	40 40       	sbci	r20, 0x00	; 0
     b14:	e1 f7       	brne	.-8      	; 0xb0e <main+0x28>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <main+0x32>
     b18:	00 00       	nop
	_delay_ms(500);
	stdout = &uart_str;
     b1a:	ec e6       	ldi	r30, 0x6C	; 108
     b1c:	f3 e1       	ldi	r31, 0x13	; 19
     b1e:	84 e0       	ldi	r24, 0x04	; 4
     b20:	92 e0       	ldi	r25, 0x02	; 2
     b22:	93 83       	std	Z+3, r25	; 0x03
     b24:	82 83       	std	Z+2, r24	; 0x02
	stdin  = &uart_str;
     b26:	91 83       	std	Z+1, r25	; 0x01
     b28:	80 83       	st	Z, r24
	
	uint16_t adc_value;

	// Configure PE5 & PE6 as INPUT
	cbi(DDRE, PORTE5); // Button 1 (PE5)
     b2a:	6d 98       	cbi	0x0d, 5	; 13
	cbi(DDRE, PORTE6); // Button 2 (PE6)
     b2c:	6e 98       	cbi	0x0d, 6	; 13

	// Enable internal pull-ups (if no external resistors)
	sbi(PORTE, PORTE5);
     b2e:	75 9a       	sbi	0x0e, 5	; 14
	sbi(PORTE, PORTE6);
     b30:	76 9a       	sbi	0x0e, 6	; 14

	sei(); // Enable global interrupts
	
	Hx711_init();
     b32:	78 94       	sei
     b34:	3b df       	rcall	.-394    	; 0x9ac <Hx711_init>
	UART_SendStringNewLine("Init done.");
     b36:	84 e9       	ldi	r24, 0x94	; 148
     b38:	94 e0       	ldi	r25, 0x04	; 4
     b3a:	3a dd       	rcall	.-1420   	; 0x5b0 <UART_SendStringNewLine>
	
	uint8_t test_sequence[] = { 'H', 'e', 'l', 'l', 'o', ' ', 'U', 'A', 'R', 'T', '\r', '\n', 0 };
     b3c:	8d e0       	ldi	r24, 0x0D	; 13
     b3e:	e2 e2       	ldi	r30, 0x22	; 34
     b40:	f2 e0       	ldi	r31, 0x02	; 2
     b42:	de 01       	movw	r26, r28
     b44:	11 96       	adiw	r26, 0x01	; 1
     b46:	01 90       	ld	r0, Z+
     b48:	0d 92       	st	X+, r0
     b4a:	8a 95       	dec	r24
     b4c:	e1 f7       	brne	.-8      	; 0xb46 <main+0x60>

	for (uint8_t i = 0; test_sequence[i] != 0; i++) {
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	88 23       	and	r24, r24
     b52:	61 f0       	breq	.+24     	; 0xb6c <main+0x86>
		UART_SendChar(test_sequence[i]);  // Send each character
     b54:	10 e0       	ldi	r17, 0x00	; 0
     b56:	1c dd       	rcall	.-1480   	; 0x590 <UART_SendChar>
	Hx711_init();
	UART_SendStringNewLine("Init done.");
	
	uint8_t test_sequence[] = { 'H', 'e', 'l', 'l', 'o', ' ', 'U', 'A', 'R', 'T', '\r', '\n', 0 };

	for (uint8_t i = 0; test_sequence[i] != 0; i++) {
     b58:	1f 5f       	subi	r17, 0xFF	; 255
     b5a:	e1 e0       	ldi	r30, 0x01	; 1
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	ec 0f       	add	r30, r28
     b60:	fd 1f       	adc	r31, r29
     b62:	e1 0f       	add	r30, r17
     b64:	f1 1d       	adc	r31, r1
     b66:	80 81       	ld	r24, Z
     b68:	81 11       	cpse	r24, r1
     b6a:	f5 cf       	rjmp	.-22     	; 0xb56 <main+0x70>
		UART_SendChar(test_sequence[i]);  // Send each character
	}
	
	// Set PB6 as output for LED control
	//sbi(DDRB, PORTB6);
	DDRB |= (1 << DDB6) | (1 << DDB5) | (1 << DDB6);  // Set PORTB pins 5 and 6 as output
     b6c:	84 b1       	in	r24, 0x04	; 4
     b6e:	80 66       	ori	r24, 0x60	; 96
	DDRE |= (1 << DDE3);  // Set PORTE pin 3 as output
     b70:	84 b9       	out	0x04, r24	; 4
	
	printMenu();
     b72:	6b 9a       	sbi	0x0d, 3	; 13
     b74:	99 df       	rcall	.-206    	; 0xaa8 <printMenu>
					char received = UART_GetChar();
					if (received == '\x1B') {
						UART_SendStringNewLine("Not implemented LMAO");
						} else if (received == '\r') {
						tare_weight = Hx711_read();
						sprintf(temp_str, "Current tare value: %lu", tare_weight);
     b76:	0f 2e       	mov	r0, r31
     b78:	f5 e2       	ldi	r31, 0x25	; 37
     b7a:	4f 2e       	mov	r4, r31
     b7c:	f5 e0       	ldi	r31, 0x05	; 5
     b7e:	5f 2e       	mov	r5, r31
     b80:	f0 2d       	mov	r31, r0
     b82:	08 e9       	ldi	r16, 0x98	; 152
     b84:	17 e0       	ldi	r17, 0x07	; 7
				UART_SendStringNewLine("ESC ....... cancel");
				UART_SendStringNewLine("ENTER ..... confirm");
				UART_SendStringNewLine("+ ......... add weight");
				UART_SendStringNewLine("- ......... subtract weight");
				while (3) {
					sprintf(temp_str, "Current standard weight: %lu", standard_weight);
     b86:	0f 2e       	mov	r0, r31
     b88:	f7 ec       	ldi	r31, 0xC7	; 199
     b8a:	2f 2e       	mov	r2, r31
     b8c:	f5 e0       	ldi	r31, 0x05	; 5
     b8e:	3f 2e       	mov	r3, r31
     b90:	f0 2d       	mov	r31, r0
     b92:	0e 87       	std	Y+14, r16	; 0x0e
     b94:	1f 87       	std	Y+15, r17	; 0x0f
						standard_weight -= 10;
						} else if (received == '\x1B') {
						UART_SendStringNewLine("Not implemented LMAO");
						break;
						}	else if (received == '\r') {
						sprintf(temp_str, "Final standard weight: %lu", standard_weight);
     b96:	0f 2e       	mov	r0, r31
     b98:	f4 ee       	ldi	r31, 0xE4	; 228
     b9a:	6f 2e       	mov	r6, r31
     b9c:	f5 e0       	ldi	r31, 0x05	; 5
     b9e:	7f 2e       	mov	r7, r31
     ba0:	f0 2d       	mov	r31, r0
						UART_SendStringNewLine(temp_str);
						standard_weight_reading = Hx711_read();
						sprintf(temp_str, "Standard weight reading: %lu", standard_weight_reading);
     ba2:	0f 2e       	mov	r0, r31
     ba4:	ff ef       	ldi	r31, 0xFF	; 255
     ba6:	8f 2e       	mov	r8, r31
     ba8:	f5 e0       	ldi	r31, 0x05	; 5
     baa:	9f 2e       	mov	r9, r31
     bac:	f0 2d       	mov	r31, r0
				printMenu();
				break;  // Exit the program or break the outer loop
			case '1':
				UART_SendStringNewLine("Reading weight ADC value:");
				tmp_value = Hx711_read();
				sprintf(temp_str, "Value: %lu", tmp_value);  // Use %lu for unsigned long
     bae:	0f 2e       	mov	r0, r31
     bb0:	f8 ec       	ldi	r31, 0xC8	; 200
     bb2:	af 2e       	mov	r10, r31
     bb4:	f4 e0       	ldi	r31, 0x04	; 4
     bb6:	bf 2e       	mov	r11, r31
	DDRE |= (1 << DDE3);  // Set PORTE pin 3 as output
	
	printMenu();
	
	while (1) {
		char received = UART_GetChar();  // Wait for input
     bb8:	f0 2d       	mov	r31, r0
     bba:	f2 dc       	rcall	.-1564   	; 0x5a0 <UART_GetChar>
		UART_SendStringNewLine("Your input is:");
     bbc:	f8 2e       	mov	r15, r24
     bbe:	8f e9       	ldi	r24, 0x9F	; 159
		UART_SendChar(received);
     bc0:	94 e0       	ldi	r25, 0x04	; 4
     bc2:	f6 dc       	rcall	.-1556   	; 0x5b0 <UART_SendStringNewLine>
     bc4:	8f 2d       	mov	r24, r15
		UART_SendChar('\r');
     bc6:	e4 dc       	rcall	.-1592   	; 0x590 <UART_SendChar>
     bc8:	8d e0       	ldi	r24, 0x0D	; 13
     bca:	e2 dc       	rcall	.-1596   	; 0x590 <UART_SendChar>
		UART_SendChar('\n');
     bcc:	8a e0       	ldi	r24, 0x0A	; 10
     bce:	e0 dc       	rcall	.-1600   	; 0x590 <UART_SendChar>
     bd0:	52 e3       	ldi	r21, 0x32	; 50
		
		switch (received) {
     bd2:	f5 16       	cp	r15, r21
     bd4:	59 f1       	breq	.+86     	; 0xc2c <main+0x146>
     bd6:	5f 15       	cp	r21, r15
     bd8:	38 f0       	brcs	.+14     	; 0xbe8 <main+0x102>
     bda:	80 e3       	ldi	r24, 0x30	; 48
     bdc:	f8 16       	cp	r15, r24
     bde:	69 f0       	breq	.+26     	; 0xbfa <main+0x114>
     be0:	91 e3       	ldi	r25, 0x31	; 49
     be2:	f9 16       	cp	r15, r25
     be4:	69 f0       	breq	.+26     	; 0xc00 <main+0x11a>
     be6:	f8 c2       	rjmp	.+1520   	; 0x11d8 <main+0x6f2>
     be8:	a3 e3       	ldi	r26, 0x33	; 51
     bea:	fa 16       	cp	r15, r26
     bec:	09 f4       	brne	.+2      	; 0xbf0 <main+0x10a>
     bee:	15 c1       	rjmp	.+554    	; 0xe1a <main+0x334>
     bf0:	b4 e3       	ldi	r27, 0x34	; 52
     bf2:	fb 16       	cp	r15, r27
			case '0':
				cleanConsole();
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <main+0x112>
     bf6:	2f c1       	rjmp	.+606    	; 0xe56 <main+0x370>
				printMenu();
     bf8:	ef c2       	rjmp	.+1502   	; 0x11d8 <main+0x6f2>
     bfa:	69 df       	rcall	.-302    	; 0xace <cleanConsole>
				break;  // Exit the program or break the outer loop
     bfc:	55 df       	rcall	.-342    	; 0xaa8 <printMenu>
			case '1':
				UART_SendStringNewLine("Reading weight ADC value:");
     bfe:	dd cf       	rjmp	.-70     	; 0xbba <main+0xd4>
     c00:	8e ea       	ldi	r24, 0xAE	; 174
     c02:	94 e0       	ldi	r25, 0x04	; 4
				tmp_value = Hx711_read();
     c04:	d5 dc       	rcall	.-1622   	; 0x5b0 <UART_SendStringNewLine>
     c06:	d7 de       	rcall	.-594    	; 0x9b6 <Hx711_read>
				sprintf(temp_str, "Value: %lu", tmp_value);  // Use %lu for unsigned long
     c08:	9f 93       	push	r25
     c0a:	8f 93       	push	r24
     c0c:	7f 93       	push	r23
     c0e:	6f 93       	push	r22
     c10:	bf 92       	push	r11
     c12:	af 92       	push	r10
     c14:	1f 93       	push	r17
     c16:	0f 93       	push	r16
     c18:	0e 94 25 18 	call	0x304a	; 0x304a <sprintf>
				UART_SendStringNewLine(temp_str);
     c1c:	c8 01       	movw	r24, r16
				break;
     c1e:	c8 dc       	rcall	.-1648   	; 0x5b0 <UART_SendStringNewLine>
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
			case '2':
				UART_SendStringNewLine("Calibrate tare weight");
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	c7 cf       	rjmp	.-114    	; 0xbba <main+0xd4>
     c2c:	83 ed       	ldi	r24, 0xD3	; 211
				UART_SendStringNewLine("ESC ....... cancel");
     c2e:	94 e0       	ldi	r25, 0x04	; 4
     c30:	bf dc       	rcall	.-1666   	; 0x5b0 <UART_SendStringNewLine>
     c32:	89 ee       	ldi	r24, 0xE9	; 233
     c34:	94 e0       	ldi	r25, 0x04	; 4
				UART_SendStringNewLine("ENTER ..... confirm");
     c36:	bc dc       	rcall	.-1672   	; 0x5b0 <UART_SendStringNewLine>
     c38:	8c ef       	ldi	r24, 0xFC	; 252
     c3a:	94 e0       	ldi	r25, 0x04	; 4
     c3c:	b9 dc       	rcall	.-1678   	; 0x5b0 <UART_SendStringNewLine>
				while (1) {
					char received = UART_GetChar();
     c3e:	b0 dc       	rcall	.-1696   	; 0x5a0 <UART_GetChar>
     c40:	8b 31       	cpi	r24, 0x1B	; 27
					if (received == '\x1B') {
     c42:	21 f4       	brne	.+8      	; 0xc4c <main+0x166>
     c44:	80 e1       	ldi	r24, 0x10	; 16
						UART_SendStringNewLine("Not implemented LMAO");
     c46:	95 e0       	ldi	r25, 0x05	; 5
     c48:	b3 dc       	rcall	.-1690   	; 0x5b0 <UART_SendStringNewLine>
     c4a:	f9 cf       	rjmp	.-14     	; 0xc3e <main+0x158>
     c4c:	8d 30       	cpi	r24, 0x0D	; 13
     c4e:	69 f5       	brne	.+90     	; 0xcaa <main+0x1c4>
						} else if (received == '\r') {
     c50:	b2 de       	rcall	.-668    	; 0x9b6 <Hx711_read>
     c52:	60 93 1e 02 	sts	0x021E, r22	; 0x80021e <tare_weight>
						tare_weight = Hx711_read();
     c56:	70 93 1f 02 	sts	0x021F, r23	; 0x80021f <tare_weight+0x1>
     c5a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <tare_weight+0x2>
     c5e:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <tare_weight+0x3>
						sprintf(temp_str, "Current tare value: %lu", tare_weight);
     c62:	9f 93       	push	r25
     c64:	8f 93       	push	r24
     c66:	7f 93       	push	r23
     c68:	6f 93       	push	r22
     c6a:	5f 92       	push	r5
     c6c:	4f 92       	push	r4
     c6e:	1f 93       	push	r17
     c70:	0f 93       	push	r16
						UART_SendStringNewLine(temp_str);
     c72:	0e 94 25 18 	call	0x304a	; 0x304a <sprintf>
     c76:	c8 01       	movw	r24, r16
						break;
						} else {
						UART_SendStringNewLine("Incorrect choice");
					}
				}
				UART_SendStringNewLine("Calibrate with standard weight");
     c78:	9b dc       	rcall	.-1738   	; 0x5b0 <UART_SendStringNewLine>
     c7a:	8d e3       	ldi	r24, 0x3D	; 61
     c7c:	95 e0       	ldi	r25, 0x05	; 5
     c7e:	98 dc       	rcall	.-1744   	; 0x5b0 <UART_SendStringNewLine>
				UART_SendStringNewLine("Enter standard weight weight in grams:");
     c80:	8c e5       	ldi	r24, 0x5C	; 92
     c82:	95 e0       	ldi	r25, 0x05	; 5
     c84:	95 dc       	rcall	.-1750   	; 0x5b0 <UART_SendStringNewLine>
				UART_SendStringNewLine("ESC ....... cancel");
     c86:	89 ee       	ldi	r24, 0xE9	; 233
     c88:	94 e0       	ldi	r25, 0x04	; 4
     c8a:	92 dc       	rcall	.-1756   	; 0x5b0 <UART_SendStringNewLine>
     c8c:	8c ef       	ldi	r24, 0xFC	; 252
				UART_SendStringNewLine("ENTER ..... confirm");
     c8e:	94 e0       	ldi	r25, 0x04	; 4
     c90:	8f dc       	rcall	.-1762   	; 0x5b0 <UART_SendStringNewLine>
     c92:	83 e8       	ldi	r24, 0x83	; 131
     c94:	95 e0       	ldi	r25, 0x05	; 5
				UART_SendStringNewLine("+ ......... add weight");
     c96:	8c dc       	rcall	.-1768   	; 0x5b0 <UART_SendStringNewLine>
     c98:	8a e9       	ldi	r24, 0x9A	; 154
     c9a:	95 e0       	ldi	r25, 0x05	; 5
     c9c:	89 dc       	rcall	.-1774   	; 0x5b0 <UART_SendStringNewLine>
				UART_SendStringNewLine("- ......... subtract weight");
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
     ca8:	04 c0       	rjmp	.+8      	; 0xcb2 <main+0x1cc>
     caa:	86 eb       	ldi	r24, 0xB6	; 182
     cac:	95 e0       	ldi	r25, 0x05	; 5
						tare_weight = Hx711_read();
						sprintf(temp_str, "Current tare value: %lu", tare_weight);
						UART_SendStringNewLine(temp_str);
						break;
						} else {
						UART_SendStringNewLine("Incorrect choice");
     cae:	80 dc       	rcall	.-1792   	; 0x5b0 <UART_SendStringNewLine>
     cb0:	c6 cf       	rjmp	.-116    	; 0xc3e <main+0x158>
     cb2:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <standard_weight+0x3>
     cb6:	8f 93       	push	r24
				UART_SendStringNewLine("ESC ....... cancel");
				UART_SendStringNewLine("ENTER ..... confirm");
				UART_SendStringNewLine("+ ......... add weight");
				UART_SendStringNewLine("- ......... subtract weight");
				while (3) {
					sprintf(temp_str, "Current standard weight: %lu", standard_weight);
     cb8:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <standard_weight+0x2>
     cbc:	8f 93       	push	r24
     cbe:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <standard_weight+0x1>
     cc2:	8f 93       	push	r24
     cc4:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <standard_weight>
     cc8:	8f 93       	push	r24
     cca:	3f 92       	push	r3
     ccc:	2f 92       	push	r2
     cce:	1f 93       	push	r17
     cd0:	0f 93       	push	r16
     cd2:	0e 94 25 18 	call	0x304a	; 0x304a <sprintf>
     cd6:	8e 85       	ldd	r24, Y+14	; 0x0e
     cd8:	9f 85       	ldd	r25, Y+15	; 0x0f
     cda:	6a dc       	rcall	.-1836   	; 0x5b0 <UART_SendStringNewLine>
					UART_SendStringNewLine(temp_str);
     cdc:	61 dc       	rcall	.-1854   	; 0x5a0 <UART_GetChar>
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
					char received = UART_GetChar();
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
					if (received == '+') {
     ce8:	8b 32       	cpi	r24, 0x2B	; 43
     cea:	a1 f4       	brne	.+40     	; 0xd14 <main+0x22e>
     cec:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <standard_weight>
     cf0:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <standard_weight+0x1>
     cf4:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <standard_weight+0x2>
						standard_weight += 10;
     cf8:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <standard_weight+0x3>
     cfc:	0a 96       	adiw	r24, 0x0a	; 10
     cfe:	a1 1d       	adc	r26, r1
     d00:	b1 1d       	adc	r27, r1
     d02:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <standard_weight>
     d06:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <standard_weight+0x1>
     d0a:	a0 93 1c 02 	sts	0x021C, r26	; 0x80021c <standard_weight+0x2>
     d0e:	b0 93 1d 02 	sts	0x021D, r27	; 0x80021d <standard_weight+0x3>
     d12:	cf cf       	rjmp	.-98     	; 0xcb2 <main+0x1cc>
     d14:	8d 32       	cpi	r24, 0x2D	; 45
     d16:	a1 f4       	brne	.+40     	; 0xd40 <main+0x25a>
     d18:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <standard_weight>
						} else if (received == '-') {
     d1c:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <standard_weight+0x1>
						standard_weight -= 10;
     d20:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <standard_weight+0x2>
     d24:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <standard_weight+0x3>
     d28:	0a 97       	sbiw	r24, 0x0a	; 10
     d2a:	a1 09       	sbc	r26, r1
     d2c:	b1 09       	sbc	r27, r1
     d2e:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <standard_weight>
     d32:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <standard_weight+0x1>
     d36:	a0 93 1c 02 	sts	0x021C, r26	; 0x80021c <standard_weight+0x2>
     d3a:	b0 93 1d 02 	sts	0x021D, r27	; 0x80021d <standard_weight+0x3>
     d3e:	b9 cf       	rjmp	.-142    	; 0xcb2 <main+0x1cc>
     d40:	8b 31       	cpi	r24, 0x1B	; 27
     d42:	21 f4       	brne	.+8      	; 0xd4c <main+0x266>
						} else if (received == '\x1B') {
     d44:	80 e1       	ldi	r24, 0x10	; 16
     d46:	95 e0       	ldi	r25, 0x05	; 5
						UART_SendStringNewLine("Not implemented LMAO");
     d48:	33 dc       	rcall	.-1946   	; 0x5b0 <UART_SendStringNewLine>
     d4a:	63 c0       	rjmp	.+198    	; 0xe12 <main+0x32c>
     d4c:	8d 30       	cpi	r24, 0x0D	; 13
     d4e:	09 f0       	breq	.+2      	; 0xd52 <main+0x26c>
						break;
     d50:	b0 cf       	rjmp	.-160    	; 0xcb2 <main+0x1cc>
						}	else if (received == '\r') {
     d52:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <standard_weight+0x3>
     d56:	8f 93       	push	r24
						sprintf(temp_str, "Final standard weight: %lu", standard_weight);
     d58:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <standard_weight+0x2>
     d5c:	8f 93       	push	r24
     d5e:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <standard_weight+0x1>
     d62:	8f 93       	push	r24
     d64:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <standard_weight>
     d68:	8f 93       	push	r24
     d6a:	7f 92       	push	r7
     d6c:	6f 92       	push	r6
     d6e:	1f 93       	push	r17
     d70:	0f 93       	push	r16
     d72:	0e 94 25 18 	call	0x304a	; 0x304a <sprintf>
     d76:	c8 01       	movw	r24, r16
     d78:	1b dc       	rcall	.-1994   	; 0x5b0 <UART_SendStringNewLine>
     d7a:	1d de       	rcall	.-966    	; 0x9b6 <Hx711_read>
						UART_SendStringNewLine(temp_str);
     d7c:	60 93 16 02 	sts	0x0216, r22	; 0x800216 <standard_weight_reading>
     d80:	70 93 17 02 	sts	0x0217, r23	; 0x800217 <standard_weight_reading+0x1>
						standard_weight_reading = Hx711_read();
     d84:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <standard_weight_reading+0x2>
     d88:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <standard_weight_reading+0x3>
     d8c:	9f 93       	push	r25
     d8e:	8f 93       	push	r24
     d90:	7f 93       	push	r23
     d92:	6f 93       	push	r22
     d94:	9f 92       	push	r9
						sprintf(temp_str, "Standard weight reading: %lu", standard_weight_reading);
     d96:	8f 92       	push	r8
     d98:	1f 93       	push	r17
     d9a:	0f 93       	push	r16
     d9c:	0e 94 25 18 	call	0x304a	; 0x304a <sprintf>
     da0:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <standard_weight_reading>
     da4:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <standard_weight_reading+0x1>
     da8:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <standard_weight_reading+0x2>
						scale_factor = (standard_weight_reading - tare_weight) / (float)standard_weight;
     dac:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <standard_weight_reading+0x3>
     db0:	c0 90 1e 02 	lds	r12, 0x021E	; 0x80021e <tare_weight>
     db4:	d0 90 1f 02 	lds	r13, 0x021F	; 0x80021f <tare_weight+0x1>
     db8:	e0 90 20 02 	lds	r14, 0x0220	; 0x800220 <tare_weight+0x2>
     dbc:	f0 90 21 02 	lds	r15, 0x0221	; 0x800221 <tare_weight+0x3>
     dc0:	bc 01       	movw	r22, r24
     dc2:	cd 01       	movw	r24, r26
     dc4:	6c 19       	sub	r22, r12
     dc6:	7d 09       	sbc	r23, r13
     dc8:	8e 09       	sbc	r24, r14
     dca:	9f 09       	sbc	r25, r15
     dcc:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatunsisf>
     dd0:	6b 01       	movw	r12, r22
     dd2:	7c 01       	movw	r14, r24
     dd4:	60 91 1a 02 	lds	r22, 0x021A	; 0x80021a <standard_weight>
     dd8:	70 91 1b 02 	lds	r23, 0x021B	; 0x80021b <standard_weight+0x1>
     ddc:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <standard_weight+0x2>
     de0:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <standard_weight+0x3>
     de4:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatunsisf>
     de8:	9b 01       	movw	r18, r22
     dea:	ac 01       	movw	r20, r24
     dec:	c7 01       	movw	r24, r14
     dee:	b6 01       	movw	r22, r12
     df0:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__divsf3>
     df4:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <scale_factor>
     df8:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <scale_factor+0x1>
     dfc:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <scale_factor+0x2>
     e00:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <scale_factor+0x3>
     e04:	c8 01       	movw	r24, r16
						UART_SendStringNewLine(temp_str);
     e06:	d4 db       	rcall	.-2136   	; 0x5b0 <UART_SendStringNewLine>
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
						break;
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	8c e1       	ldi	r24, 0x1C	; 28
					}
				}
				UART_SendStringNewLine("CALIBRATION PROCESS FINISHED!!!");
     e14:	96 e0       	ldi	r25, 0x06	; 6
     e16:	cc db       	rcall	.-2152   	; 0x5b0 <UART_SendStringNewLine>
     e18:	d0 ce       	rjmp	.-608    	; 0xbba <main+0xd4>
     e1a:	8c e3       	ldi	r24, 0x3C	; 60
				break;
     e1c:	96 e0       	ldi	r25, 0x06	; 6
			case '3':
				UART_SendStringNewLine("Reading weight in g:");
     e1e:	c8 db       	rcall	.-2160   	; 0x5b0 <UART_SendStringNewLine>
     e20:	ca dd       	rcall	.-1132   	; 0x9b6 <Hx711_read>
     e22:	c0 90 1e 02 	lds	r12, 0x021E	; 0x80021e <tare_weight>
				tmp_value = Hx711_read();
     e26:	d0 90 1f 02 	lds	r13, 0x021F	; 0x80021f <tare_weight+0x1>
				float weight_grams = get_weight_in_grams(tmp_value, tare_weight, scale_factor);
				print_weight(weight_grams);
     e2a:	e0 90 20 02 	lds	r14, 0x0220	; 0x800220 <tare_weight+0x2>
     e2e:	f0 90 21 02 	lds	r15, 0x0221	; 0x800221 <tare_weight+0x3>
     e32:	6c 19       	sub	r22, r12
     e34:	7d 09       	sbc	r23, r13
     e36:	8e 09       	sbc	r24, r14
     e38:	9f 09       	sbc	r25, r15
     e3a:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <__floatsisf>
     e3e:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <scale_factor>
     e42:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <scale_factor+0x1>
     e46:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <scale_factor+0x2>
     e4a:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <scale_factor+0x3>
     e4e:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__divsf3>
     e52:	ca dd       	rcall	.-1132   	; 0x9e8 <print_weight>
     e54:	b2 ce       	rjmp	.-668    	; 0xbba <main+0xd4>
     e56:	0f 2e       	mov	r0, r31
     e58:	fb e0       	ldi	r31, 0x0B	; 11
     e5a:	cf 2e       	mov	r12, r31
				break;
     e5c:	f7 e0       	ldi	r31, 0x07	; 7
	
}
static void appAddrRequest(uint16_t node_id)
{
	static AppAddress_t msg;
	msg.node_ID=node_id;
     e5e:	df 2e       	mov	r13, r31
     e60:	f0 2d       	mov	r31, r0
     e62:	0f 2e       	mov	r0, r31
     e64:	f0 e1       	ldi	r31, 0x10	; 16
     e66:	af 2e       	mov	r10, r31
     e68:	f0 e7       	ldi	r31, 0x70	; 112
	msg.msg_ID=ADDR_REQUEST_MSG;
	msg.node_address=APP_ADDR;
     e6a:	bf 2e       	mov	r11, r31
     e6c:	f0 2d       	mov	r31, r0
     e6e:	0f 2e       	mov	r0, r31
     e70:	f6 e8       	ldi	r31, 0x86	; 134
     e72:	ef 2e       	mov	r14, r31
     e74:	f7 e0       	ldi	r31, 0x07	; 7
	
	
	appNwkDataReq.dstAddr = 0x0000;
     e76:	ff 2e       	mov	r15, r31
     e78:	f0 2d       	mov	r31, r0
     e7a:	0f 2e       	mov	r0, r31
     e7c:	f5 ef       	ldi	r31, 0xF5	; 245
     e7e:	8f 2e       	mov	r8, r31
     e80:	f2 e0       	ldi	r31, 0x02	; 2
	appNwkDataReq.dstEndpoint = 2;
	appNwkDataReq.srcEndpoint = 2;
	appNwkDataReq.options = NWK_OPT_ACK_REQUEST | NWK_OPT_ENABLE_SECURITY;
	appNwkDataReq.data = (uint8_t *)&msg;
	appNwkDataReq.size = sizeof(msg);
	appNwkDataReq.confirm = appADDR_REQ_Conf;
     e82:	9f 2e       	mov	r9, r31
     e84:	f0 2d       	mov	r31, r0
     e86:	0f 2e       	mov	r0, r31
     e88:	f2 e6       	ldi	r31, 0x62	; 98
     e8a:	2f 2e       	mov	r2, r31
     e8c:	f6 e0       	ldi	r31, 0x06	; 6
	
	case APP_STATE_ADDR_REQUEST:
	{
	   myNodeID = rand() & 0xffff;
	   appAddrRequest(myNodeID);
	   printf("ADDR_req, nodeID=%x \n\r",myNodeID);
     e8e:	3f 2e       	mov	r3, r31
     e90:	f0 2d       	mov	r31, r0
     e92:	08 e2       	ldi	r16, 0x28	; 40
     e94:	17 e0       	ldi	r17, 0x07	; 7
     e96:	0e 94 3f 14 	call	0x287e	; 0x287e <SYS_TaskHandler>
// PREPARING THE DATAFRAME TO SEND
//
static void appSendData(void)
{
#ifdef NWK_ENABLE_ROUTING
  appMsg.parentShortAddr = NWK_RouteNextHop(0, 0);
     e9a:	5e d3       	rcall	.+1724   	; 0x1558 <HAL_UartTaskHandler>
     e9c:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <appState>
				print_weight(weight_grams);
				break;
			case '4':
				while (1)
				{
					SYS_TaskHandler();
     ea0:	90 e0       	ldi	r25, 0x00	; 0
					HAL_UartTaskHandler();
     ea2:	8b 30       	cpi	r24, 0x0B	; 11
     ea4:	91 05       	cpc	r25, r1

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
  switch (appState)
     ea6:	b8 f7       	brcc	.-18     	; 0xe96 <main+0x3b0>
     ea8:	fc 01       	movw	r30, r24
     eaa:	88 27       	eor	r24, r24
     eac:	e6 56       	subi	r30, 0x66	; 102
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	8f 4f       	sbci	r24, 0xFF	; 255
     eb2:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__tablejump2__>
     eb6:	77 24       	eor	r7, r7
     eb8:	73 94       	inc	r7
     eba:	d8 01       	movw	r26, r16
     ebc:	7c 92       	st	X, r7
     ebe:	11 96       	adiw	r26, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
  appMsg.commandId            = APP_COMMAND_ID_NETWORK_INFO;
     ec0:	7c 92       	st	X, r7
     ec2:	11 97       	sbiw	r26, 0x01	; 1
     ec4:	80 e1       	ldi	r24, 0x10	; 16
     ec6:	12 96       	adiw	r26, 0x02	; 2
  appMsg.nodeType             = APP_NODE_TYPE;
     ec8:	8c 93       	st	X, r24
     eca:	12 97       	sbiw	r26, 0x02	; 2
     ecc:	90 e7       	ldi	r25, 0x70	; 112
  appMsg.extAddr              = APP_ADDR;
     ece:	13 96       	adiw	r26, 0x03	; 3
     ed0:	9c 93       	st	X, r25
     ed2:	13 97       	sbiw	r26, 0x03	; 3
     ed4:	14 96       	adiw	r26, 0x04	; 4
     ed6:	1c 92       	st	X, r1
     ed8:	14 97       	sbiw	r26, 0x04	; 4
     eda:	15 96       	adiw	r26, 0x05	; 5
     edc:	1c 92       	st	X, r1
     ede:	15 97       	sbiw	r26, 0x05	; 5
     ee0:	16 96       	adiw	r26, 0x06	; 6
     ee2:	1c 92       	st	X, r1
     ee4:	16 97       	sbiw	r26, 0x06	; 6
     ee6:	17 96       	adiw	r26, 0x07	; 7
     ee8:	1c 92       	st	X, r1
     eea:	17 97       	sbiw	r26, 0x07	; 7
     eec:	18 96       	adiw	r26, 0x08	; 8
     eee:	1c 92       	st	X, r1
     ef0:	18 97       	sbiw	r26, 0x08	; 8
     ef2:	19 96       	adiw	r26, 0x09	; 9
     ef4:	1c 92       	st	X, r1
     ef6:	19 97       	sbiw	r26, 0x09	; 9
     ef8:	1b 96       	adiw	r26, 0x0b	; 11
     efa:	bc 92       	st	X, r11
     efc:	ae 92       	st	-X, r10
     efe:	1a 97       	sbiw	r26, 0x0a	; 10
     f00:	20 e0       	ldi	r18, 0x00	; 0
  appMsg.shortAddr            = APP_ADDR;
     f02:	31 e0       	ldi	r19, 0x01	; 1
     f04:	41 e0       	ldi	r20, 0x01	; 1
     f06:	51 e0       	ldi	r21, 0x01	; 1
     f08:	1c 96       	adiw	r26, 0x0c	; 12
  appMsg.softVersion          = 0x01010100;
     f0a:	2d 93       	st	X+, r18
     f0c:	3d 93       	st	X+, r19
     f0e:	4d 93       	st	X+, r20
     f10:	5c 93       	st	X, r21
     f12:	1f 97       	sbiw	r26, 0x0f	; 15
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e8       	ldi	r19, 0x80	; 128
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	50 96       	adiw	r26, 0x10	; 16
  appMsg.channelMask          = (1L << APP_CHANNEL);
     f1e:	2d 93       	st	X+, r18
     f20:	3d 93       	st	X+, r19
     f22:	4d 93       	st	X+, r20
     f24:	5c 93       	st	X, r21
     f26:	53 97       	sbiw	r26, 0x13	; 19
     f28:	20 e8       	ldi	r18, 0x80	; 128
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	56 96       	adiw	r26, 0x16	; 22
     f2e:	3c 93       	st	X, r19
     f30:	2e 93       	st	-X, r18
  appMsg.panId                = APP_PANID;
     f32:	55 97       	sbiw	r26, 0x15	; 21
     f34:	9f e0       	ldi	r25, 0x0F	; 15
     f36:	54 96       	adiw	r26, 0x14	; 20
     f38:	9c 93       	st	X, r25
     f3a:	54 97       	sbiw	r26, 0x14	; 20
     f3c:	58 96       	adiw	r26, 0x18	; 24
  appMsg.workingChannel       = APP_CHANNEL;
     f3e:	1c 92       	st	X, r1
     f40:	1e 92       	st	-X, r1
     f42:	57 97       	sbiw	r26, 0x17	; 23
     f44:	59 96       	adiw	r26, 0x19	; 25
  appMsg.parentShortAddr      = 0;
     f46:	1c 92       	st	X, r1
     f48:	59 97       	sbiw	r26, 0x19	; 25
     f4a:	5a 96       	adiw	r26, 0x1a	; 26
     f4c:	1c 92       	st	X, r1
  appMsg.lqi                  = 0;
     f4e:	5a 97       	sbiw	r26, 0x1a	; 26
     f50:	5b 96       	adiw	r26, 0x1b	; 27
  appMsg.rssi                 = 0;
     f52:	7c 92       	st	X, r7
     f54:	5b 97       	sbiw	r26, 0x1b	; 27

  appMsg.sensors.type        = 1;
     f56:	9c e0       	ldi	r25, 0x0C	; 12
     f58:	5c 96       	adiw	r26, 0x1c	; 28
     f5a:	9c 93       	st	X, r25
  appMsg.sensors.size        = sizeof(int32_t) * 3;
     f5c:	5c 97       	sbiw	r26, 0x1c	; 28
     f5e:	f8 01       	movw	r30, r16
     f60:	15 8e       	std	Z+29, r1	; 0x1d
     f62:	16 8e       	std	Z+30, r1	; 0x1e
  appMsg.sensors.battery     = 0;
     f64:	17 8e       	std	Z+31, r1	; 0x1f
     f66:	10 a2       	std	Z+32, r1	; 0x20
     f68:	91 96       	adiw	r26, 0x21	; 33
     f6a:	1d 92       	st	X+, r1
  appMsg.sensors.temperature = 0;
     f6c:	1d 92       	st	X+, r1
     f6e:	1d 92       	st	X+, r1
     f70:	1c 92       	st	X, r1
     f72:	94 97       	sbiw	r26, 0x24	; 36
     f74:	15 a2       	std	Z+37, r1	; 0x25
     f76:	16 a2       	std	Z+38, r1	; 0x26
  appMsg.sensors.light       = 0;
     f78:	17 a2       	std	Z+39, r1	; 0x27
     f7a:	10 a6       	std	Z+40, r1	; 0x28
     f7c:	90 e2       	ldi	r25, 0x20	; 32
     f7e:	91 ab       	std	Z+49, r25	; 0x31

  appMsg.caption.type         = 32;
     f80:	82 ab       	std	Z+50, r24	; 0x32
     f82:	e1 e5       	ldi	r30, 0x51	; 81
  appMsg.caption.size         = APP_CAPTION_SIZE;
     f84:	f6 e0       	ldi	r31, 0x06	; 6
  memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
     f86:	ab e5       	ldi	r26, 0x5B	; 91
     f88:	b7 e0       	ldi	r27, 0x07	; 7
     f8a:	01 90       	ld	r0, Z+
     f8c:	0d 92       	st	X+, r0
     f8e:	8a 95       	dec	r24
     f90:	e1 f7       	brne	.-8      	; 0xf8a <main+0x4a4>
     f92:	c5 01       	movw	r24, r10
     f94:	3b d3       	rcall	.+1654   	; 0x160c <NWK_SetAddr>

  HAL_BoardInit();
  HAL_LedInit();

  NWK_SetAddr(APP_ADDR);
     f96:	80 e8       	ldi	r24, 0x80	; 128
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	3f d3       	rcall	.+1662   	; 0x161a <NWK_SetPanId>
  NWK_SetPanId(APP_PANID);
     f9c:	8f e0       	ldi	r24, 0x0F	; 15
     f9e:	0e 94 52 13 	call	0x26a4	; 0x26a4 <PHY_SetChannel>
     fa2:	81 e0       	ldi	r24, 0x01	; 1
  PHY_SetChannel(APP_CHANNEL);
     fa4:	0e 94 4e 13 	call	0x269c	; 0x269c <PHY_SetRxState>
     fa8:	6b e7       	ldi	r22, 0x7B	; 123
#ifdef PHY_AT86RF212
  PHY_SetBand(APP_BAND);
  PHY_SetModulation(APP_MODULATION);
#endif
  PHY_SetRxState(true);
     faa:	73 e0       	ldi	r23, 0x03	; 3
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	3c d3       	rcall	.+1656   	; 0x1628 <NWK_OpenEndpoint>

#ifdef NWK_ENABLE_SECURITY
  NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
#endif

  NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
     fb0:	6a e0       	ldi	r22, 0x0A	; 10
     fb2:	73 e0       	ldi	r23, 0x03	; 3
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	38 d3       	rcall	.+1648   	; 0x1628 <NWK_OpenEndpoint>
     fb8:	eb e1       	ldi	r30, 0x1B	; 27
  NWK_OpenEndpoint(2, appAddrInd);
     fba:	f7 e0       	ldi	r31, 0x07	; 7
     fbc:	80 e1       	ldi	r24, 0x10	; 16
     fbe:	97 e2       	ldi	r25, 0x27	; 39
     fc0:	a0 e0       	ldi	r26, 0x00	; 0
     fc2:	b0 e0       	ldi	r27, 0x00	; 0

  appDataSendingTimer.interval = APP_SENDING_INTERVAL;
     fc4:	86 83       	std	Z+6, r24	; 0x06
     fc6:	97 83       	std	Z+7, r25	; 0x07
     fc8:	a0 87       	std	Z+8, r26	; 0x08
     fca:	b1 87       	std	Z+9, r27	; 0x09
     fcc:	12 86       	std	Z+10, r1	; 0x0a
     fce:	8d ef       	ldi	r24, 0xFD	; 253
     fd0:	92 e0       	ldi	r25, 0x02	; 2
     fd2:	94 87       	std	Z+12, r25	; 0x0c
     fd4:	83 87       	std	Z+11, r24	; 0x0b
  appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
     fd6:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <appNetworkStatus>
  appDataSendingTimer.handler = appDataSendingTimerHandler;
     fda:	e9 e7       	ldi	r30, 0x79	; 121
     fdc:	f7 e0       	ldi	r31, 0x07	; 7

#if defined(APP_ROUTER) || defined(APP_ENDDEVICE)
  appNetworkStatus = false;
     fde:	24 ef       	ldi	r18, 0xF4	; 244
     fe0:	31 e0       	ldi	r19, 0x01	; 1
  appNetworkStatusTimer.interval = 500;
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	26 83       	std	Z+6, r18	; 0x06
     fe8:	37 83       	std	Z+7, r19	; 0x07
     fea:	40 87       	std	Z+8, r20	; 0x08
     fec:	51 87       	std	Z+9, r21	; 0x09
     fee:	72 86       	std	Z+10, r7	; 0x0a
     ff0:	80 ef       	ldi	r24, 0xF0	; 240
     ff2:	92 e0       	ldi	r25, 0x02	; 2
  appNetworkStatusTimer.mode = SYS_TIMER_PERIODIC_MODE;
     ff4:	94 87       	std	Z+12, r25	; 0x0c
  appNetworkStatusTimer.handler = appNetworkStatusTimerHandler;
     ff6:	83 87       	std	Z+11, r24	; 0x0b
     ff8:	cf 01       	movw	r24, r30
     ffa:	0e 94 04 15 	call	0x2a08	; 0x2a08 <SYS_TimerStart>
  SYS_TimerStart(&appNetworkStatusTimer);
     ffe:	ec e6       	ldi	r30, 0x6C	; 108
    1000:	f7 e0       	ldi	r31, 0x07	; 7
    1002:	88 ee       	ldi	r24, 0xE8	; 232

  appCommandWaitTimer.interval = NWK_ACK_WAIT_TIME;
    1004:	93 e0       	ldi	r25, 0x03	; 3
    1006:	a0 e0       	ldi	r26, 0x00	; 0
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	86 83       	std	Z+6, r24	; 0x06
    100c:	97 83       	std	Z+7, r25	; 0x07
    100e:	a0 87       	std	Z+8, r26	; 0x08
    1010:	b1 87       	std	Z+9, r27	; 0x09
    1012:	12 86       	std	Z+10, r1	; 0x0a
    1014:	81 ef       	ldi	r24, 0xF1	; 241
    1016:	92 e0       	ldi	r25, 0x02	; 2
  appCommandWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1018:	94 87       	std	Z+12, r25	; 0x0c
  appCommandWaitTimer.handler = appCommandWaitTimerHandler;
    101a:	83 87       	std	Z+11, r24	; 0x0b
    101c:	4e d9       	rcall	.-3428   	; 0x2ba <APP_CommandsInit>
    101e:	70 92 97 07 	sts	0x0797, r7	; 0x800797 <appState>

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  srand(PHY_RandomReq());
#endif

  APP_CommandsInit();
    1022:	39 cf       	rjmp	.-398    	; 0xe96 <main+0x3b0>
    1024:	60 e0       	ldi	r22, 0x00	; 0

#if defined(APP_ROUTER) || defined(APP_ENDDEVICE)
	appState = APP_STATE_ADDR_REQUEST;
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	1c d5       	rcall	.+2616   	; 0x1a64 <NWK_RouteNextHop>
// PREPARING THE DATAFRAME TO SEND
//
static void appSendData(void)
{
#ifdef NWK_ENABLE_ROUTING
  appMsg.parentShortAddr = NWK_RouteNextHop(0, 0);
    102c:	d8 01       	movw	r26, r16
    102e:	58 96       	adiw	r26, 0x18	; 24
    1030:	9c 93       	st	X, r25
    1032:	8e 93       	st	-X, r24
    1034:	57 97       	sbiw	r26, 0x17	; 23
    1036:	bf dc       	rcall	.-1666   	; 0x9b6 <Hx711_read>
    1038:	40 90 1e 02 	lds	r4, 0x021E	; 0x80021e <tare_weight>
    103c:	50 90 1f 02 	lds	r5, 0x021F	; 0x80021f <tare_weight+0x1>
#else
  appMsg.parentShortAddr = 0;
#endif
  tmp_value = Hx711_read();
    1040:	60 90 20 02 	lds	r6, 0x0220	; 0x800220 <tare_weight+0x2>
}


float get_weight_in_grams(unsigned long raw_reading, unsigned long tare_weight, float scale_factor) {
	long tared_reading = (long)raw_reading - (long)tare_weight;  // now can be negative
	float scaled_reading = tared_reading / scale_factor;
    1044:	70 90 21 02 	lds	r7, 0x0221	; 0x800221 <tare_weight+0x3>
    1048:	64 19       	sub	r22, r4
    104a:	75 09       	sbc	r23, r5
    104c:	86 09       	sbc	r24, r6
    104e:	97 09       	sbc	r25, r7
    1050:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <__floatsisf>
    1054:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <scale_factor>
    1058:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <scale_factor+0x1>
    105c:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <scale_factor+0x2>
    1060:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <scale_factor+0x3>
    1064:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__divsf3>
    1068:	2b 01       	movw	r4, r22
    106a:	3c 01       	movw	r6, r24
    106c:	0e 94 f6 17 	call	0x2fec	; 0x2fec <rand>
    1070:	a0 e0       	ldi	r26, 0x00	; 0
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	f8 01       	movw	r30, r16
    1076:	85 8f       	std	Z+29, r24	; 0x1d
#else
  appMsg.parentShortAddr = 0;
#endif
  tmp_value = Hx711_read();
  float weight_grams = get_weight_in_grams(tmp_value, tare_weight, scale_factor);
  appMsg.sensors.battery     = rand() & 0xffff;
    1078:	96 8f       	std	Z+30, r25	; 0x1e
    107a:	a7 8f       	std	Z+31, r26	; 0x1f
    107c:	b0 a3       	std	Z+32, r27	; 0x20
    107e:	23 e6       	ldi	r18, 0x63	; 99
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	40 e0       	ldi	r20, 0x00	; 0
    1084:	50 e0       	ldi	r21, 0x00	; 0
    1086:	21 a3       	std	Z+33, r18	; 0x21
    1088:	32 a3       	std	Z+34, r19	; 0x22
  appMsg.sensors.temperature = 99;
    108a:	43 a3       	std	Z+35, r20	; 0x23
    108c:	54 a3       	std	Z+36, r21	; 0x24
    108e:	25 e4       	ldi	r18, 0x45	; 69
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	40 e0       	ldi	r20, 0x00	; 0
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	21 a7       	std	Z+41, r18	; 0x29
    1098:	32 a7       	std	Z+42, r19	; 0x2a
  appMsg.sensors.moist       = 69;//ADC_get(3);
    109a:	43 a7       	std	Z+43, r20	; 0x2b
    109c:	54 a7       	std	Z+44, r21	; 0x2c
    109e:	c3 01       	movw	r24, r6
    10a0:	b2 01       	movw	r22, r4
    10a2:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixsfsi>
    10a6:	cb 01       	movw	r24, r22
    10a8:	77 0f       	add	r23, r23
  appMsg.sensors.weight       = (int)weight_grams;//ADC_get(3);
    10aa:	aa 0b       	sbc	r26, r26
    10ac:	bb 0b       	sbc	r27, r27
    10ae:	f8 01       	movw	r30, r16
    10b0:	85 a7       	std	Z+45, r24	; 0x2d
    10b2:	96 a7       	std	Z+46, r25	; 0x2e
    10b4:	a7 a7       	std	Z+47, r26	; 0x2f
    10b6:	b0 ab       	std	Z+48, r27	; 0x30
    10b8:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <messno>
    10bc:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <messno+0x1>
    10c0:	a0 91 17 07 	lds	r26, 0x0717	; 0x800717 <messno+0x2>
  appMsg.sensors.light       = messno++;//ADC_get(3);
    10c4:	b0 91 18 07 	lds	r27, 0x0718	; 0x800718 <messno+0x3>
    10c8:	ac 01       	movw	r20, r24
    10ca:	bd 01       	movw	r22, r26
    10cc:	4f 5f       	subi	r20, 0xFF	; 255
    10ce:	5f 4f       	sbci	r21, 0xFF	; 255
    10d0:	6f 4f       	sbci	r22, 0xFF	; 255
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	40 93 15 07 	sts	0x0715, r20	; 0x800715 <messno>
    10d8:	50 93 16 07 	sts	0x0716, r21	; 0x800716 <messno+0x1>
    10dc:	60 93 17 07 	sts	0x0717, r22	; 0x800717 <messno+0x2>
    10e0:	70 93 18 07 	sts	0x0718, r23	; 0x800718 <messno+0x3>
    10e4:	85 a3       	std	Z+37, r24	; 0x25
    10e6:	96 a3       	std	Z+38, r25	; 0x26
    10e8:	a7 a3       	std	Z+39, r26	; 0x27
    10ea:	b0 a7       	std	Z+40, r27	; 0x28
    10ec:	d7 01       	movw	r26, r14
    10ee:	16 96       	adiw	r26, 0x06	; 6
    10f0:	1c 92       	st	X, r1
    10f2:	1e 92       	st	-X, r1
    10f4:	15 97       	sbiw	r26, 0x05	; 5
#if defined(APP_COORDINATOR)
  appUartSendMessageHR((uint8_t *)&appMsg, sizeof(appMsg));
  SYS_TimerStart(&appDataSendingTimer);
  appState = APP_STATE_WAIT_SEND_TIMER;
#else
  appNwkDataReq.dstAddr = 0;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	17 96       	adiw	r26, 0x07	; 7
    10fa:	8c 93       	st	X, r24
    10fc:	17 97       	sbiw	r26, 0x07	; 7
    10fe:	18 96       	adiw	r26, 0x08	; 8
  appNwkDataReq.dstEndpoint = APP_ENDPOINT;
    1100:	8c 93       	st	X, r24
    1102:	18 97       	sbiw	r26, 0x08	; 8
    1104:	83 e0       	ldi	r24, 0x03	; 3
    1106:	19 96       	adiw	r26, 0x09	; 9
  appNwkDataReq.srcEndpoint = APP_ENDPOINT;
    1108:	8c 93       	st	X, r24
    110a:	19 97       	sbiw	r26, 0x09	; 9
    110c:	1b 96       	adiw	r26, 0x0b	; 11
  appNwkDataReq.options = NWK_OPT_ACK_REQUEST | NWK_OPT_ENABLE_SECURITY;
    110e:	1c 93       	st	X, r17
    1110:	0e 93       	st	-X, r16
    1112:	1a 97       	sbiw	r26, 0x0a	; 10
    1114:	83 e4       	ldi	r24, 0x43	; 67
  appNwkDataReq.data = (uint8_t *)&appMsg;
    1116:	1c 96       	adiw	r26, 0x0c	; 12
    1118:	8c 93       	st	X, r24
    111a:	1c 97       	sbiw	r26, 0x0c	; 12
    111c:	e1 e9       	ldi	r30, 0x91	; 145
  appNwkDataReq.size = sizeof(appMsg);
    111e:	f4 e0       	ldi	r31, 0x04	; 4
    1120:	1e 96       	adiw	r26, 0x0e	; 14
    1122:	fc 93       	st	X, r31
  appNwkDataReq.confirm = appDataConf;
    1124:	ee 93       	st	-X, r30
    1126:	1d 97       	sbiw	r26, 0x0d	; 13
    1128:	c7 01       	movw	r24, r14
    112a:	d2 d2       	rcall	.+1444   	; 0x16d0 <NWK_DataReq>
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <appState>

  HAL_LedOn(APP_LED_DATA);
  NWK_DataReq(&appNwkDataReq);
    1132:	b1 ce       	rjmp	.-670    	; 0xe96 <main+0x3b0>
    1134:	0e 94 f6 17 	call	0x2fec	; 0x2fec <rand>

  appState = APP_STATE_WAIT_CONF;
    1138:	90 93 1a 07 	sts	0x071A, r25	; 0x80071a <myNodeID+0x1>
    113c:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <myNodeID>
      appSendData();
    } break;
	
	case APP_STATE_ADDR_REQUEST:
	{
	   myNodeID = rand() & 0xffff;
    1140:	d6 01       	movw	r26, r12
    1142:	14 96       	adiw	r26, 0x04	; 4
    1144:	9c 93       	st	X, r25
    1146:	8e 93       	st	-X, r24
    1148:	13 97       	sbiw	r26, 0x03	; 3
	
}
static void appAddrRequest(uint16_t node_id)
{
	static AppAddress_t msg;
	msg.node_ID=node_id;
    114a:	80 e1       	ldi	r24, 0x10	; 16
    114c:	8c 93       	st	X, r24
    114e:	12 96       	adiw	r26, 0x02	; 2
    1150:	bc 92       	st	X, r11
    1152:	ae 92       	st	-X, r10
	msg.msg_ID=ADDR_REQUEST_MSG;
    1154:	11 97       	sbiw	r26, 0x01	; 1
	msg.node_address=APP_ADDR;
    1156:	f7 01       	movw	r30, r14
    1158:	16 82       	std	Z+6, r1	; 0x06
    115a:	15 82       	std	Z+5, r1	; 0x05
	
	
	appNwkDataReq.dstAddr = 0x0000;
    115c:	68 94       	set
    115e:	77 24       	eor	r7, r7
    1160:	71 f8       	bld	r7, 1
	appNwkDataReq.dstEndpoint = 2;
    1162:	77 82       	std	Z+7, r7	; 0x07
    1164:	70 86       	std	Z+8, r7	; 0x08
    1166:	83 e0       	ldi	r24, 0x03	; 3
    1168:	81 87       	std	Z+9, r24	; 0x09
	appNwkDataReq.srcEndpoint = 2;
	appNwkDataReq.options = NWK_OPT_ACK_REQUEST | NWK_OPT_ENABLE_SECURITY;
    116a:	d3 86       	std	Z+11, r13	; 0x0b
    116c:	c2 86       	std	Z+10, r12	; 0x0a
	appNwkDataReq.data = (uint8_t *)&msg;
    116e:	85 e0       	ldi	r24, 0x05	; 5
    1170:	84 87       	std	Z+12, r24	; 0x0c
	appNwkDataReq.size = sizeof(msg);
    1172:	96 86       	std	Z+14, r9	; 0x0e
	appNwkDataReq.confirm = appADDR_REQ_Conf;
    1174:	85 86       	std	Z+13, r8	; 0x0d
    1176:	c7 01       	movw	r24, r14

	HAL_LedOn(APP_LED_DATA);
	NWK_DataReq(&appNwkDataReq);
    1178:	ab d2       	rcall	.+1366   	; 0x16d0 <NWK_DataReq>
    117a:	70 92 97 07 	sts	0x0797, r7	; 0x800797 <appState>

	appState = APP_STATE_ADDR_WAIT;
    117e:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <myNodeID+0x1>
	
	case APP_STATE_ADDR_REQUEST:
	{
	   myNodeID = rand() & 0xffff;
	   appAddrRequest(myNodeID);
	   printf("ADDR_req, nodeID=%x \n\r",myNodeID);
    1182:	8f 93       	push	r24
    1184:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <myNodeID>
    1188:	8f 93       	push	r24
    118a:	3f 92       	push	r3
    118c:	2f 92       	push	r2
    118e:	0e 94 0d 18 	call	0x301a	; 0x301a <printf>
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	7d ce       	rjmp	.-774    	; 0xe96 <main+0x3b0>
    119c:	8b e1       	ldi	r24, 0x1B	; 27
    case APP_STATE_SENDING_DONE:
    {
#if defined(APP_ENDDEVICE)
      appState = APP_STATE_PREPARE_TO_SLEEP;
#else
      SYS_TimerStart(&appDataSendingTimer);
    119e:	97 e0       	ldi	r25, 0x07	; 7
    11a0:	0e 94 04 15 	call	0x2a08	; 0x2a08 <SYS_TimerStart>
    11a4:	86 e0       	ldi	r24, 0x06	; 6
      appState = APP_STATE_WAIT_SEND_TIMER;
    11a6:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <appState>
    11aa:	75 ce       	rjmp	.-790    	; 0xe96 <main+0x3b0>
    11ac:	46 d2       	rcall	.+1164   	; 0x163a <NWK_Busy>
#endif
    } break;

    case APP_STATE_PREPARE_TO_SLEEP:
    {
      if (!NWK_Busy())
    11ae:	81 11       	cpse	r24, r1
    11b0:	72 ce       	rjmp	.-796    	; 0xe96 <main+0x3b0>
    11b2:	5c d2       	rcall	.+1208   	; 0x166c <NWK_SleepReq>
    11b4:	89 e0       	ldi	r24, 0x09	; 9
      {
        NWK_SleepReq();
    11b6:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <appState>
        appState = APP_STATE_SLEEP;
    11ba:	6d ce       	rjmp	.-806    	; 0xe96 <main+0x3b0>
    11bc:	60 e1       	ldi	r22, 0x10	; 16
    11be:	77 e2       	ldi	r23, 0x27	; 39
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    } break;

    case APP_STATE_SLEEP:
    {
      HAL_LedClose();
      HAL_Sleep(APP_SENDING_INTERVAL);
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	47 d0       	rcall	.+142    	; 0x1254 <HAL_Sleep>
    11c6:	8a e0       	ldi	r24, 0x0A	; 10
    11c8:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <appState>
    11cc:	64 ce       	rjmp	.-824    	; 0xe96 <main+0x3b0>
      appState = APP_STATE_WAKEUP;
    11ce:	51 d2       	rcall	.+1186   	; 0x1672 <NWK_WakeupReq>
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <appState>
    } break;

    case APP_STATE_WAKEUP:
    {
      NWK_WakeupReq();
    11d6:	5f ce       	rjmp	.-834    	; 0xe96 <main+0x3b0>
    11d8:	89 e7       	ldi	r24, 0x79	; 121

      HAL_LedInit();
      HAL_LedOn(APP_LED_NETWORK);

      appState = APP_STATE_SEND;
    11da:	96 e0       	ldi	r25, 0x06	; 6
    11dc:	e9 d9       	rcall	.-3118   	; 0x5b0 <UART_SendStringNewLine>
    11de:	ed cc       	rjmp	.-1574   	; 0xbba <main+0xd4>

000011e0 <HAL_Init>:
    11e0:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	a8 95       	wdr
    11e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    11ec:	88 61       	ori	r24, 0x18	; 24
    11ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    11f2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	e1 e6       	ldi	r30, 0x61	; 97
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 e8       	ldi	r24, 0x80	; 128
    11fe:	80 83       	st	Z, r24
    1200:	10 82       	st	Z, r1
    1202:	78 94       	sei
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <HAL_TimerInit>
    1206:	08 95       	ret

00001208 <HAL_TimerInit>:
    1208:	10 92 43 13 	sts	0x1343, r1	; 0x801343 <halTimerIrqCount>
    120c:	80 e1       	ldi	r24, 0x10	; 16
    120e:	97 e2       	ldi	r25, 0x27	; 39
    1210:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    1214:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
    1218:	e1 ea       	ldi	r30, 0xA1	; 161
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	88 e0       	ldi	r24, 0x08	; 8
    121e:	80 83       	st	Z, r24
    1220:	80 81       	ld	r24, Z
    1222:	82 60       	ori	r24, 0x02	; 2
    1224:	80 83       	st	Z, r24
    1226:	e2 e7       	ldi	r30, 0x72	; 114
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	82 60       	ori	r24, 0x02	; 2
    122e:	80 83       	st	Z, r24
    1230:	08 95       	ret

00001232 <__vector_42>:
    1232:	1f 92       	push	r1
    1234:	0f 92       	push	r0
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	0f 92       	push	r0
    123a:	11 24       	eor	r1, r1
    123c:	8f 93       	push	r24
    123e:	80 91 43 13 	lds	r24, 0x1343	; 0x801343 <halTimerIrqCount>
    1242:	8f 5f       	subi	r24, 0xFF	; 255
    1244:	80 93 43 13 	sts	0x1343, r24	; 0x801343 <halTimerIrqCount>
    1248:	8f 91       	pop	r24
    124a:	0f 90       	pop	r0
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	0f 90       	pop	r0
    1250:	1f 90       	pop	r1
    1252:	18 95       	reti

00001254 <HAL_Sleep>:
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	aa 1f       	adc	r26, r26
    1262:	bb 1f       	adc	r27, r27
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	aa 1f       	adc	r26, r26
    126a:	bb 1f       	adc	r27, r27
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	aa 1f       	adc	r26, r26
    1272:	bb 1f       	adc	r27, r27
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	aa 1f       	adc	r26, r26
    127a:	bb 1f       	adc	r27, r27
    127c:	bc 01       	movw	r22, r24
    127e:	cd 01       	movw	r24, r26
    1280:	66 0f       	add	r22, r22
    1282:	77 1f       	adc	r23, r23
    1284:	88 1f       	adc	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	28 ee       	ldi	r18, 0xE8	; 232
    128a:	33 e0       	ldi	r19, 0x03	; 3
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <__udivmodsi4>
    1294:	da 01       	movw	r26, r20
    1296:	c9 01       	movw	r24, r18
    1298:	21 15       	cp	r18, r1
    129a:	31 05       	cpc	r19, r1
    129c:	41 05       	cpc	r20, r1
    129e:	51 05       	cpc	r21, r1
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <HAL_Sleep+0x50>
    12a2:	5b c0       	rjmp	.+182    	; 0x135a <HAL_Sleep+0x106>
    12a4:	77 27       	eor	r23, r23
    12a6:	65 2f       	mov	r22, r21
    12a8:	54 2f       	mov	r21, r20
    12aa:	43 2f       	mov	r20, r19
    12ac:	28 2f       	mov	r18, r24
    12ae:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
    12b2:	e6 eb       	ldi	r30, 0xB6	; 182
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	80 62       	ori	r24, 0x20	; 32
    12ba:	80 83       	st	Z, r24
    12bc:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    12c0:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    12c4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
    12c8:	80 81       	ld	r24, Z
    12ca:	8f 71       	andi	r24, 0x1F	; 31
    12cc:	e9 f7       	brne	.-6      	; 0x12c8 <HAL_Sleep+0x74>
    12ce:	87 e0       	ldi	r24, 0x07	; 7
    12d0:	87 bb       	out	0x17, r24	; 23
    12d2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    12d6:	c3 eb       	ldi	r28, 0xB3	; 179
    12d8:	d0 e0       	ldi	r29, 0x00	; 0
    12da:	6f ef       	ldi	r22, 0xFF	; 255
    12dc:	a0 e7       	ldi	r26, 0x70	; 112
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e6 eb       	ldi	r30, 0xB6	; 182
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	37 e0       	ldi	r19, 0x07	; 7
    12e6:	01 c0       	rjmp	.+2      	; 0x12ea <HAL_Sleep+0x96>
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	10 92 d8 07 	sts	0x07D8, r1	; 0x8007d8 <halSleepTimerEvent>
    12ee:	41 15       	cp	r20, r1
    12f0:	51 05       	cpc	r21, r1
    12f2:	11 f0       	breq	.+4      	; 0x12f8 <HAL_Sleep+0xa4>
    12f4:	68 83       	st	Y, r22
    12f6:	1b c0       	rjmp	.+54     	; 0x132e <HAL_Sleep+0xda>
    12f8:	22 23       	and	r18, r18
    12fa:	11 f0       	breq	.+4      	; 0x1300 <HAL_Sleep+0xac>
    12fc:	28 83       	st	Y, r18
    12fe:	17 c0       	rjmp	.+46     	; 0x132e <HAL_Sleep+0xda>
    1300:	e6 eb       	ldi	r30, 0xB6	; 182
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	8f 71       	andi	r24, 0x1F	; 31
    1308:	e9 f7       	brne	.-6      	; 0x1304 <HAL_Sleep+0xb0>
    130a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
    130e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    1312:	83 b5       	in	r24, 0x23	; 35
    1314:	82 60       	ori	r24, 0x02	; 2
    1316:	83 bd       	out	0x23, r24	; 35
    1318:	e6 eb       	ldi	r30, 0xB6	; 182
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	8f 71       	andi	r24, 0x1F	; 31
    1320:	e9 f7       	brne	.-6      	; 0x131c <HAL_Sleep+0xc8>
    1322:	e6 eb       	ldi	r30, 0xB6	; 182
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	8f 7d       	andi	r24, 0xDF	; 223
    132a:	80 83       	st	Z, r24
    132c:	16 c0       	rjmp	.+44     	; 0x135a <HAL_Sleep+0x106>
    132e:	8c 91       	ld	r24, X
    1330:	82 60       	ori	r24, 0x02	; 2
    1332:	8c 93       	st	X, r24
    1334:	80 81       	ld	r24, Z
    1336:	8f 71       	andi	r24, 0x1F	; 31
    1338:	e9 f7       	brne	.-6      	; 0x1334 <HAL_Sleep+0xe0>
    133a:	33 bf       	out	0x33, r19	; 51
    133c:	88 95       	sleep
    133e:	13 be       	out	0x33, r1	; 51
    1340:	9f b7       	in	r25, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <halSleepTimerEvent>
    1348:	9f bf       	out	0x3f, r25	; 63
    134a:	88 23       	and	r24, r24
    134c:	71 f2       	breq	.-100    	; 0x12ea <HAL_Sleep+0x96>
    134e:	41 15       	cp	r20, r1
    1350:	51 05       	cpc	r21, r1
    1352:	51 f2       	breq	.-108    	; 0x12e8 <HAL_Sleep+0x94>
    1354:	41 50       	subi	r20, 0x01	; 1
    1356:	51 09       	sbc	r21, r1
    1358:	c8 cf       	rjmp	.-112    	; 0x12ea <HAL_Sleep+0x96>
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	08 95       	ret

00001360 <__vector_13>:
    1360:	1f 92       	push	r1
    1362:	0f 92       	push	r0
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	0f 92       	push	r0
    1368:	11 24       	eor	r1, r1
    136a:	8f 93       	push	r24
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <halSleepTimerEvent>
    1372:	8f 91       	pop	r24
    1374:	0f 90       	pop	r0
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	0f 90       	pop	r0
    137a:	1f 90       	pop	r1
    137c:	18 95       	reti

0000137e <HAL_UartInit>:

  txFifo.data[txFifo.tail++] = byte;
  if (txFifo.tail == txFifo.size)
    txFifo.tail = 0;
  txFifo.bytes++;
}
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	aa 1f       	adc	r26, r26
    1388:	bb 1f       	adc	r27, r27
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	aa 1f       	adc	r26, r26
    1390:	bb 1f       	adc	r27, r27
    1392:	9c 01       	movw	r18, r24
    1394:	ad 01       	movw	r20, r26
    1396:	22 0f       	add	r18, r18
    1398:	33 1f       	adc	r19, r19
    139a:	44 1f       	adc	r20, r20
    139c:	55 1f       	adc	r21, r21
    139e:	22 0f       	add	r18, r18
    13a0:	33 1f       	adc	r19, r19
    13a2:	44 1f       	adc	r20, r20
    13a4:	55 1f       	adc	r21, r21
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	74 e2       	ldi	r23, 0x24	; 36
    13aa:	84 ef       	ldi	r24, 0xF4	; 244
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <__udivmodsi4>
    13b2:	ba 01       	movw	r22, r20
    13b4:	a9 01       	movw	r20, r18
    13b6:	41 50       	subi	r20, 0x01	; 1
    13b8:	51 09       	sbc	r21, r1
    13ba:	61 09       	sbc	r22, r1
    13bc:	71 09       	sbc	r23, r1
    13be:	bb 27       	eor	r27, r27
    13c0:	a7 2f       	mov	r26, r23
    13c2:	96 2f       	mov	r25, r22
    13c4:	85 2f       	mov	r24, r21
    13c6:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
    13ca:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
    13ce:	a8 ec       	ldi	r26, 0xC8	; 200
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	82 e0       	ldi	r24, 0x02	; 2
    13d4:	8c 93       	st	X, r24
    13d6:	88 e9       	ldi	r24, 0x98	; 152
    13d8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
    13dc:	86 e0       	ldi	r24, 0x06	; 6
    13de:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
    13e2:	e7 e7       	ldi	r30, 0x77	; 119
    13e4:	f9 e0       	ldi	r31, 0x09	; 9
    13e6:	8e ea       	ldi	r24, 0xAE	; 174
    13e8:	98 e0       	ldi	r25, 0x08	; 8
    13ea:	91 87       	std	Z+9, r25	; 0x09
    13ec:	80 87       	std	Z+8, r24	; 0x08
    13ee:	b5 83       	std	Z+5, r27	; 0x05
    13f0:	a4 83       	std	Z+4, r26	; 0x04
    13f2:	17 82       	std	Z+7, r1	; 0x07
    13f4:	16 82       	std	Z+6, r1	; 0x06
    13f6:	11 82       	std	Z+1, r1	; 0x01
    13f8:	10 82       	st	Z, r1
    13fa:	13 82       	std	Z+3, r1	; 0x03
    13fc:	12 82       	std	Z+2, r1	; 0x02
    13fe:	e4 ea       	ldi	r30, 0xA4	; 164
    1400:	f8 e0       	ldi	r31, 0x08	; 8
    1402:	8b ed       	ldi	r24, 0xDB	; 219
    1404:	97 e0       	ldi	r25, 0x07	; 7
    1406:	91 87       	std	Z+9, r25	; 0x09
    1408:	80 87       	std	Z+8, r24	; 0x08
    140a:	b5 83       	std	Z+5, r27	; 0x05
    140c:	a4 83       	std	Z+4, r26	; 0x04
    140e:	17 82       	std	Z+7, r1	; 0x07
    1410:	16 82       	std	Z+6, r1	; 0x06
    1412:	11 82       	std	Z+1, r1	; 0x01
    1414:	10 82       	st	Z, r1
    1416:	13 82       	std	Z+3, r1	; 0x03
    1418:	12 82       	std	Z+2, r1	; 0x02
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	80 93 da 07 	sts	0x07DA, r24	; 0x8007da <udrEmpty>
    1420:	10 92 d9 07 	sts	0x07D9, r1	; 0x8007d9 <newData>
    1424:	08 95       	ret

00001426 <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
    1426:	4f b7       	in	r20, 0x3f	; 63
    1428:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
    142a:	e4 ea       	ldi	r30, 0xA4	; 164
    142c:	f8 e0       	ldi	r31, 0x08	; 8
    142e:	20 85       	ldd	r18, Z+8	; 0x08
    1430:	31 85       	ldd	r19, Z+9	; 0x09
    1432:	80 81       	ld	r24, Z
    1434:	91 81       	ldd	r25, Z+1	; 0x01
    1436:	bc 01       	movw	r22, r24
    1438:	6f 5f       	subi	r22, 0xFF	; 255
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	71 83       	std	Z+1, r23	; 0x01
    143e:	60 83       	st	Z, r22
    1440:	d9 01       	movw	r26, r18
    1442:	a8 0f       	add	r26, r24
    1444:	b9 1f       	adc	r27, r25
    1446:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
    1448:	60 81       	ld	r22, Z
    144a:	71 81       	ldd	r23, Z+1	; 0x01
    144c:	24 81       	ldd	r18, Z+4	; 0x04
    144e:	35 81       	ldd	r19, Z+5	; 0x05
    1450:	62 17       	cp	r22, r18
    1452:	73 07       	cpc	r23, r19
    1454:	21 f4       	brne	.+8      	; 0x145e <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
    1456:	10 92 a5 08 	sts	0x08A5, r1	; 0x8008a5 <rxFifo+0x1>
    145a:	10 92 a4 08 	sts	0x08A4, r1	; 0x8008a4 <rxFifo>
    rxFifo.bytes--;
    145e:	e4 ea       	ldi	r30, 0xA4	; 164
    1460:	f8 e0       	ldi	r31, 0x08	; 8
    1462:	26 81       	ldd	r18, Z+6	; 0x06
    1464:	37 81       	ldd	r19, Z+7	; 0x07
    1466:	21 50       	subi	r18, 0x01	; 1
    1468:	31 09       	sbc	r19, r1
    146a:	37 83       	std	Z+7, r19	; 0x07
    146c:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
    146e:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
    1470:	08 95       	ret

00001472 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
    1472:	1f 92       	push	r1
    1474:	0f 92       	push	r0
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	0f 92       	push	r0
    147a:	11 24       	eor	r1, r1
    147c:	0b b6       	in	r0, 0x3b	; 59
    147e:	0f 92       	push	r0
    1480:	8f 93       	push	r24
    1482:	ef 93       	push	r30
    1484:	ff 93       	push	r31
  udrEmpty = true;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	80 93 da 07 	sts	0x07DA, r24	; 0x8007da <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
    148c:	e9 ec       	ldi	r30, 0xC9	; 201
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	8f 7d       	andi	r24, 0xDF	; 223
    1494:	80 83       	st	Z, r24
}
    1496:	ff 91       	pop	r31
    1498:	ef 91       	pop	r30
    149a:	8f 91       	pop	r24
    149c:	0f 90       	pop	r0
    149e:	0b be       	out	0x3b, r0	; 59
    14a0:	0f 90       	pop	r0
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	0f 90       	pop	r0
    14a6:	1f 90       	pop	r1
    14a8:	18 95       	reti

000014aa <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
    14aa:	1f 92       	push	r1
    14ac:	0f 92       	push	r0
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	0f 92       	push	r0
    14b2:	11 24       	eor	r1, r1
    14b4:	0b b6       	in	r0, 0x3b	; 59
    14b6:	0f 92       	push	r0
    14b8:	2f 93       	push	r18
    14ba:	3f 93       	push	r19
    14bc:	4f 93       	push	r20
    14be:	5f 93       	push	r21
    14c0:	6f 93       	push	r22
    14c2:	7f 93       	push	r23
    14c4:	8f 93       	push	r24
    14c6:	9f 93       	push	r25
    14c8:	af 93       	push	r26
    14ca:	bf 93       	push	r27
    14cc:	ef 93       	push	r30
    14ce:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
    14d0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
    14d4:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
    14d8:	8c 71       	andi	r24, 0x1C	; 28
    14da:	59 f5       	brne	.+86     	; 0x1532 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
    14dc:	e4 ea       	ldi	r30, 0xA4	; 164
    14de:	f8 e0       	ldi	r31, 0x08	; 8
    14e0:	46 81       	ldd	r20, Z+6	; 0x06
    14e2:	57 81       	ldd	r21, Z+7	; 0x07
    14e4:	84 81       	ldd	r24, Z+4	; 0x04
    14e6:	95 81       	ldd	r25, Z+5	; 0x05
    14e8:	48 17       	cp	r20, r24
    14ea:	59 07       	cpc	r21, r25
    14ec:	11 f1       	breq	.+68     	; 0x1532 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
    14ee:	40 85       	ldd	r20, Z+8	; 0x08
    14f0:	51 85       	ldd	r21, Z+9	; 0x09
    14f2:	82 81       	ldd	r24, Z+2	; 0x02
    14f4:	93 81       	ldd	r25, Z+3	; 0x03
    14f6:	bc 01       	movw	r22, r24
    14f8:	6f 5f       	subi	r22, 0xFF	; 255
    14fa:	7f 4f       	sbci	r23, 0xFF	; 255
    14fc:	73 83       	std	Z+3, r23	; 0x03
    14fe:	62 83       	std	Z+2, r22	; 0x02
    1500:	da 01       	movw	r26, r20
    1502:	a8 0f       	add	r26, r24
    1504:	b9 1f       	adc	r27, r25
    1506:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
    1508:	22 81       	ldd	r18, Z+2	; 0x02
    150a:	33 81       	ldd	r19, Z+3	; 0x03
    150c:	84 81       	ldd	r24, Z+4	; 0x04
    150e:	95 81       	ldd	r25, Z+5	; 0x05
    1510:	28 17       	cp	r18, r24
    1512:	39 07       	cpc	r19, r25
    1514:	21 f4       	brne	.+8      	; 0x151e <__vector_36+0x74>
      rxFifo.tail = 0;
    1516:	10 92 a7 08 	sts	0x08A7, r1	; 0x8008a7 <rxFifo+0x3>
    151a:	10 92 a6 08 	sts	0x08A6, r1	; 0x8008a6 <rxFifo+0x2>
    rxFifo.bytes++;
    151e:	e4 ea       	ldi	r30, 0xA4	; 164
    1520:	f8 e0       	ldi	r31, 0x08	; 8
    1522:	86 81       	ldd	r24, Z+6	; 0x06
    1524:	97 81       	ldd	r25, Z+7	; 0x07
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	97 83       	std	Z+7, r25	; 0x07
    152a:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	80 93 d9 07 	sts	0x07D9, r24	; 0x8007d9 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
    1532:	ff 91       	pop	r31
    1534:	ef 91       	pop	r30
    1536:	bf 91       	pop	r27
    1538:	af 91       	pop	r26
    153a:	9f 91       	pop	r25
    153c:	8f 91       	pop	r24
    153e:	7f 91       	pop	r23
    1540:	6f 91       	pop	r22
    1542:	5f 91       	pop	r21
    1544:	4f 91       	pop	r20
    1546:	3f 91       	pop	r19
    1548:	2f 91       	pop	r18
    154a:	0f 90       	pop	r0
    154c:	0b be       	out	0x3b, r0	; 59
    154e:	0f 90       	pop	r0
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	0f 90       	pop	r0
    1554:	1f 90       	pop	r1
    1556:	18 95       	reti

00001558 <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
    1558:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <txFifo+0x6>
    155c:	90 91 7e 09 	lds	r25, 0x097E	; 0x80097e <txFifo+0x7>
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	69 f1       	breq	.+90     	; 0x15be <HAL_UartTaskHandler+0x66>
    1564:	20 91 da 07 	lds	r18, 0x07DA	; 0x8007da <udrEmpty>
    1568:	22 23       	and	r18, r18
    156a:	49 f1       	breq	.+82     	; 0x15be <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
    156c:	e7 e7       	ldi	r30, 0x77	; 119
    156e:	f9 e0       	ldi	r31, 0x09	; 9
    1570:	60 85       	ldd	r22, Z+8	; 0x08
    1572:	71 85       	ldd	r23, Z+9	; 0x09
    1574:	20 81       	ld	r18, Z
    1576:	31 81       	ldd	r19, Z+1	; 0x01
    1578:	a9 01       	movw	r20, r18
    157a:	4f 5f       	subi	r20, 0xFF	; 255
    157c:	5f 4f       	sbci	r21, 0xFF	; 255
    157e:	51 83       	std	Z+1, r21	; 0x01
    1580:	40 83       	st	Z, r20
    1582:	db 01       	movw	r26, r22
    1584:	a2 0f       	add	r26, r18
    1586:	b3 1f       	adc	r27, r19
    1588:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
    158a:	64 81       	ldd	r22, Z+4	; 0x04
    158c:	75 81       	ldd	r23, Z+5	; 0x05
    158e:	46 17       	cp	r20, r22
    1590:	57 07       	cpc	r21, r23
    1592:	21 f4       	brne	.+8      	; 0x159c <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
    1594:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <txFifo+0x1>
    1598:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <txFifo>
    txFifo.bytes--;
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	90 93 7e 09 	sts	0x097E, r25	; 0x80097e <txFifo+0x7>
    15a2:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <txFifo+0x6>

    ATOMIC_SECTION_ENTER
    15a6:	9f b7       	in	r25, 0x3f	; 63
    15a8:	f8 94       	cli
      UDRx = byte;
    15aa:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
    15ae:	e9 ec       	ldi	r30, 0xC9	; 201
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	80 62       	ori	r24, 0x20	; 32
    15b6:	80 83       	st	Z, r24
      udrEmpty = false;
    15b8:	10 92 da 07 	sts	0x07DA, r1	; 0x8007da <udrEmpty>
    ATOMIC_SECTION_LEAVE
    15bc:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
    15be:	2f b7       	in	r18, 0x3f	; 63
    15c0:	f8 94       	cli
      new = newData;
    15c2:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <newData>
      newData = false;
    15c6:	10 92 d9 07 	sts	0x07D9, r1	; 0x8007d9 <newData>
      bytes = rxFifo.bytes;
    15ca:	40 91 aa 08 	lds	r20, 0x08AA	; 0x8008aa <rxFifo+0x6>
    15ce:	50 91 ab 08 	lds	r21, 0x08AB	; 0x8008ab <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
    15d2:	2f bf       	out	0x3f, r18	; 63

    if (new)
    15d4:	99 23       	and	r25, r25
    15d6:	11 f0       	breq	.+4      	; 0x15dc <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
    15d8:	ca 01       	movw	r24, r20
    15da:	d4 c9       	rjmp	.-3160   	; 0x984 <HAL_UartBytesReceived>
    15dc:	08 95       	ret

000015de <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
    15de:	e4 e4       	ldi	r30, 0x44	; 68
    15e0:	f3 e1       	ldi	r31, 0x13	; 19
    15e2:	14 82       	std	Z+4, r1	; 0x04
    15e4:	15 82       	std	Z+5, r1	; 0x05
    15e6:	11 82       	std	Z+1, r1	; 0x01
    15e8:	10 82       	st	Z, r1
    15ea:	17 a2       	std	Z+39, r1	; 0x27
    15ec:	16 a2       	std	Z+38, r1	; 0x26
    15ee:	ea e4       	ldi	r30, 0x4A	; 74
    15f0:	f3 e1       	ldi	r31, 0x13	; 19
    15f2:	8a e6       	ldi	r24, 0x6A	; 106
    15f4:	93 e1       	ldi	r25, 0x13	; 19
    15f6:	11 92       	st	Z+, r1
    15f8:	11 92       	st	Z+, r1
    15fa:	e8 17       	cp	r30, r24
    15fc:	f9 07       	cpc	r31, r25
    15fe:	d9 f7       	brne	.-10     	; 0x15f6 <NWK_Init+0x18>
    1600:	63 d6       	rcall	.+3270   	; 0x22c8 <nwkTxInit>
    1602:	7d d3       	rcall	.+1786   	; 0x1cfe <nwkRxInit>
    1604:	2c d1       	rcall	.+600    	; 0x185e <nwkFrameInit>
    1606:	5f d0       	rcall	.+190    	; 0x16c6 <nwkDataReqInit>
    1608:	af c1       	rjmp	.+862    	; 0x1968 <nwkRouteInit>
    160a:	08 95       	ret

0000160c <NWK_SetAddr>:
    160c:	90 93 45 13 	sts	0x1345, r25	; 0x801345 <nwkIb+0x1>
    1610:	80 93 44 13 	sts	0x1344, r24	; 0x801344 <nwkIb>
    1614:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <PHY_SetShortAddr>
    1618:	08 95       	ret

0000161a <NWK_SetPanId>:
    161a:	90 93 47 13 	sts	0x1347, r25	; 0x801347 <nwkIb+0x3>
    161e:	80 93 46 13 	sts	0x1346, r24	; 0x801346 <nwkIb+0x2>
    1622:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <PHY_SetPanId>
    1626:	08 95       	ret

00001628 <NWK_OpenEndpoint>:
    1628:	e8 2f       	mov	r30, r24
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	ee 0f       	add	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	e6 5b       	subi	r30, 0xB6	; 182
    1632:	fc 4e       	sbci	r31, 0xEC	; 236
    1634:	71 83       	std	Z+1, r23	; 0x01
    1636:	60 83       	st	Z, r22
    1638:	08 95       	ret

0000163a <NWK_Busy>:
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	20 91 6a 13 	lds	r18, 0x136A	; 0x80136a <nwkIb+0x26>
    1640:	30 91 6b 13 	lds	r19, 0x136B	; 0x80136b <nwkIb+0x27>
    1644:	23 2b       	or	r18, r19
    1646:	09 f4       	brne	.+2      	; 0x164a <NWK_Busy+0x10>
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	08 95       	ret

0000164c <NWK_Lock>:
    164c:	e4 e4       	ldi	r30, 0x44	; 68
    164e:	f3 e1       	ldi	r31, 0x13	; 19
    1650:	86 a1       	ldd	r24, Z+38	; 0x26
    1652:	97 a1       	ldd	r25, Z+39	; 0x27
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	97 a3       	std	Z+39, r25	; 0x27
    1658:	86 a3       	std	Z+38, r24	; 0x26
    165a:	08 95       	ret

0000165c <NWK_Unlock>:
    165c:	e4 e4       	ldi	r30, 0x44	; 68
    165e:	f3 e1       	ldi	r31, 0x13	; 19
    1660:	86 a1       	ldd	r24, Z+38	; 0x26
    1662:	97 a1       	ldd	r25, Z+39	; 0x27
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	97 a3       	std	Z+39, r25	; 0x27
    1668:	86 a3       	std	Z+38, r24	; 0x26
    166a:	08 95       	ret

0000166c <NWK_SleepReq>:
    166c:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <PHY_Sleep>
    1670:	08 95       	ret

00001672 <NWK_WakeupReq>:
    1672:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <PHY_Wakeup>
    1676:	08 95       	ret

00001678 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
    1678:	8d d3       	rcall	.+1818   	; 0x1d94 <nwkRxTaskHandler>
  nwkTxTaskHandler();
    167a:	22 d7       	rcall	.+3652   	; 0x24c0 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
    167c:	4d c0       	rjmp	.+154    	; 0x1718 <nwkDataReqTaskHandler>
    167e:	08 95       	ret

00001680 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    1680:	e0 91 81 09 	lds	r30, 0x0981	; 0x800981 <nwkDataReqQueue>
    1684:	f0 91 82 09 	lds	r31, 0x0982	; 0x800982 <nwkDataReqQueue+0x1>
    1688:	30 97       	sbiw	r30, 0x00	; 0
    168a:	d9 f0       	breq	.+54     	; 0x16c2 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
    168c:	22 81       	ldd	r18, Z+2	; 0x02
    168e:	33 81       	ldd	r19, Z+3	; 0x03
    1690:	82 17       	cp	r24, r18
    1692:	93 07       	cpc	r25, r19
    1694:	89 f4       	brne	.+34     	; 0x16b8 <nwkDataReqTxConf+0x38>
    1696:	05 c0       	rjmp	.+10     	; 0x16a2 <nwkDataReqTxConf+0x22>
    1698:	22 81       	ldd	r18, Z+2	; 0x02
    169a:	33 81       	ldd	r19, Z+3	; 0x03
    169c:	28 17       	cp	r18, r24
    169e:	39 07       	cpc	r19, r25
    16a0:	59 f4       	brne	.+22     	; 0x16b8 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
    16a2:	dc 01       	movw	r26, r24
    16a4:	ad 57       	subi	r26, 0x7D	; 125
    16a6:	bf 4f       	sbci	r27, 0xFF	; 255
    16a8:	2c 91       	ld	r18, X
    16aa:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
    16ac:	13 96       	adiw	r26, 0x03	; 3
    16ae:	2c 91       	ld	r18, X
    16b0:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
    16b2:	22 e0       	ldi	r18, 0x02	; 2
    16b4:	24 83       	std	Z+4, r18	; 0x04
      break;
    16b6:	05 c0       	rjmp	.+10     	; 0x16c2 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    16b8:	01 90       	ld	r0, Z+
    16ba:	f0 81       	ld	r31, Z
    16bc:	e0 2d       	mov	r30, r0
    16be:	30 97       	sbiw	r30, 0x00	; 0
    16c0:	59 f7       	brne	.-42     	; 0x1698 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
    16c2:	0f c1       	rjmp	.+542    	; 0x18e2 <nwkFrameFree>
    16c4:	08 95       	ret

000016c6 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    16c6:	10 92 82 09 	sts	0x0982, r1	; 0x800982 <nwkDataReqQueue+0x1>
    16ca:	10 92 81 09 	sts	0x0981, r1	; 0x800981 <nwkDataReqQueue>
    16ce:	08 95       	ret

000016d0 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    16d0:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
    16d2:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
    16d4:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
    16d6:	13 82       	std	Z+3, r1	; 0x03
    16d8:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
    16da:	a4 e4       	ldi	r26, 0x44	; 68
    16dc:	b3 e1       	ldi	r27, 0x13	; 19
    16de:	96 96       	adiw	r26, 0x26	; 38
    16e0:	8d 91       	ld	r24, X+
    16e2:	9c 91       	ld	r25, X
    16e4:	97 97       	sbiw	r26, 0x27	; 39
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	97 96       	adiw	r26, 0x27	; 39
    16ea:	9c 93       	st	X, r25
    16ec:	8e 93       	st	-X, r24
    16ee:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
    16f0:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <nwkDataReqQueue>
    16f4:	90 91 82 09 	lds	r25, 0x0982	; 0x800982 <nwkDataReqQueue+0x1>
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	39 f4       	brne	.+14     	; 0x170a <NWK_DataReq+0x3a>
  {
    req->next = NULL;
    16fc:	11 82       	std	Z+1, r1	; 0x01
    16fe:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
    1700:	f0 93 82 09 	sts	0x0982, r31	; 0x800982 <nwkDataReqQueue+0x1>
    1704:	e0 93 81 09 	sts	0x0981, r30	; 0x800981 <nwkDataReqQueue>
    1708:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
    170a:	91 83       	std	Z+1, r25	; 0x01
    170c:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
    170e:	f0 93 82 09 	sts	0x0982, r31	; 0x800982 <nwkDataReqQueue+0x1>
    1712:	e0 93 81 09 	sts	0x0981, r30	; 0x800981 <nwkDataReqQueue>
    1716:	08 95       	ret

00001718 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    1720:	e0 91 81 09 	lds	r30, 0x0981	; 0x800981 <nwkDataReqQueue>
    1724:	f0 91 82 09 	lds	r31, 0x0982	; 0x800982 <nwkDataReqQueue+0x1>
    1728:	30 97       	sbiw	r30, 0x00	; 0
    172a:	09 f4       	brne	.+2      	; 0x172e <nwkDataReqTaskHandler+0x16>
    172c:	93 c0       	rjmp	.+294    	; 0x1854 <nwkDataReqTaskHandler+0x13c>
    172e:	ef 01       	movw	r28, r30
  {
    switch (req->state)
    1730:	8c 81       	ldd	r24, Y+4	; 0x04
    1732:	88 23       	and	r24, r24
    1734:	21 f0       	breq	.+8      	; 0x173e <nwkDataReqTaskHandler+0x26>
    1736:	82 30       	cpi	r24, 0x02	; 2
    1738:	09 f4       	brne	.+2      	; 0x173c <nwkDataReqTaskHandler+0x24>
    173a:	66 c0       	rjmp	.+204    	; 0x1808 <nwkDataReqTaskHandler+0xf0>
    173c:	85 c0       	rjmp	.+266    	; 0x1848 <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
    173e:	9a d0       	rcall	.+308    	; 0x1874 <nwkFrameAlloc>
    1740:	8c 01       	movw	r16, r24
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	21 f4       	brne	.+8      	; 0x174e <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
    1746:	82 e0       	ldi	r24, 0x02	; 2
    1748:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
    174a:	8f 87       	std	Y+15, r24	; 0x0f
    174c:	83 c0       	rjmp	.+262    	; 0x1854 <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
    174e:	9b 83       	std	Y+3, r25	; 0x03
    1750:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
    1756:	f8 01       	movw	r30, r16
    1758:	e9 57       	subi	r30, 0x79	; 121
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	80 e4       	ldi	r24, 0x40	; 64
    175e:	9b e0       	ldi	r25, 0x0B	; 11
    1760:	91 83       	std	Z+1, r25	; 0x01
    1762:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
    1764:	31 97       	sbiw	r30, 0x01	; 1
    1766:	89 85       	ldd	r24, Y+9	; 0x09
    1768:	82 fb       	bst	r24, 2
    176a:	88 27       	eor	r24, r24
    176c:	80 f9       	bld	r24, 0
    176e:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
    1770:	99 85       	ldd	r25, Y+9	; 0x09
    1772:	d8 01       	movw	r26, r16
    1774:	1b 96       	adiw	r26, 0x0b	; 11
    1776:	8c 91       	ld	r24, X
    1778:	1b 97       	sbiw	r26, 0x0b	; 11
    177a:	90 fb       	bst	r25, 0
    177c:	80 f9       	bld	r24, 0
    177e:	1b 96       	adiw	r26, 0x0b	; 11
    1780:	8c 93       	st	X, r24
    1782:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
    1784:	99 85       	ldd	r25, Y+9	; 0x09
    1786:	93 fb       	bst	r25, 3
    1788:	99 27       	eor	r25, r25
    178a:	90 f9       	bld	r25, 0
    178c:	90 fb       	bst	r25, 0
    178e:	82 f9       	bld	r24, 2
    1790:	1b 96       	adiw	r26, 0x0b	; 11
    1792:	8c 93       	st	X, r24
    1794:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1796:	e4 e4       	ldi	r30, 0x44	; 68
    1798:	f3 e1       	ldi	r31, 0x13	; 19
    179a:	84 81       	ldd	r24, Z+4	; 0x04
    179c:	8f 5f       	subi	r24, 0xFF	; 255
    179e:	84 83       	std	Z+4, r24	; 0x04
    17a0:	1c 96       	adiw	r26, 0x0c	; 12
    17a2:	8c 93       	st	X, r24
    17a4:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
    17a6:	80 81       	ld	r24, Z
    17a8:	91 81       	ldd	r25, Z+1	; 0x01
    17aa:	1e 96       	adiw	r26, 0x0e	; 14
    17ac:	9c 93       	st	X, r25
    17ae:	8e 93       	st	-X, r24
    17b0:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	9e 81       	ldd	r25, Y+6	; 0x06
    17b6:	50 96       	adiw	r26, 0x10	; 16
    17b8:	9c 93       	st	X, r25
    17ba:	8e 93       	st	-X, r24
    17bc:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
    17be:	88 85       	ldd	r24, Y+8	; 0x08
    17c0:	98 2f       	mov	r25, r24
    17c2:	9f 70       	andi	r25, 0x0F	; 15
    17c4:	51 96       	adiw	r26, 0x11	; 17
    17c6:	8c 91       	ld	r24, X
    17c8:	51 97       	sbiw	r26, 0x11	; 17
    17ca:	80 7f       	andi	r24, 0xF0	; 240
    17cc:	89 2b       	or	r24, r25
    17ce:	51 96       	adiw	r26, 0x11	; 17
    17d0:	8c 93       	st	X, r24
    17d2:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
    17d4:	9f 81       	ldd	r25, Y+7	; 0x07
    17d6:	92 95       	swap	r25
    17d8:	90 7f       	andi	r25, 0xF0	; 240
    17da:	8f 70       	andi	r24, 0x0F	; 15
    17dc:	89 2b       	or	r24, r25
    17de:	51 96       	adiw	r26, 0x11	; 17
    17e0:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
    17e2:	f8 01       	movw	r30, r16
    17e4:	ef 57       	subi	r30, 0x7F	; 127
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	4c 85       	ldd	r20, Y+12	; 0x0c
    17ea:	50 e0       	ldi	r21, 0x00	; 0
    17ec:	6a 85       	ldd	r22, Y+10	; 0x0a
    17ee:	7b 85       	ldd	r23, Y+11	; 0x0b
    17f0:	80 81       	ld	r24, Z
    17f2:	91 81       	ldd	r25, Z+1	; 0x01
    17f4:	0e 94 04 18 	call	0x3008	; 0x3008 <memcpy>
  frame->size += req->size;
    17f8:	f8 01       	movw	r30, r16
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
    17fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    17fe:	89 0f       	add	r24, r25
    1800:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
    1802:	c8 01       	movw	r24, r16
    1804:	84 d5       	rcall	.+2824   	; 0x230e <nwkTxFrame>
    1806:	26 c0       	rjmp	.+76     	; 0x1854 <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
    1808:	ec 17       	cp	r30, r28
    180a:	fd 07       	cpc	r31, r29
    180c:	41 f4       	brne	.+16     	; 0x181e <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
    180e:	80 81       	ld	r24, Z
    1810:	91 81       	ldd	r25, Z+1	; 0x01
    1812:	90 93 82 09 	sts	0x0982, r25	; 0x800982 <nwkDataReqQueue+0x1>
    1816:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <nwkDataReqQueue>
    181a:	0a c0       	rjmp	.+20     	; 0x1830 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
    181c:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    181e:	80 81       	ld	r24, Z
    1820:	91 81       	ldd	r25, Z+1	; 0x01
    1822:	8c 17       	cp	r24, r28
    1824:	9d 07       	cpc	r25, r29
    1826:	d1 f7       	brne	.-12     	; 0x181c <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    1828:	88 81       	ld	r24, Y
    182a:	99 81       	ldd	r25, Y+1	; 0x01
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
    1830:	e4 e4       	ldi	r30, 0x44	; 68
    1832:	f3 e1       	ldi	r31, 0x13	; 19
    1834:	86 a1       	ldd	r24, Z+38	; 0x26
    1836:	97 a1       	ldd	r25, Z+39	; 0x27
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	97 a3       	std	Z+39, r25	; 0x27
    183c:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
    183e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1840:	fe 85       	ldd	r31, Y+14	; 0x0e
    1842:	ce 01       	movw	r24, r28
    1844:	19 95       	eicall
    1846:	06 c0       	rjmp	.+12     	; 0x1854 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    1848:	09 90       	ld	r0, Y+
    184a:	d8 81       	ld	r29, Y
    184c:	c0 2d       	mov	r28, r0
    184e:	20 97       	sbiw	r28, 0x00	; 0
    1850:	09 f0       	breq	.+2      	; 0x1854 <nwkDataReqTaskHandler+0x13c>
    1852:	6e cf       	rjmp	.-292    	; 0x1730 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
    185c:	08 95       	ret

0000185e <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    185e:	e3 e8       	ldi	r30, 0x83	; 131
    1860:	f9 e0       	ldi	r31, 0x09	; 9
    1862:	8d ed       	ldi	r24, 0xDD	; 221
    1864:	9e e0       	ldi	r25, 0x0E	; 14
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    1866:	10 82       	st	Z, r1
    1868:	e7 57       	subi	r30, 0x77	; 119
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    186c:	e8 17       	cp	r30, r24
    186e:	f9 07       	cpc	r31, r25
    1870:	d1 f7       	brne	.-12     	; 0x1866 <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
    1872:	08 95       	ret

00001874 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    1874:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <nwkFrameFrames>
    1878:	88 23       	and	r24, r24
    187a:	49 f0       	breq	.+18     	; 0x188e <nwkFrameAlloc+0x1a>
    187c:	ec e0       	ldi	r30, 0x0C	; 12
    187e:	fa e0       	ldi	r31, 0x0A	; 10
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	ac 01       	movw	r20, r24
    1886:	20 81       	ld	r18, Z
    1888:	21 11       	cpse	r18, r1
    188a:	22 c0       	rjmp	.+68     	; 0x18d0 <nwkFrameAlloc+0x5c>
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <nwkFrameAlloc+0x1e>
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    1892:	69 e8       	ldi	r22, 0x89	; 137
    1894:	64 9f       	mul	r22, r20
    1896:	90 01       	movw	r18, r0
    1898:	65 9f       	mul	r22, r21
    189a:	30 0d       	add	r19, r0
    189c:	11 24       	eor	r1, r1
    189e:	c9 01       	movw	r24, r18
    18a0:	8d 57       	subi	r24, 0x7D	; 125
    18a2:	96 4f       	sbci	r25, 0xF6	; 246
    18a4:	fc 01       	movw	r30, r24
    18a6:	11 92       	st	Z+, r1
    18a8:	6a 95       	dec	r22
    18aa:	e9 f7       	brne	.-6      	; 0x18a6 <nwkFrameAlloc+0x32>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    18ac:	40 e1       	ldi	r20, 0x10	; 16
    18ae:	fc 01       	movw	r30, r24
    18b0:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    18b2:	ef 57       	subi	r30, 0x7F	; 127
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	2b 56       	subi	r18, 0x6B	; 107
    18b8:	36 4f       	sbci	r19, 0xF6	; 246
    18ba:	31 83       	std	Z+1, r19	; 0x01
    18bc:	20 83       	st	Z, r18
      nwkIb.lock++;
    18be:	e4 e4       	ldi	r30, 0x44	; 68
    18c0:	f3 e1       	ldi	r31, 0x13	; 19
    18c2:	26 a1       	ldd	r18, Z+38	; 0x26
    18c4:	37 a1       	ldd	r19, Z+39	; 0x27
    18c6:	2f 5f       	subi	r18, 0xFF	; 255
    18c8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ca:	37 a3       	std	Z+39, r19	; 0x27
    18cc:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
    18ce:	08 95       	ret
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	e7 57       	subi	r30, 0x77	; 119
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    18d6:	8a 30       	cpi	r24, 0x0A	; 10
    18d8:	91 05       	cpc	r25, r1
    18da:	a1 f6       	brne	.-88     	; 0x1884 <nwkFrameAlloc+0x10>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	90 e0       	ldi	r25, 0x00	; 0
}
    18e0:	08 95       	ret

000018e2 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
    18e2:	fc 01       	movw	r30, r24
    18e4:	10 82       	st	Z, r1
  nwkIb.lock--;
    18e6:	e4 e4       	ldi	r30, 0x44	; 68
    18e8:	f3 e1       	ldi	r31, 0x13	; 19
    18ea:	86 a1       	ldd	r24, Z+38	; 0x26
    18ec:	97 a1       	ldd	r25, Z+39	; 0x27
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	97 a3       	std	Z+39, r25	; 0x27
    18f2:	86 a3       	std	Z+38, r24	; 0x26
    18f4:	08 95       	ret

000018f6 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	41 f0       	breq	.+16     	; 0x190a <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    18fa:	fc 01       	movw	r30, r24
    18fc:	e7 57       	subi	r30, 0x77	; 119
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1900:	8e e0       	ldi	r24, 0x0E	; 14
    1902:	ed 3d       	cpi	r30, 0xDD	; 221
    1904:	f8 07       	cpc	r31, r24
    1906:	18 f0       	brcs	.+6      	; 0x190e <nwkFrameNext+0x18>
    1908:	12 c0       	rjmp	.+36     	; 0x192e <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    190a:	e3 e8       	ldi	r30, 0x83	; 131
    190c:	f9 e0       	ldi	r31, 0x09	; 9
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    190e:	80 81       	ld	r24, Z
    1910:	88 23       	and	r24, r24
    1912:	21 f0       	breq	.+8      	; 0x191c <nwkFrameNext+0x26>
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <nwkFrameNext+0x3e>
    1916:	80 81       	ld	r24, Z
    1918:	81 11       	cpse	r24, r1
    191a:	0f c0       	rjmp	.+30     	; 0x193a <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    191c:	e7 57       	subi	r30, 0x77	; 119
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	8e e0       	ldi	r24, 0x0E	; 14
    1922:	ed 3d       	cpi	r30, 0xDD	; 221
    1924:	f8 07       	cpc	r31, r24
    1926:	b8 f3       	brcs	.-18     	; 0x1916 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	08 95       	ret
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    1934:	8e 2f       	mov	r24, r30
    1936:	9f 2f       	mov	r25, r31
    1938:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    193a:	8e 2f       	mov	r24, r30
    193c:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
    193e:	08 95       	ret

00001940 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    1940:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
    1942:	dc 01       	movw	r26, r24
    1944:	ad 57       	subi	r26, 0x7D	; 125
    1946:	bf 4f       	sbci	r27, 0xFF	; 255
    1948:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    194a:	a4 e4       	ldi	r26, 0x44	; 68
    194c:	b3 e1       	ldi	r27, 0x13	; 19
    194e:	14 96       	adiw	r26, 0x04	; 4
    1950:	9c 91       	ld	r25, X
    1952:	14 97       	sbiw	r26, 0x04	; 4
    1954:	9f 5f       	subi	r25, 0xFF	; 255
    1956:	14 96       	adiw	r26, 0x04	; 4
    1958:	9c 93       	st	X, r25
    195a:	14 97       	sbiw	r26, 0x04	; 4
    195c:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    195e:	8d 91       	ld	r24, X+
    1960:	9c 91       	ld	r25, X
    1962:	96 87       	std	Z+14, r25	; 0x0e
    1964:	85 87       	std	Z+13, r24	; 0x0d
    1966:	08 95       	ret

00001968 <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
    1968:	ae ed       	ldi	r26, 0xDE	; 222
    196a:	be e0       	ldi	r27, 0x0E	; 14
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	4f ef       	ldi	r20, 0xFF	; 255
    1972:	5f ef       	ldi	r21, 0xFF	; 255
    1974:	11 96       	adiw	r26, 0x01	; 1
    1976:	5c 93       	st	X, r21
    1978:	4e 93       	st	-X, r20
    197a:	fc 01       	movw	r30, r24
    197c:	ee 0f       	add	r30, r30
    197e:	ff 1f       	adc	r31, r31
    1980:	ee 0f       	add	r30, r30
    1982:	ff 1f       	adc	r31, r31
    1984:	ee 0f       	add	r30, r30
    1986:	ff 1f       	adc	r31, r31
    1988:	e8 1b       	sub	r30, r24
    198a:	f9 0b       	sbc	r31, r25
    198c:	e3 52       	subi	r30, 0x23	; 35
    198e:	f1 4f       	sbci	r31, 0xF1	; 241
    1990:	20 81       	ld	r18, Z
    1992:	2e 7f       	andi	r18, 0xFE	; 254
    1994:	20 83       	st	Z, r18
    1996:	14 96       	adiw	r26, 0x04	; 4
    1998:	1c 92       	st	X, r1
    199a:	14 97       	sbiw	r26, 0x04	; 4
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	17 96       	adiw	r26, 0x07	; 7
    19a0:	84 36       	cpi	r24, 0x64	; 100
    19a2:	91 05       	cpc	r25, r1
    19a4:	39 f7       	brne	.-50     	; 0x1974 <nwkRouteInit+0xc>
    19a6:	08 95       	ret

000019a8 <NWK_RouteFindEntry>:
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	ee ed       	ldi	r30, 0xDE	; 222
    19b2:	fe e0       	ldi	r31, 0x0E	; 14
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	06 2f       	mov	r16, r22
    19ba:	10 e0       	ldi	r17, 0x00	; 0
    19bc:	40 81       	ld	r20, Z
    19be:	51 81       	ldd	r21, Z+1	; 0x01
    19c0:	48 17       	cp	r20, r24
    19c2:	59 07       	cpc	r21, r25
    19c4:	b1 f4       	brne	.+44     	; 0x19f2 <NWK_RouteFindEntry+0x4a>
    19c6:	d9 01       	movw	r26, r18
    19c8:	aa 0f       	add	r26, r26
    19ca:	bb 1f       	adc	r27, r27
    19cc:	aa 0f       	add	r26, r26
    19ce:	bb 1f       	adc	r27, r27
    19d0:	aa 0f       	add	r26, r26
    19d2:	bb 1f       	adc	r27, r27
    19d4:	a2 1b       	sub	r26, r18
    19d6:	b3 0b       	sbc	r27, r19
    19d8:	a3 52       	subi	r26, 0x23	; 35
    19da:	b1 4f       	sbci	r27, 0xF1	; 241
    19dc:	4c 91       	ld	r20, X
    19de:	46 95       	lsr	r20
    19e0:	41 70       	andi	r20, 0x01	; 1
    19e2:	c4 2f       	mov	r28, r20
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	d4 2f       	mov	r29, r20
    19e8:	c0 17       	cp	r28, r16
    19ea:	d1 07       	cpc	r29, r17
    19ec:	11 f4       	brne	.+4      	; 0x19f2 <NWK_RouteFindEntry+0x4a>
    19ee:	cd 01       	movw	r24, r26
    19f0:	08 c0       	rjmp	.+16     	; 0x1a02 <NWK_RouteFindEntry+0x5a>
    19f2:	2f 5f       	subi	r18, 0xFF	; 255
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	37 96       	adiw	r30, 0x07	; 7
    19f8:	24 36       	cpi	r18, 0x64	; 100
    19fa:	31 05       	cpc	r19, r1
    19fc:	f9 f6       	brne	.-66     	; 0x19bc <NWK_RouteFindEntry+0x14>
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	08 95       	ret

00001a0c <NWK_RouteNewEntry>:
    1a0c:	a0 e0       	ldi	r26, 0x00	; 0
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	ed ed       	ldi	r30, 0xDD	; 221
    1a12:	fe e0       	ldi	r31, 0x0E	; 14
    1a14:	80 81       	ld	r24, Z
    1a16:	80 fd       	sbrc	r24, 0
    1a18:	0d c0       	rjmp	.+26     	; 0x1a34 <NWK_RouteNewEntry+0x28>
    1a1a:	85 81       	ldd	r24, Z+5	; 0x05
    1a1c:	88 23       	and	r24, r24
    1a1e:	81 f0       	breq	.+32     	; 0x1a40 <NWK_RouteNewEntry+0x34>
    1a20:	10 97       	sbiw	r26, 0x00	; 0
    1a22:	39 f0       	breq	.+14     	; 0x1a32 <NWK_RouteNewEntry+0x26>
    1a24:	15 96       	adiw	r26, 0x05	; 5
    1a26:	9c 91       	ld	r25, X
    1a28:	15 97       	sbiw	r26, 0x05	; 5
    1a2a:	89 17       	cp	r24, r25
    1a2c:	18 f4       	brcc	.+6      	; 0x1a34 <NWK_RouteNewEntry+0x28>
    1a2e:	df 01       	movw	r26, r30
    1a30:	01 c0       	rjmp	.+2      	; 0x1a34 <NWK_RouteNewEntry+0x28>
    1a32:	df 01       	movw	r26, r30
    1a34:	37 96       	adiw	r30, 0x07	; 7
    1a36:	81 e1       	ldi	r24, 0x11	; 17
    1a38:	e9 39       	cpi	r30, 0x99	; 153
    1a3a:	f8 07       	cpc	r31, r24
    1a3c:	59 f7       	brne	.-42     	; 0x1a14 <NWK_RouteNewEntry+0x8>
    1a3e:	fd 01       	movw	r30, r26
    1a40:	80 81       	ld	r24, Z
    1a42:	8d 70       	andi	r24, 0x0D	; 13
    1a44:	80 63       	ori	r24, 0x30	; 48
    1a46:	80 83       	st	Z, r24
    1a48:	80 e8       	ldi	r24, 0x80	; 128
    1a4a:	85 83       	std	Z+5, r24	; 0x05
    1a4c:	cf 01       	movw	r24, r30
    1a4e:	08 95       	ret

00001a50 <NWK_RouteFreeEntry>:
    1a50:	fc 01       	movw	r30, r24
    1a52:	80 81       	ld	r24, Z
    1a54:	80 fd       	sbrc	r24, 0
    1a56:	05 c0       	rjmp	.+10     	; 0x1a62 <NWK_RouteFreeEntry+0x12>
    1a58:	8f ef       	ldi	r24, 0xFF	; 255
    1a5a:	9f ef       	ldi	r25, 0xFF	; 255
    1a5c:	92 83       	std	Z+2, r25	; 0x02
    1a5e:	81 83       	std	Z+1, r24	; 0x01
    1a60:	15 82       	std	Z+5, r1	; 0x05
    1a62:	08 95       	ret

00001a64 <NWK_RouteNextHop>:
    1a64:	a1 df       	rcall	.-190    	; 0x19a8 <NWK_RouteFindEntry>
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	21 f0       	breq	.+8      	; 0x1a72 <NWK_RouteNextHop+0xe>
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	83 81       	ldd	r24, Z+3	; 0x03
    1a6e:	94 81       	ldd	r25, Z+4	; 0x04
    1a70:	08 95       	ret
    1a72:	8f ef       	ldi	r24, 0xFF	; 255
    1a74:	9f ef       	ldi	r25, 0xFF	; 255
    1a76:	08 95       	ret

00001a78 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    1a78:	97 df       	rcall	.-210    	; 0x19a8 <NWK_RouteFindEntry>
  if (entry)
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
    1a7c:	09 f0       	breq	.+2      	; 0x1a80 <nwkRouteRemove+0x8>
    1a7e:	e8 cf       	rjmp	.-48     	; 0x1a50 <NWK_RouteFreeEntry>
    1a80:	08 95       	ret

00001a82 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    1a8c:	01 85       	ldd	r16, Z+9	; 0x09
    1a8e:	12 85       	ldd	r17, Z+10	; 0x0a
    1a90:	11 23       	and	r17, r17
    1a92:	2c f4       	brge	.+10     	; 0x1a9e <nwkRouteFrameReceived+0x1c>
    1a94:	85 85       	ldd	r24, Z+13	; 0x0d
    1a96:	96 85       	ldd	r25, Z+14	; 0x0e
    1a98:	08 17       	cp	r16, r24
    1a9a:	19 07       	cpc	r17, r25
    1a9c:	e1 f5       	brne	.+120    	; 0x1b16 <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    1a9e:	85 81       	ldd	r24, Z+5	; 0x05
    1aa0:	96 81       	ldd	r25, Z+6	; 0x06
    1aa2:	01 96       	adiw	r24, 0x01	; 1
    1aa4:	c1 f1       	breq	.+112    	; 0x1b16 <nwkRouteFrameReceived+0x94>
    1aa6:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	85 85       	ldd	r24, Z+13	; 0x0d
    1aac:	96 85       	ldd	r25, Z+14	; 0x0e
    1aae:	7c df       	rcall	.-264    	; 0x19a8 <NWK_RouteFindEntry>
    1ab0:	fc 01       	movw	r30, r24

  if (entry)
    1ab2:	89 2b       	or	r24, r25
    1ab4:	a1 f0       	breq	.+40     	; 0x1ade <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    1ab6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab8:	98 85       	ldd	r25, Y+8	; 0x08
    1aba:	01 96       	adiw	r24, 0x01	; 1
    1abc:	f9 f4       	brne	.+62     	; 0x1afc <nwkRouteFrameReceived+0x7a>
    1abe:	20 91 44 13 	lds	r18, 0x1344	; 0x801344 <nwkIb>
    1ac2:	30 91 45 13 	lds	r19, 0x1345	; 0x801345 <nwkIb+0x1>
    1ac6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ac8:	98 89       	ldd	r25, Y+16	; 0x10
    1aca:	28 17       	cp	r18, r24
    1acc:	39 07       	cpc	r19, r25
    1ace:	b1 f4       	brne	.+44     	; 0x1afc <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
    1ad0:	14 83       	std	Z+4, r17	; 0x04
    1ad2:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8f 70       	andi	r24, 0x0F	; 15
    1ad8:	80 63       	ori	r24, 0x30	; 48
    1ada:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
    1adc:	0a c0       	rjmp	.+20     	; 0x1af2 <nwkRouteFrameReceived+0x70>
    1ade:	96 df       	rcall	.-212    	; 0x1a0c <NWK_RouteNewEntry>
    1ae0:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
    1ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae6:	92 83       	std	Z+2, r25	; 0x02
    1ae8:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
    1aea:	89 85       	ldd	r24, Y+9	; 0x09
    1aec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aee:	94 83       	std	Z+4, r25	; 0x04
    1af0:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
    1af2:	cd 57       	subi	r28, 0x7D	; 125
    1af4:	df 4f       	sbci	r29, 0xFF	; 255
    1af6:	88 81       	ld	r24, Y
    1af8:	86 83       	std	Z+6, r24	; 0x06
    1afa:	0d c0       	rjmp	.+26     	; 0x1b16 <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    1afc:	83 81       	ldd	r24, Z+3	; 0x03
    1afe:	94 81       	ldd	r25, Z+4	; 0x04
    1b00:	08 17       	cp	r16, r24
    1b02:	19 07       	cpc	r17, r25
    1b04:	b1 f3       	breq	.-20     	; 0x1af2 <nwkRouteFrameReceived+0x70>
    1b06:	96 81       	ldd	r25, Z+6	; 0x06
    1b08:	de 01       	movw	r26, r28
    1b0a:	ad 57       	subi	r26, 0x7D	; 125
    1b0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b0e:	8c 91       	ld	r24, X
    1b10:	98 17       	cp	r25, r24
    1b12:	f0 f2       	brcs	.-68     	; 0x1ad0 <nwkRouteFrameReceived+0x4e>
    1b14:	ee cf       	rjmp	.-36     	; 0x1af2 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	1f 91       	pop	r17
    1b1c:	0f 91       	pop	r16
    1b1e:	08 95       	ret

00001b20 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    1b20:	cf 93       	push	r28
    1b22:	df 93       	push	r29
    1b24:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    1b26:	87 85       	ldd	r24, Z+15	; 0x0f
    1b28:	90 89       	ldd	r25, Z+16	; 0x10
    1b2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b2c:	2f ef       	ldi	r18, 0xFF	; 255
    1b2e:	92 07       	cpc	r25, r18
    1b30:	d9 f1       	breq	.+118    	; 0x1ba8 <nwkRouteFrameSent+0x88>
    1b32:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
    1b34:	63 85       	ldd	r22, Z+11	; 0x0b
    1b36:	63 fb       	bst	r22, 3
    1b38:	66 27       	eor	r22, r22
    1b3a:	60 f9       	bld	r22, 0
    1b3c:	35 df       	rcall	.-406    	; 0x19a8 <NWK_RouteFindEntry>
    1b3e:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
    1b40:	89 2b       	or	r24, r25
    1b42:	91 f1       	breq	.+100    	; 0x1ba8 <nwkRouteFrameSent+0x88>
    1b44:	8c 91       	ld	r24, X
    1b46:	80 fd       	sbrc	r24, 0
    1b48:	2f c0       	rjmp	.+94     	; 0x1ba8 <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	ed 57       	subi	r30, 0x7D	; 125
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	80 81       	ld	r24, Z
    1b52:	81 11       	cpse	r24, r1
    1b54:	19 c0       	rjmp	.+50     	; 0x1b88 <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1b56:	8c 91       	ld	r24, X
    1b58:	8f 70       	andi	r24, 0x0F	; 15
    1b5a:	80 63       	ori	r24, 0x30	; 48
    1b5c:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
    1b5e:	15 96       	adiw	r26, 0x05	; 5
    1b60:	8c 91       	ld	r24, X
    1b62:	15 97       	sbiw	r26, 0x05	; 5
    1b64:	8f 5f       	subi	r24, 0xFF	; 255
    1b66:	15 96       	adiw	r26, 0x05	; 5
    1b68:	8c 93       	st	X, r24
    1b6a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b6c:	e9 f4       	brne	.+58     	; 0x1ba8 <nwkRouteFrameSent+0x88>
    1b6e:	e2 ee       	ldi	r30, 0xE2	; 226
    1b70:	fe e0       	ldi	r31, 0x0E	; 14
    1b72:	2e e9       	ldi	r18, 0x9E	; 158
    1b74:	31 e1       	ldi	r19, 0x11	; 17
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    1b76:	80 81       	ld	r24, Z
    1b78:	86 95       	lsr	r24
    1b7a:	8f 5f       	subi	r24, 0xFF	; 255
    1b7c:	80 83       	st	Z, r24
    1b7e:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    1b80:	e2 17       	cp	r30, r18
    1b82:	f3 07       	cpc	r31, r19
    1b84:	c1 f7       	brne	.-16     	; 0x1b76 <nwkRouteFrameSent+0x56>
    1b86:	10 c0       	rjmp	.+32     	; 0x1ba8 <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
    1b88:	9c 91       	ld	r25, X
    1b8a:	89 2f       	mov	r24, r25
    1b8c:	82 95       	swap	r24
    1b8e:	8f 70       	andi	r24, 0x0F	; 15
    1b90:	81 5f       	subi	r24, 0xF1	; 241
    1b92:	8f 70       	andi	r24, 0x0F	; 15
    1b94:	28 2f       	mov	r18, r24
    1b96:	22 95       	swap	r18
    1b98:	20 7f       	andi	r18, 0xF0	; 240
    1b9a:	9f 70       	andi	r25, 0x0F	; 15
    1b9c:	92 2b       	or	r25, r18
    1b9e:	9c 93       	st	X, r25
    1ba0:	81 11       	cpse	r24, r1
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
    1ba4:	cd 01       	movw	r24, r26
    1ba6:	54 df       	rcall	.-344    	; 0x1a50 <NWK_RouteFreeEntry>
  }
}
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	08 95       	ret

00001bae <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1bb4:	87 85       	ldd	r24, Z+15	; 0x0f
    1bb6:	90 89       	ldd	r25, Z+16	; 0x10
    1bb8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bba:	2f ef       	ldi	r18, 0xFF	; 255
    1bbc:	92 07       	cpc	r25, r18
    1bbe:	29 f4       	brne	.+10     	; 0x1bca <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    1bc0:	8f ef       	ldi	r24, 0xFF	; 255
    1bc2:	9f ef       	ldi	r25, 0xFF	; 255
    1bc4:	90 87       	std	Z+8, r25	; 0x08
    1bc6:	87 83       	std	Z+7, r24	; 0x07
    1bc8:	0e c0       	rjmp	.+28     	; 0x1be6 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
    1bca:	23 85       	ldd	r18, Z+11	; 0x0b
    1bcc:	22 ff       	sbrs	r18, 2
    1bce:	03 c0       	rjmp	.+6      	; 0x1bd6 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
    1bd0:	90 87       	std	Z+8, r25	; 0x08
    1bd2:	87 83       	std	Z+7, r24	; 0x07
    1bd4:	08 c0       	rjmp	.+16     	; 0x1be6 <nwkRoutePrepareTx+0x38>
    1bd6:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
    1bd8:	63 85       	ldd	r22, Z+11	; 0x0b
    1bda:	63 fb       	bst	r22, 3
    1bdc:	66 27       	eor	r22, r22
    1bde:	60 f9       	bld	r22, 0
    1be0:	41 df       	rcall	.-382    	; 0x1a64 <NWK_RouteNextHop>
    1be2:	98 87       	std	Y+8, r25	; 0x08
    1be4:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	08 95       	ret

00001bec <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    1bec:	af 92       	push	r10
    1bee:	bf 92       	push	r11
    1bf0:	cf 92       	push	r12
    1bf2:	df 92       	push	r13
    1bf4:	ef 92       	push	r14
    1bf6:	ff 92       	push	r15
    1bf8:	1f 93       	push	r17
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
    1c00:	1b 85       	ldd	r17, Y+11	; 0x0b
    1c02:	13 fb       	bst	r17, 3
    1c04:	11 27       	eor	r17, r17
    1c06:	10 f9       	bld	r17, 0
    1c08:	cf 84       	ldd	r12, Y+15	; 0x0f
    1c0a:	d8 88       	ldd	r13, Y+16	; 0x10
    1c0c:	61 2f       	mov	r22, r17
    1c0e:	c6 01       	movw	r24, r12
    1c10:	29 df       	rcall	.-430    	; 0x1a64 <NWK_RouteNextHop>
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	59 f0       	breq	.+22     	; 0x1c2c <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
    1c16:	fe 01       	movw	r30, r28
    1c18:	e9 57       	subi	r30, 0x79	; 121
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	11 82       	std	Z+1, r1	; 0x01
    1c1e:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    1c20:	31 97       	sbiw	r30, 0x01	; 1
    1c22:	82 e0       	ldi	r24, 0x02	; 2
    1c24:	80 83       	st	Z, r24
    nwkTxFrame(frame);
    1c26:	ce 01       	movw	r24, r28
    1c28:	72 d3       	rcall	.+1764   	; 0x230e <nwkTxFrame>
    1c2a:	22 c0       	rjmp	.+68     	; 0x1c70 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    1c2c:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
    1c2e:	be 84       	ldd	r11, Y+14	; 0x0e
    1c30:	21 de       	rcall	.-958    	; 0x1874 <nwkFrameAlloc>
    1c32:	7c 01       	movw	r14, r24
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
    1c36:	d1 f0       	breq	.+52     	; 0x1c6c <nwkRouteFrame+0x80>
    1c38:	83 de       	rcall	.-762    	; 0x1940 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
    1c3a:	f7 01       	movw	r30, r14
    1c3c:	81 81       	ldd	r24, Z+1	; 0x01
    1c3e:	8a 5f       	subi	r24, 0xFA	; 250
    1c40:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
    1c42:	e9 57       	subi	r30, 0x79	; 121
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	11 82       	std	Z+1, r1	; 0x01
    1c48:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
    1c4a:	f7 01       	movw	r30, r14
    1c4c:	b0 8a       	std	Z+16, r11	; 0x10
    1c4e:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
    1c50:	ef 57       	subi	r30, 0x7F	; 127
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	01 90       	ld	r0, Z+
    1c56:	f0 81       	ld	r31, Z
    1c58:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	80 83       	st	Z, r24
  command->srcAddr = src;
    1c5e:	b2 82       	std	Z+2, r11	; 0x02
    1c60:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
    1c62:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
    1c64:	c3 82       	std	Z+3, r12	; 0x03
    1c66:	15 83       	std	Z+5, r17	; 0x05
    1c68:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
    1c6a:	51 d3       	rcall	.+1698   	; 0x230e <nwkTxFrame>
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	39 de       	rcall	.-910    	; 0x18e2 <nwkFrameFree>
  }
}
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	1f 91       	pop	r17
    1c76:	ff 90       	pop	r15
    1c78:	ef 90       	pop	r14
    1c7a:	df 90       	pop	r13
    1c7c:	cf 90       	pop	r12
    1c7e:	bf 90       	pop	r11
    1c80:	af 90       	pop	r10
    1c82:	08 95       	ret

00001c84 <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    1c84:	fc 01       	movw	r30, r24
    1c86:	21 85       	ldd	r18, Z+9	; 0x09
    1c88:	26 30       	cpi	r18, 0x06	; 6
    1c8a:	49 f4       	brne	.+18     	; 0x1c9e <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    1c8c:	07 80       	ldd	r0, Z+7	; 0x07
    1c8e:	f0 85       	ldd	r31, Z+8	; 0x08
    1c90:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
    1c92:	65 81       	ldd	r22, Z+5	; 0x05
    1c94:	83 81       	ldd	r24, Z+3	; 0x03
    1c96:	94 81       	ldd	r25, Z+4	; 0x04
    1c98:	ef de       	rcall	.-546    	; 0x1a78 <nwkRouteRemove>

  return true;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
    1c9e:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
    1ca0:	08 95       	ret

00001ca2 <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	19 96       	adiw	r26, 0x09	; 9
    1ca6:	2c 91       	ld	r18, X
    1ca8:	19 97       	sbiw	r26, 0x09	; 9
    1caa:	22 23       	and	r18, r18
    1cac:	71 f0       	breq	.+28     	; 0x1cca <nwkRxServiceDataInd+0x28>
    return false;

  switch (ind->data[0])
    1cae:	17 96       	adiw	r26, 0x07	; 7
    1cb0:	ed 91       	ld	r30, X+
    1cb2:	fc 91       	ld	r31, X
    1cb4:	18 97       	sbiw	r26, 0x08	; 8
    1cb6:	20 81       	ld	r18, Z
    1cb8:	22 23       	and	r18, r18
    1cba:	19 f0       	breq	.+6      	; 0x1cc2 <nwkRxServiceDataInd+0x20>
    1cbc:	21 30       	cpi	r18, 0x01	; 1
    1cbe:	19 f0       	breq	.+6      	; 0x1cc6 <nwkRxServiceDataInd+0x24>
    1cc0:	06 c0       	rjmp	.+12     	; 0x1cce <nwkRxServiceDataInd+0x2c>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
    1cc2:	b6 c3       	rjmp	.+1900   	; 0x2430 <nwkTxAckReceived>
    1cc4:	08 95       	ret

#ifdef NWK_ENABLE_ROUTING
    case NWK_COMMAND_ROUTE_ERROR:
      return nwkRouteErrorReceived(ind);
    1cc6:	de cf       	rjmp	.-68     	; 0x1c84 <nwkRouteErrorReceived>
    1cc8:	08 95       	ret
    1cca:	80 e0       	ldi	r24, 0x00	; 0
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
    1ccc:	08 95       	ret
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
    1cd0:	08 95       	ret

00001cd2 <nwkRxDuplicateRejectionTimerHandler>:
  }
}
    1cd2:	bc 01       	movw	r22, r24
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    1cd4:	eb ea       	ldi	r30, 0xAB	; 171
    1cd6:	f1 e1       	ldi	r31, 0x11	; 17
    1cd8:	25 ea       	ldi	r18, 0xA5	; 165
    1cda:	32 e1       	ldi	r19, 0x12	; 18
  bool restart = false;
    1cdc:	40 e0       	ldi	r20, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    1cde:	51 e0       	ldi	r21, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    1ce0:	90 81       	ld	r25, Z
    1ce2:	99 23       	and	r25, r25
    1ce4:	19 f0       	breq	.+6      	; 0x1cec <nwkRxDuplicateRejectionTimerHandler+0x1a>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
    1ce6:	91 50       	subi	r25, 0x01	; 1
    1ce8:	90 83       	st	Z, r25
      restart = true;
    1cea:	45 2f       	mov	r20, r21
    1cec:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1cee:	e2 17       	cp	r30, r18
    1cf0:	f3 07       	cpc	r31, r19
    1cf2:	b1 f7       	brne	.-20     	; 0x1ce0 <nwkRxDuplicateRejectionTimerHandler+0xe>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
    1cf4:	44 23       	and	r20, r20
    1cf6:	11 f0       	breq	.+4      	; 0x1cfc <nwkRxDuplicateRejectionTimerHandler+0x2a>
    1cf8:	cb 01       	movw	r24, r22
    SYS_TimerStart(timer);
    1cfa:	86 c6       	rjmp	.+3340   	; 0x2a08 <SYS_TimerStart>
    1cfc:	08 95       	ret

00001cfe <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    1cfe:	eb ea       	ldi	r30, 0xAB	; 171
    1d00:	f1 e1       	ldi	r31, 0x11	; 17
    1d02:	85 ea       	ldi	r24, 0xA5	; 165
    1d04:	92 e1       	ldi	r25, 0x12	; 18
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
    1d06:	10 82       	st	Z, r1
    1d08:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1d0a:	e8 17       	cp	r30, r24
    1d0c:	f9 07       	cpc	r31, r25
    1d0e:	d9 f7       	brne	.-10     	; 0x1d06 <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    1d10:	e9 e9       	ldi	r30, 0x99	; 153
    1d12:	f1 e1       	ldi	r31, 0x11	; 17
    1d14:	84 e6       	ldi	r24, 0x64	; 100
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	a0 e0       	ldi	r26, 0x00	; 0
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	86 83       	std	Z+6, r24	; 0x06
    1d1e:	97 83       	std	Z+7, r25	; 0x07
    1d20:	a0 87       	std	Z+8, r26	; 0x08
    1d22:	b1 87       	std	Z+9, r27	; 0x09
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1d24:	12 86       	std	Z+10, r1	; 0x0a
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
    1d26:	89 e6       	ldi	r24, 0x69	; 105
    1d28:	9e e0       	ldi	r25, 0x0E	; 14
    1d2a:	94 87       	std	Z+12, r25	; 0x0c
    1d2c:	83 87       	std	Z+11, r24	; 0x0b

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
    1d2e:	61 e5       	ldi	r22, 0x51	; 81
    1d30:	7e e0       	ldi	r23, 0x0E	; 14
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	79 cc       	rjmp	.-1806   	; 0x1628 <NWK_OpenEndpoint>
    1d36:	08 95       	ret

00001d38 <PHY_DataInd>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
  NwkFrame_t *frame;

  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	ed 91       	ld	r30, X+
    1d40:	fc 91       	ld	r31, X
    1d42:	11 97       	sbiw	r26, 0x01	; 1
    1d44:	21 81       	ldd	r18, Z+1	; 0x01
    1d46:	28 38       	cpi	r18, 0x88	; 136
    1d48:	f9 f4       	brne	.+62     	; 0x1d88 <PHY_DataInd+0x50>
    1d4a:	20 81       	ld	r18, Z
    1d4c:	2f 7d       	andi	r18, 0xDF	; 223
    1d4e:	21 34       	cpi	r18, 0x41	; 65
    1d50:	d9 f4       	brne	.+54     	; 0x1d88 <PHY_DataInd+0x50>
    1d52:	12 96       	adiw	r26, 0x02	; 2
    1d54:	2c 91       	ld	r18, X
    1d56:	20 31       	cpi	r18, 0x10	; 16
    1d58:	b8 f0       	brcs	.+46     	; 0x1d88 <PHY_DataInd+0x50>
    1d5a:	ec 01       	movw	r28, r24
      ind->size < sizeof(NwkFrameHeader_t))
    return;

  if (NULL == (frame = nwkFrameAlloc()))
    1d5c:	8b dd       	rcall	.-1258   	; 0x1874 <nwkFrameAlloc>
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	99 f0       	breq	.+38     	; 0x1d88 <PHY_DataInd+0x50>
    return;

  frame->state = NWK_RX_STATE_RECEIVED;
    1d62:	20 e2       	ldi	r18, 0x20	; 32
    1d64:	fc 01       	movw	r30, r24
    1d66:	20 83       	st	Z, r18
  frame->size = ind->size;
    1d68:	2a 81       	ldd	r18, Y+2	; 0x02
    1d6a:	21 83       	std	Z+1, r18	; 0x01
  frame->rx.lqi = ind->lqi;
    1d6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6e:	ed 57       	subi	r30, 0x7D	; 125
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	20 83       	st	Z, r18
  frame->rx.rssi = ind->rssi;
    1d74:	2c 81       	ldd	r18, Y+4	; 0x04
    1d76:	31 96       	adiw	r30, 0x01	; 1
    1d78:	20 83       	st	Z, r18
  memcpy(frame->data, ind->data, ind->size);
    1d7a:	4a 81       	ldd	r20, Y+2	; 0x02
    1d7c:	50 e0       	ldi	r21, 0x00	; 0
    1d7e:	68 81       	ld	r22, Y
    1d80:	79 81       	ldd	r23, Y+1	; 0x01
    1d82:	02 96       	adiw	r24, 0x02	; 2
    1d84:	0e 94 04 18 	call	0x3008	; 0x3008 <memcpy>
}
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	08 95       	ret

00001d8e <NWK_SetAckControl>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
    1d8e:	80 93 a6 11 	sts	0x11A6, r24	; 0x8011a6 <nwkRxAckControl>
    1d92:	08 95       	ret

00001d94 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    1d94:	2f 92       	push	r2
    1d96:	3f 92       	push	r3
    1d98:	4f 92       	push	r4
    1d9a:	5f 92       	push	r5
    1d9c:	6f 92       	push	r6
    1d9e:	7f 92       	push	r7
    1da0:	8f 92       	push	r8
    1da2:	9f 92       	push	r9
    1da4:	af 92       	push	r10
    1da6:	bf 92       	push	r11
    1da8:	cf 92       	push	r12
    1daa:	df 92       	push	r13
    1dac:	ef 92       	push	r14
    1dae:	ff 92       	push	r15
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	2c 97       	sbiw	r28, 0x0c	; 12
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
    1dc8:	00 e0       	ldi	r16, 0x00	; 0
    1dca:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1dcc:	0f 2e       	mov	r0, r31
    1dce:	f4 e2       	ldi	r31, 0x24	; 36
    1dd0:	bf 2e       	mov	r11, r31
    1dd2:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    1dd4:	0f 2e       	mov	r0, r31
    1dd6:	f4 e4       	ldi	r31, 0x44	; 68
    1dd8:	ef 2e       	mov	r14, r31
    1dda:	f3 e1       	ldi	r31, 0x13	; 19
    1ddc:	ff 2e       	mov	r15, r31
    1dde:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    1de0:	44 24       	eor	r4, r4
    1de2:	43 94       	inc	r4
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1de4:	68 94       	set
    1de6:	aa 24       	eor	r10, r10
    1de8:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1dea:	68 94       	set
    1dec:	77 24       	eor	r7, r7
    1dee:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1df0:	68 94       	set
    1df2:	66 24       	eor	r6, r6
    1df4:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    1df6:	31 2c       	mov	r3, r1
    1df8:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1dfa:	0f 2e       	mov	r0, r31
    1dfc:	f5 e1       	ldi	r31, 0x15	; 21
    1dfe:	5f 2e       	mov	r5, r31
    1e00:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    1e02:	cc 24       	eor	r12, r12
    1e04:	c3 94       	inc	r12
    1e06:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1e08:	da c1       	rjmp	.+948    	; 0x21be <__EEPROM_REGION_LENGTH__+0x1be>
  {
    switch (frame->state)
    1e0a:	d8 01       	movw	r26, r16
    1e0c:	8c 91       	ld	r24, X
    1e0e:	82 32       	cpi	r24, 0x22	; 34
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <nwkRxTaskHandler+0x80>
    1e12:	05 c1       	rjmp	.+522    	; 0x201e <__EEPROM_REGION_LENGTH__+0x1e>
    1e14:	18 f4       	brcc	.+6      	; 0x1e1c <nwkRxTaskHandler+0x88>
    1e16:	80 32       	cpi	r24, 0x20	; 32
    1e18:	41 f0       	breq	.+16     	; 0x1e2a <nwkRxTaskHandler+0x96>
    1e1a:	d1 c1       	rjmp	.+930    	; 0x21be <__EEPROM_REGION_LENGTH__+0x1be>
    1e1c:	83 32       	cpi	r24, 0x23	; 35
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <nwkRxTaskHandler+0x8e>
    1e20:	c9 c1       	rjmp	.+914    	; 0x21b4 <__EEPROM_REGION_LENGTH__+0x1b4>
    1e22:	84 32       	cpi	r24, 0x24	; 36
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <nwkRxTaskHandler+0x94>
    1e26:	c9 c1       	rjmp	.+914    	; 0x21ba <__EEPROM_REGION_LENGTH__+0x1ba>
    1e28:	ca c1       	rjmp	.+916    	; 0x21be <__EEPROM_REGION_LENGTH__+0x1be>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
    1e2a:	f8 01       	movw	r30, r16
    1e2c:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
    1e2e:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
    1e30:	98 2f       	mov	r25, r24
    1e32:	9a 70       	andi	r25, 0x0A	; 10
    1e34:	09 f0       	breq	.+2      	; 0x1e38 <nwkRxTaskHandler+0xa4>
    1e36:	c3 c1       	rjmp	.+902    	; 0x21be <__EEPROM_REGION_LENGTH__+0x1be>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    1e38:	25 81       	ldd	r18, Z+5	; 0x05
    1e3a:	36 81       	ldd	r19, Z+6	; 0x06
    1e3c:	2f 3f       	cpi	r18, 0xFF	; 255
    1e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e40:	91 f4       	brne	.+36     	; 0x1e66 <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1e42:	d8 01       	movw	r26, r16
    1e44:	1f 96       	adiw	r26, 0x0f	; 15
    1e46:	8d 91       	ld	r24, X+
    1e48:	9c 91       	ld	r25, X
    1e4a:	50 97       	sbiw	r26, 0x10	; 16
    1e4c:	f7 01       	movw	r30, r14
    1e4e:	20 81       	ld	r18, Z
    1e50:	31 81       	ldd	r19, Z+1	; 0x01
    1e52:	28 17       	cp	r18, r24
    1e54:	39 07       	cpc	r19, r25
    1e56:	19 f0       	breq	.+6      	; 0x1e5e <nwkRxTaskHandler+0xca>
    1e58:	01 96       	adiw	r24, 0x01	; 1
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <nwkRxTaskHandler+0xca>
    1e5c:	b0 c1       	rjmp	.+864    	; 0x21be <__EEPROM_REGION_LENGTH__+0x1be>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1e5e:	e2 e2       	ldi	r30, 0x22	; 34
    1e60:	d8 01       	movw	r26, r16
    1e62:	ec 93       	st	X, r30
    1e64:	ac c1       	rjmp	.+856    	; 0x21be <__EEPROM_REGION_LENGTH__+0x1be>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    1e66:	d8 01       	movw	r26, r16
    1e68:	1f 96       	adiw	r26, 0x0f	; 15
    1e6a:	2d 91       	ld	r18, X+
    1e6c:	3c 91       	ld	r19, X
    1e6e:	50 97       	sbiw	r26, 0x10	; 16
    1e70:	2f 3f       	cpi	r18, 0xFF	; 255
    1e72:	3f 4f       	sbci	r19, 0xFF	; 255
    1e74:	11 f4       	brne	.+4      	; 0x1e7a <nwkRxTaskHandler+0xe6>
    1e76:	80 fd       	sbrc	r24, 0
    1e78:	a2 c1       	rjmp	.+836    	; 0x21be <__EEPROM_REGION_LENGTH__+0x1be>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    1e7a:	f7 01       	movw	r30, r14
    1e7c:	20 81       	ld	r18, Z
    1e7e:	31 81       	ldd	r19, Z+1	; 0x01
    1e80:	d8 01       	movw	r26, r16
    1e82:	1d 96       	adiw	r26, 0x0d	; 13
    1e84:	8d 91       	ld	r24, X+
    1e86:	9c 91       	ld	r25, X
    1e88:	1e 97       	sbiw	r26, 0x0e	; 14
    1e8a:	28 17       	cp	r18, r24
    1e8c:	39 07       	cpc	r19, r25
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <nwkRxTaskHandler+0xfe>
    1e90:	96 c1       	rjmp	.+812    	; 0x21be <__EEPROM_REGION_LENGTH__+0x1be>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    1e92:	c8 01       	movw	r24, r16
    1e94:	f6 dd       	rcall	.-1044   	; 0x1a82 <nwkRouteFrameReceived>
    1e96:	e7 ea       	ldi	r30, 0xA7	; 167
    1e98:	f1 e1       	ldi	r31, 0x11	; 17
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    1e9e:	83 2c       	mov	r8, r3
    1ea0:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    1ea2:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
    1ea4:	44 81       	ldd	r20, Z+4	; 0x04
    1ea6:	44 23       	and	r20, r20
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <nwkRxTaskHandler+0x118>
    1eaa:	74 c0       	rjmp	.+232    	; 0x1f94 <nwkRxTaskHandler+0x200>
    1eac:	d8 01       	movw	r26, r16
    1eae:	1d 96       	adiw	r26, 0x0d	; 13
    1eb0:	6d 91       	ld	r22, X+
    1eb2:	7c 91       	ld	r23, X
    1eb4:	1e 97       	sbiw	r26, 0x0e	; 14
    1eb6:	40 81       	ld	r20, Z
    1eb8:	51 81       	ldd	r21, Z+1	; 0x01
    1eba:	64 17       	cp	r22, r20
    1ebc:	75 07       	cpc	r23, r21
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <nwkRxTaskHandler+0x12e>
    1ec0:	6a c0       	rjmp	.+212    	; 0x1f96 <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    1ec2:	1c 96       	adiw	r26, 0x0c	; 12
    1ec4:	8c 91       	ld	r24, X
    1ec6:	1c 97       	sbiw	r26, 0x0c	; 12
    1ec8:	f9 01       	movw	r30, r18
    1eca:	ee 0f       	add	r30, r30
    1ecc:	ff 1f       	adc	r31, r31
    1ece:	ee 0f       	add	r30, r30
    1ed0:	ff 1f       	adc	r31, r31
    1ed2:	e2 0f       	add	r30, r18
    1ed4:	f3 1f       	adc	r31, r19
    1ed6:	e9 55       	subi	r30, 0x59	; 89
    1ed8:	fe 4e       	sbci	r31, 0xEE	; 238
    1eda:	92 81       	ldd	r25, Z+2	; 0x02
    1edc:	98 1b       	sub	r25, r24

      if (diff < 8)
    1ede:	98 30       	cpi	r25, 0x08	; 8
    1ee0:	08 f0       	brcs	.+2      	; 0x1ee4 <nwkRxTaskHandler+0x150>
    1ee2:	3e c0       	rjmp	.+124    	; 0x1f60 <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
    1ee4:	f9 01       	movw	r30, r18
    1ee6:	ee 0f       	add	r30, r30
    1ee8:	ff 1f       	adc	r31, r31
    1eea:	ee 0f       	add	r30, r30
    1eec:	ff 1f       	adc	r31, r31
    1eee:	e2 0f       	add	r30, r18
    1ef0:	f3 1f       	adc	r31, r19
    1ef2:	e9 55       	subi	r30, 0x59	; 89
    1ef4:	fe 4e       	sbci	r31, 0xEE	; 238
    1ef6:	83 81       	ldd	r24, Z+3	; 0x03
    1ef8:	48 2f       	mov	r20, r24
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	09 2e       	mov	r0, r25
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <nwkRxTaskHandler+0x170>
    1f00:	55 95       	asr	r21
    1f02:	47 95       	ror	r20
    1f04:	0a 94       	dec	r0
    1f06:	e2 f7       	brpl	.-8      	; 0x1f00 <nwkRxTaskHandler+0x16c>
    1f08:	40 ff       	sbrs	r20, 0
    1f0a:	17 c0       	rjmp	.+46     	; 0x1f3a <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    1f0c:	f7 01       	movw	r30, r14
    1f0e:	20 81       	ld	r18, Z
    1f10:	31 81       	ldd	r19, Z+1	; 0x01
    1f12:	17 96       	adiw	r26, 0x07	; 7
    1f14:	8d 91       	ld	r24, X+
    1f16:	9c 91       	ld	r25, X
    1f18:	18 97       	sbiw	r26, 0x08	; 8
    1f1a:	28 17       	cp	r18, r24
    1f1c:	39 07       	cpc	r19, r25
    1f1e:	09 f0       	breq	.+2      	; 0x1f22 <nwkRxTaskHandler+0x18e>
    1f20:	4e c1       	rjmp	.+668    	; 0x21be <__EEPROM_REGION_LENGTH__+0x1be>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
    1f22:	1b 96       	adiw	r26, 0x0b	; 11
    1f24:	6c 91       	ld	r22, X
    1f26:	1b 97       	sbiw	r26, 0x0b	; 11
    1f28:	63 fb       	bst	r22, 3
    1f2a:	66 27       	eor	r22, r22
    1f2c:	60 f9       	bld	r22, 0
    1f2e:	1f 96       	adiw	r26, 0x0f	; 15
    1f30:	8d 91       	ld	r24, X+
    1f32:	9c 91       	ld	r25, X
    1f34:	50 97       	sbiw	r26, 0x10	; 16
    1f36:	a0 dd       	rcall	.-1216   	; 0x1a78 <nwkRouteRemove>
    1f38:	42 c1       	rjmp	.+644    	; 0x21be <__EEPROM_REGION_LENGTH__+0x1be>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    1f3a:	f9 01       	movw	r30, r18
    1f3c:	ee 0f       	add	r30, r30
    1f3e:	ff 1f       	adc	r31, r31
    1f40:	ee 0f       	add	r30, r30
    1f42:	ff 1f       	adc	r31, r31
    1f44:	2e 0f       	add	r18, r30
    1f46:	3f 1f       	adc	r19, r31
    1f48:	f9 01       	movw	r30, r18
    1f4a:	e9 55       	subi	r30, 0x59	; 89
    1f4c:	fe 4e       	sbci	r31, 0xEE	; 238
    1f4e:	96 01       	movw	r18, r12
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <nwkRxTaskHandler+0x1c2>
    1f52:	22 0f       	add	r18, r18
    1f54:	33 1f       	adc	r19, r19
    1f56:	9a 95       	dec	r25
    1f58:	e2 f7       	brpl	.-8      	; 0x1f52 <nwkRxTaskHandler+0x1be>
    1f5a:	82 2b       	or	r24, r18
    1f5c:	83 83       	std	Z+3, r24	; 0x03
    1f5e:	36 c1       	rjmp	.+620    	; 0x21cc <__EEPROM_REGION_LENGTH__+0x1cc>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    1f60:	f9 01       	movw	r30, r18
    1f62:	ee 0f       	add	r30, r30
    1f64:	ff 1f       	adc	r31, r31
    1f66:	ee 0f       	add	r30, r30
    1f68:	ff 1f       	adc	r31, r31
    1f6a:	2e 0f       	add	r18, r30
    1f6c:	3f 1f       	adc	r19, r31
    1f6e:	f9 01       	movw	r30, r18
    1f70:	e9 55       	subi	r30, 0x59	; 89
    1f72:	fe 4e       	sbci	r31, 0xEE	; 238
    1f74:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    1f76:	83 81       	ldd	r24, Z+3	; 0x03
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	91 95       	neg	r25
    1f7e:	a9 01       	movw	r20, r18
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <nwkRxTaskHandler+0x1f2>
    1f82:	44 0f       	add	r20, r20
    1f84:	55 1f       	adc	r21, r21
    1f86:	9a 95       	dec	r25
    1f88:	e2 f7       	brpl	.-8      	; 0x1f82 <nwkRxTaskHandler+0x1ee>
    1f8a:	ca 01       	movw	r24, r20
    1f8c:	81 60       	ori	r24, 0x01	; 1
    1f8e:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    1f90:	54 82       	std	Z+4, r5	; 0x04
    1f92:	1c c1       	rjmp	.+568    	; 0x21cc <__EEPROM_REGION_LENGTH__+0x1cc>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
    1f94:	4f 01       	movw	r8, r30
    1f96:	01 96       	adiw	r24, 0x01	; 1
    1f98:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1f9a:	82 33       	cpi	r24, 0x32	; 50
    1f9c:	91 05       	cpc	r25, r1
    1f9e:	09 f0       	breq	.+2      	; 0x1fa2 <nwkRxTaskHandler+0x20e>
    1fa0:	80 cf       	rjmp	.-256    	; 0x1ea2 <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    1fa2:	81 14       	cp	r8, r1
    1fa4:	91 04       	cpc	r9, r1
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <nwkRxTaskHandler+0x216>
    1fa8:	0a c1       	rjmp	.+532    	; 0x21be <__EEPROM_REGION_LENGTH__+0x1be>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    1faa:	d8 01       	movw	r26, r16
    1fac:	1d 96       	adiw	r26, 0x0d	; 13
    1fae:	8d 91       	ld	r24, X+
    1fb0:	9c 91       	ld	r25, X
    1fb2:	1e 97       	sbiw	r26, 0x0e	; 14
    1fb4:	f4 01       	movw	r30, r8
    1fb6:	91 83       	std	Z+1, r25	; 0x01
    1fb8:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    1fba:	1c 96       	adiw	r26, 0x0c	; 12
    1fbc:	8c 91       	ld	r24, X
    1fbe:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    1fc0:	43 82       	std	Z+3, r4	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1fc2:	54 82       	std	Z+4, r5	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    1fc4:	89 e9       	ldi	r24, 0x99	; 153
    1fc6:	91 e1       	ldi	r25, 0x11	; 17
    1fc8:	1f d5       	rcall	.+2622   	; 0x2a08 <SYS_TimerStart>
    1fca:	00 c1       	rjmp	.+512    	; 0x21cc <__EEPROM_REGION_LENGTH__+0x1cc>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1fcc:	d7 01       	movw	r26, r14
    1fce:	2d 91       	ld	r18, X+
    1fd0:	3c 91       	ld	r19, X
    1fd2:	f8 01       	movw	r30, r16
    1fd4:	87 85       	ldd	r24, Z+15	; 0x0f
    1fd6:	90 89       	ldd	r25, Z+16	; 0x10
    1fd8:	28 17       	cp	r18, r24
    1fda:	39 07       	cpc	r19, r25
    1fdc:	81 f0       	breq	.+32     	; 0x1ffe <nwkRxTaskHandler+0x26a>
    1fde:	43 85       	ldd	r20, Z+11	; 0x0b
    1fe0:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    1fe2:	0b c0       	rjmp	.+22     	; 0x1ffa <nwkRxTaskHandler+0x266>
    1fe4:	c8 01       	movw	r24, r16
    1fe6:	e1 d1       	rcall	.+962    	; 0x23aa <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1fe8:	d7 01       	movw	r26, r14
    1fea:	2d 91       	ld	r18, X+
    1fec:	3c 91       	ld	r19, X
    1fee:	f8 01       	movw	r30, r16
    1ff0:	87 85       	ldd	r24, Z+15	; 0x0f
    1ff2:	90 89       	ldd	r25, Z+16	; 0x10
    1ff4:	28 17       	cp	r18, r24
    1ff6:	39 07       	cpc	r19, r25
    1ff8:	11 f0       	breq	.+4      	; 0x1ffe <nwkRxTaskHandler+0x26a>
    1ffa:	01 96       	adiw	r24, 0x01	; 1
    1ffc:	21 f4       	brne	.+8      	; 0x2006 <__EEPROM_REGION_LENGTH__+0x6>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1ffe:	e2 e2       	ldi	r30, 0x22	; 34
    2000:	d8 01       	movw	r26, r16
    2002:	ec 93       	st	X, r30
    2004:	dc c0       	rjmp	.+440    	; 0x21be <__EEPROM_REGION_LENGTH__+0x1be>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    2006:	d8 01       	movw	r26, r16
    2008:	17 96       	adiw	r26, 0x07	; 7
    200a:	8d 91       	ld	r24, X+
    200c:	9c 91       	ld	r25, X
    200e:	18 97       	sbiw	r26, 0x08	; 8
    2010:	82 17       	cp	r24, r18
    2012:	93 07       	cpc	r25, r19
    2014:	09 f0       	breq	.+2      	; 0x2018 <__EEPROM_REGION_LENGTH__+0x18>
    2016:	d3 c0       	rjmp	.+422    	; 0x21be <__EEPROM_REGION_LENGTH__+0x1be>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    2018:	e3 e2       	ldi	r30, 0x23	; 35
    201a:	ec 93       	st	X, r30
    201c:	d0 c0       	rjmp	.+416    	; 0x21be <__EEPROM_REGION_LENGTH__+0x1be>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    201e:	10 92 a6 11 	sts	0x11A6, r1	; 0x8011a6 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    2022:	d8 01       	movw	r26, r16
    2024:	51 96       	adiw	r26, 0x11	; 17
    2026:	8c 91       	ld	r24, X
    2028:	51 97       	sbiw	r26, 0x11	; 17
    202a:	82 95       	swap	r24
    202c:	8f 70       	andi	r24, 0x0F	; 15
    202e:	e8 2f       	mov	r30, r24
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	ee 0f       	add	r30, r30
    2034:	ff 1f       	adc	r31, r31
    2036:	e6 5b       	subi	r30, 0xB6	; 182
    2038:	fc 4e       	sbci	r31, 0xEC	; 236
    203a:	01 90       	ld	r0, Z+
    203c:	f0 81       	ld	r31, Z
    203e:	e0 2d       	mov	r30, r0
    2040:	30 97       	sbiw	r30, 0x00	; 0
    2042:	09 f4       	brne	.+2      	; 0x2046 <__EEPROM_REGION_LENGTH__+0x46>
    2044:	60 c0       	rjmp	.+192    	; 0x2106 <__EEPROM_REGION_LENGTH__+0x106>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    2046:	1d 96       	adiw	r26, 0x0d	; 13
    2048:	2d 91       	ld	r18, X+
    204a:	3c 91       	ld	r19, X
    204c:	1e 97       	sbiw	r26, 0x0e	; 14
    204e:	3a 83       	std	Y+2, r19	; 0x02
    2050:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    2052:	1f 96       	adiw	r26, 0x0f	; 15
    2054:	4d 91       	ld	r20, X+
    2056:	5c 91       	ld	r21, X
    2058:	50 97       	sbiw	r26, 0x10	; 16
    205a:	5c 83       	std	Y+4, r21	; 0x04
    205c:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    205e:	51 96       	adiw	r26, 0x11	; 17
    2060:	9c 91       	ld	r25, X
    2062:	51 97       	sbiw	r26, 0x11	; 17
    2064:	9f 70       	andi	r25, 0x0F	; 15
    2066:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    2068:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
    206a:	af 57       	subi	r26, 0x7F	; 127
    206c:	bf 4f       	sbci	r27, 0xFF	; 255
    206e:	8d 91       	ld	r24, X+
    2070:	9c 91       	ld	r25, X
    2072:	99 87       	std	Y+9, r25	; 0x09
    2074:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    2076:	b8 01       	movw	r22, r16
    2078:	6e 5f       	subi	r22, 0xFE	; 254
    207a:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
    207c:	86 1b       	sub	r24, r22
    207e:	97 0b       	sbc	r25, r23
    2080:	d8 01       	movw	r26, r16
    2082:	11 96       	adiw	r26, 0x01	; 1
    2084:	9c 91       	ld	r25, X
    2086:	11 97       	sbiw	r26, 0x01	; 1
    2088:	98 1b       	sub	r25, r24
    208a:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
    208c:	ad 57       	subi	r26, 0x7D	; 125
    208e:	bf 4f       	sbci	r27, 0xFF	; 255
    2090:	8c 91       	ld	r24, X
    2092:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    2094:	11 96       	adiw	r26, 0x01	; 1
    2096:	8c 91       	ld	r24, X
    2098:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    209a:	d8 01       	movw	r26, r16
    209c:	1b 96       	adiw	r26, 0x0b	; 11
    209e:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    20a0:	69 2f       	mov	r22, r25
    20a2:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    20a4:	92 fd       	sbrc	r25, 2
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <__EEPROM_REGION_LENGTH__+0xac>
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	01 c0       	rjmp	.+2      	; 0x20ae <__EEPROM_REGION_LENGTH__+0xae>
    20ac:	80 e2       	ldi	r24, 0x20	; 32
    20ae:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    20b0:	93 fd       	sbrc	r25, 3
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <__EEPROM_REGION_LENGTH__+0xb8>
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	01 c0       	rjmp	.+2      	; 0x20ba <__EEPROM_REGION_LENGTH__+0xba>
    20b8:	90 e4       	ldi	r25, 0x40	; 64
    20ba:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    20bc:	4f 3f       	cpi	r20, 0xFF	; 255
    20be:	5f 4f       	sbci	r21, 0xFF	; 255
    20c0:	11 f0       	breq	.+4      	; 0x20c6 <__EEPROM_REGION_LENGTH__+0xc6>
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	01 c0       	rjmp	.+2      	; 0x20c8 <__EEPROM_REGION_LENGTH__+0xc8>
    20c6:	96 2d       	mov	r25, r6
    20c8:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    20ca:	d8 01       	movw	r26, r16
    20cc:	19 96       	adiw	r26, 0x09	; 9
    20ce:	4d 91       	ld	r20, X+
    20d0:	5c 91       	ld	r21, X
    20d2:	1a 97       	sbiw	r26, 0x0a	; 10
    20d4:	24 17       	cp	r18, r20
    20d6:	35 07       	cpc	r19, r21
    20d8:	11 f0       	breq	.+4      	; 0x20de <__EEPROM_REGION_LENGTH__+0xde>
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	01 c0       	rjmp	.+2      	; 0x20e0 <__EEPROM_REGION_LENGTH__+0xe0>
    20de:	97 2d       	mov	r25, r7
    20e0:	89 2b       	or	r24, r25
    20e2:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    20e4:	d8 01       	movw	r26, r16
    20e6:	15 96       	adiw	r26, 0x05	; 5
    20e8:	2d 91       	ld	r18, X+
    20ea:	3c 91       	ld	r19, X
    20ec:	16 97       	sbiw	r26, 0x06	; 6
    20ee:	2f 3f       	cpi	r18, 0xFF	; 255
    20f0:	3f 4f       	sbci	r19, 0xFF	; 255
    20f2:	11 f0       	breq	.+4      	; 0x20f8 <__EEPROM_REGION_LENGTH__+0xf8>
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	01 c0       	rjmp	.+2      	; 0x20fa <__EEPROM_REGION_LENGTH__+0xfa>
    20f8:	9a 2d       	mov	r25, r10
    20fa:	89 2b       	or	r24, r25
    20fc:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    20fe:	ce 01       	movw	r24, r28
    2100:	01 96       	adiw	r24, 0x01	; 1
    2102:	19 95       	eicall
    2104:	01 c0       	rjmp	.+2      	; 0x2108 <__EEPROM_REGION_LENGTH__+0x108>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    2106:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    2108:	f8 01       	movw	r30, r16
    210a:	93 85       	ldd	r25, Z+11	; 0x0b
    210c:	90 ff       	sbrs	r25, 0
    ack = false;
    210e:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2110:	d8 01       	movw	r26, r16
    2112:	17 96       	adiw	r26, 0x07	; 7
    2114:	2d 91       	ld	r18, X+
    2116:	3c 91       	ld	r19, X
    2118:	18 97       	sbiw	r26, 0x08	; 8
    211a:	2f 3f       	cpi	r18, 0xFF	; 255
    211c:	3f 4f       	sbci	r19, 0xFF	; 255
    211e:	69 f4       	brne	.+26     	; 0x213a <__EEPROM_REGION_LENGTH__+0x13a>
    2120:	f7 01       	movw	r30, r14
    2122:	40 81       	ld	r20, Z
    2124:	51 81       	ldd	r21, Z+1	; 0x01
    2126:	d8 01       	movw	r26, r16
    2128:	1f 96       	adiw	r26, 0x0f	; 15
    212a:	2d 91       	ld	r18, X+
    212c:	3c 91       	ld	r19, X
    212e:	50 97       	sbiw	r26, 0x10	; 16
    2130:	42 17       	cp	r20, r18
    2132:	53 07       	cpc	r21, r19
    2134:	11 f4       	brne	.+4      	; 0x213a <__EEPROM_REGION_LENGTH__+0x13a>
      nwkIb.addr == frame->header.nwkDstAddr &&
    2136:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    2138:	84 2d       	mov	r24, r4

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    213a:	f8 01       	movw	r30, r16
    213c:	25 81       	ldd	r18, Z+5	; 0x05
    213e:	36 81       	ldd	r19, Z+6	; 0x06
    2140:	2f 3f       	cpi	r18, 0xFF	; 255
    2142:	3f 4f       	sbci	r19, 0xFF	; 255
    2144:	a1 f1       	breq	.+104    	; 0x21ae <__EEPROM_REGION_LENGTH__+0x1ae>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    2146:	d7 01       	movw	r26, r14
    2148:	2d 91       	ld	r18, X+
    214a:	3c 91       	ld	r19, X
    214c:	2f 3f       	cpi	r18, 0xFF	; 255
    214e:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    2150:	71 f1       	breq	.+92     	; 0x21ae <__EEPROM_REGION_LENGTH__+0x1ae>
    2152:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    2154:	61 f1       	breq	.+88     	; 0x21ae <__EEPROM_REGION_LENGTH__+0x1ae>
    2156:	8e db       	rcall	.-2276   	; 0x1874 <nwkFrameAlloc>
    2158:	4c 01       	movw	r8, r24
    215a:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    215c:	41 f1       	breq	.+80     	; 0x21ae <__EEPROM_REGION_LENGTH__+0x1ae>
    215e:	f0 db       	rcall	.-2080   	; 0x1940 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    2160:	f4 01       	movw	r30, r8
    2162:	81 81       	ldd	r24, Z+1	; 0x01
    2164:	8d 5f       	subi	r24, 0xFD	; 253
    2166:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    2168:	e9 57       	subi	r30, 0x79	; 121
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	11 82       	std	Z+1, r1	; 0x01
    216e:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    2170:	d8 01       	movw	r26, r16
    2172:	1b 96       	adiw	r26, 0x0b	; 11
    2174:	8c 91       	ld	r24, X
    2176:	1b 97       	sbiw	r26, 0x0b	; 11
    2178:	86 95       	lsr	r24
    217a:	81 70       	andi	r24, 0x01	; 1
    217c:	f4 01       	movw	r30, r8
    217e:	93 85       	ldd	r25, Z+11	; 0x0b
    2180:	80 fb       	bst	r24, 0
    2182:	91 f9       	bld	r25, 1
    2184:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    2186:	1d 96       	adiw	r26, 0x0d	; 13
    2188:	8d 91       	ld	r24, X+
    218a:	9c 91       	ld	r25, X
    218c:	1e 97       	sbiw	r26, 0x0e	; 14
    218e:	90 8b       	std	Z+16, r25	; 0x10
    2190:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    2192:	ef 57       	subi	r30, 0x7F	; 127
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	01 90       	ld	r0, Z+
    2198:	f0 81       	ld	r31, Z
    219a:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    219c:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    219e:	80 91 a6 11 	lds	r24, 0x11A6	; 0x8011a6 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    21a2:	82 83       	std	Z+2, r24	; 0x02
    21a4:	1c 96       	adiw	r26, 0x0c	; 12
    21a6:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    21a8:	81 83       	std	Z+1, r24	; 0x01
    21aa:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    21ac:	b0 d0       	rcall	.+352    	; 0x230e <nwkTxFrame>
    21ae:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    21b0:	bc 92       	st	X, r11
    21b2:	05 c0       	rjmp	.+10     	; 0x21be <__EEPROM_REGION_LENGTH__+0x1be>
    21b4:	c8 01       	movw	r24, r16
      } break;
    21b6:	1a dd       	rcall	.-1484   	; 0x1bec <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <__EEPROM_REGION_LENGTH__+0x1be>
    21ba:	c8 01       	movw	r24, r16
    21bc:	92 db       	rcall	.-2268   	; 0x18e2 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    21be:	c8 01       	movw	r24, r16
    21c0:	9a db       	rcall	.-2252   	; 0x18f6 <nwkFrameNext>
    21c2:	8c 01       	movw	r16, r24
    21c4:	89 2b       	or	r24, r25
    21c6:	09 f0       	breq	.+2      	; 0x21ca <__EEPROM_REGION_LENGTH__+0x1ca>
    21c8:	20 ce       	rjmp	.-960    	; 0x1e0a <nwkRxTaskHandler+0x76>
    21ca:	07 c0       	rjmp	.+14     	; 0x21da <__EEPROM_REGION_LENGTH__+0x1da>
    21cc:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    21ce:	87 81       	ldd	r24, Z+7	; 0x07
    21d0:	90 85       	ldd	r25, Z+8	; 0x08
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	09 f0       	breq	.+2      	; 0x21d8 <__EEPROM_REGION_LENGTH__+0x1d8>
    21d6:	08 cf       	rjmp	.-496    	; 0x1fe8 <nwkRxTaskHandler+0x254>
    21d8:	f9 ce       	rjmp	.-526    	; 0x1fcc <nwkRxTaskHandler+0x238>
    21da:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	df 91       	pop	r29
    21e8:	cf 91       	pop	r28
    21ea:	1f 91       	pop	r17
    21ec:	0f 91       	pop	r16
    21ee:	ff 90       	pop	r15
    21f0:	ef 90       	pop	r14
    21f2:	df 90       	pop	r13
    21f4:	cf 90       	pop	r12
    21f6:	bf 90       	pop	r11
    21f8:	af 90       	pop	r10
    21fa:	9f 90       	pop	r9
    21fc:	8f 90       	pop	r8
    21fe:	7f 90       	pop	r7
    2200:	6f 90       	pop	r6
    2202:	5f 90       	pop	r5
    2204:	4f 90       	pop	r4
    2206:	3f 90       	pop	r3
    2208:	2f 90       	pop	r2
    220a:	08 95       	ret

0000220c <nwkTxDelayTimerHandler>:
    220c:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    220e:	ff 92       	push	r15
    2210:	0f 93       	push	r16
    2212:	1f 93       	push	r17
    2214:	cf 93       	push	r28
    2216:	7c 01       	movw	r14, r24
    2218:	10 e0       	ldi	r17, 0x00	; 0
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	01 e0       	ldi	r16, 0x01	; 1
    2220:	c3 e1       	ldi	r28, 0x13	; 19
    2222:	13 c0       	rjmp	.+38     	; 0x224a <nwkTxDelayTimerHandler+0x3e>
    2224:	fc 01       	movw	r30, r24
    2226:	20 81       	ld	r18, Z
    2228:	21 31       	cpi	r18, 0x11	; 17
    222a:	79 f4       	brne	.+30     	; 0x224a <nwkTxDelayTimerHandler+0x3e>
    222c:	ec 57       	subi	r30, 0x7C	; 124
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	20 81       	ld	r18, Z
    2232:	31 81       	ldd	r19, Z+1	; 0x01
    2234:	21 50       	subi	r18, 0x01	; 1
    2236:	31 09       	sbc	r19, r1
    2238:	31 83       	std	Z+1, r19	; 0x01
    223a:	20 83       	st	Z, r18
    223c:	23 2b       	or	r18, r19
    223e:	21 f4       	brne	.+8      	; 0x2248 <nwkTxDelayTimerHandler+0x3c>
    2240:	fc 01       	movw	r30, r24
    2242:	c0 83       	st	Z, r28
    2244:	10 2f       	mov	r17, r16
    2246:	01 c0       	rjmp	.+2      	; 0x224a <nwkTxDelayTimerHandler+0x3e>
    2248:	10 2f       	mov	r17, r16
    224a:	55 db       	rcall	.-2390   	; 0x18f6 <nwkFrameNext>
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	51 f7       	brne	.-44     	; 0x2224 <nwkTxDelayTimerHandler+0x18>
    2250:	11 23       	and	r17, r17
    2252:	11 f0       	breq	.+4      	; 0x2258 <nwkTxDelayTimerHandler+0x4c>
    2254:	c7 01       	movw	r24, r14
    2256:	d8 d3       	rcall	.+1968   	; 0x2a08 <SYS_TimerStart>
    2258:	cf 91       	pop	r28
    225a:	1f 91       	pop	r17
    225c:	0f 91       	pop	r16
    225e:	ff 90       	pop	r15
    2260:	ef 90       	pop	r14
    2262:	08 95       	ret

00002264 <nwkTxAckWaitTimerHandler>:
    2264:	ef 92       	push	r14
    2266:	ff 92       	push	r15
    2268:	0f 93       	push	r16
    226a:	1f 93       	push	r17
    226c:	cf 93       	push	r28
    226e:	df 93       	push	r29
    2270:	7c 01       	movw	r14, r24
    2272:	10 e0       	ldi	r17, 0x00	; 0
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	01 e0       	ldi	r16, 0x01	; 1
    227a:	d7 e1       	ldi	r29, 0x17	; 23
    227c:	c0 e1       	ldi	r28, 0x10	; 16
    227e:	16 c0       	rjmp	.+44     	; 0x22ac <nwkTxAckWaitTimerHandler+0x48>
    2280:	fc 01       	movw	r30, r24
    2282:	20 81       	ld	r18, Z
    2284:	26 31       	cpi	r18, 0x16	; 22
    2286:	91 f4       	brne	.+36     	; 0x22ac <nwkTxAckWaitTimerHandler+0x48>
    2288:	ec 57       	subi	r30, 0x7C	; 124
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	20 81       	ld	r18, Z
    228e:	31 81       	ldd	r19, Z+1	; 0x01
    2290:	21 50       	subi	r18, 0x01	; 1
    2292:	31 09       	sbc	r19, r1
    2294:	31 83       	std	Z+1, r19	; 0x01
    2296:	20 83       	st	Z, r18
    2298:	23 2b       	or	r18, r19
    229a:	39 f4       	brne	.+14     	; 0x22aa <nwkTxAckWaitTimerHandler+0x46>
    229c:	fc 01       	movw	r30, r24
    229e:	d0 83       	st	Z, r29
    22a0:	ed 57       	subi	r30, 0x7D	; 125
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	c0 83       	st	Z, r28
    22a6:	10 2f       	mov	r17, r16
    22a8:	01 c0       	rjmp	.+2      	; 0x22ac <nwkTxAckWaitTimerHandler+0x48>
    22aa:	10 2f       	mov	r17, r16
    22ac:	24 db       	rcall	.-2488   	; 0x18f6 <nwkFrameNext>
    22ae:	00 97       	sbiw	r24, 0x00	; 0
    22b0:	39 f7       	brne	.-50     	; 0x2280 <nwkTxAckWaitTimerHandler+0x1c>
    22b2:	11 23       	and	r17, r17
    22b4:	11 f0       	breq	.+4      	; 0x22ba <nwkTxAckWaitTimerHandler+0x56>
    22b6:	c7 01       	movw	r24, r14
    22b8:	a7 d3       	rcall	.+1870   	; 0x2a08 <SYS_TimerStart>
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	ff 90       	pop	r15
    22c4:	ef 90       	pop	r14
    22c6:	08 95       	ret

000022c8 <nwkTxInit>:
    22c8:	10 92 bc 12 	sts	0x12BC, r1	; 0x8012bc <nwkTxPhyActiveFrame+0x1>
    22cc:	10 92 bb 12 	sts	0x12BB, r1	; 0x8012bb <nwkTxPhyActiveFrame>
    22d0:	ee ea       	ldi	r30, 0xAE	; 174
    22d2:	f2 e1       	ldi	r31, 0x12	; 18
    22d4:	82 e3       	ldi	r24, 0x32	; 50
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	a0 e0       	ldi	r26, 0x00	; 0
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	86 83       	std	Z+6, r24	; 0x06
    22de:	97 83       	std	Z+7, r25	; 0x07
    22e0:	a0 87       	std	Z+8, r26	; 0x08
    22e2:	b1 87       	std	Z+9, r27	; 0x09
    22e4:	12 86       	std	Z+10, r1	; 0x0a
    22e6:	82 e3       	ldi	r24, 0x32	; 50
    22e8:	91 e1       	ldi	r25, 0x11	; 17
    22ea:	94 87       	std	Z+12, r25	; 0x0c
    22ec:	83 87       	std	Z+11, r24	; 0x0b
    22ee:	e1 ea       	ldi	r30, 0xA1	; 161
    22f0:	f2 e1       	ldi	r31, 0x12	; 18
    22f2:	8a e0       	ldi	r24, 0x0A	; 10
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	a0 e0       	ldi	r26, 0x00	; 0
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	86 83       	std	Z+6, r24	; 0x06
    22fc:	97 83       	std	Z+7, r25	; 0x07
    22fe:	a0 87       	std	Z+8, r26	; 0x08
    2300:	b1 87       	std	Z+9, r27	; 0x09
    2302:	12 86       	std	Z+10, r1	; 0x0a
    2304:	86 e0       	ldi	r24, 0x06	; 6
    2306:	91 e1       	ldi	r25, 0x11	; 17
    2308:	94 87       	std	Z+12, r25	; 0x0c
    230a:	83 87       	std	Z+11, r24	; 0x0b
    230c:	08 95       	ret

0000230e <nwkTxFrame>:
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	ec 01       	movw	r28, r24
    2314:	fc 01       	movw	r30, r24
    2316:	ea 57       	subi	r30, 0x7A	; 122
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	80 81       	ld	r24, Z
    231c:	81 ff       	sbrs	r24, 1
    231e:	03 c0       	rjmp	.+6      	; 0x2326 <nwkTxFrame+0x18>
    2320:	92 e1       	ldi	r25, 0x12	; 18
    2322:	98 83       	st	Y, r25
    2324:	02 c0       	rjmp	.+4      	; 0x232a <nwkTxFrame+0x1c>
    2326:	92 e1       	ldi	r25, 0x12	; 18
    2328:	98 83       	st	Y, r25
    232a:	fe 01       	movw	r30, r28
    232c:	ed 57       	subi	r30, 0x7D	; 125
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	10 82       	st	Z, r1
    2332:	80 ff       	sbrs	r24, 0
    2334:	05 c0       	rjmp	.+10     	; 0x2340 <nwkTxFrame+0x32>
    2336:	2f ef       	ldi	r18, 0xFF	; 255
    2338:	3f ef       	ldi	r19, 0xFF	; 255
    233a:	3e 83       	std	Y+6, r19	; 0x06
    233c:	2d 83       	std	Y+5, r18	; 0x05
    233e:	06 c0       	rjmp	.+12     	; 0x234c <nwkTxFrame+0x3e>
    2340:	20 91 46 13 	lds	r18, 0x1346	; 0x801346 <nwkIb+0x2>
    2344:	30 91 47 13 	lds	r19, 0x1347	; 0x801347 <nwkIb+0x3>
    2348:	3e 83       	std	Y+6, r19	; 0x06
    234a:	2d 83       	std	Y+5, r18	; 0x05
    234c:	85 70       	andi	r24, 0x05	; 5
    234e:	19 f4       	brne	.+6      	; 0x2356 <nwkTxFrame+0x48>
    2350:	ce 01       	movw	r24, r28
    2352:	2d dc       	rcall	.-1958   	; 0x1bae <nwkRoutePrepareTx>
    2354:	04 c0       	rjmp	.+8      	; 0x235e <nwkTxFrame+0x50>
    2356:	8f 85       	ldd	r24, Y+15	; 0x0f
    2358:	98 89       	ldd	r25, Y+16	; 0x10
    235a:	98 87       	std	Y+8, r25	; 0x08
    235c:	8f 83       	std	Y+7, r24	; 0x07
    235e:	e4 e4       	ldi	r30, 0x44	; 68
    2360:	f3 e1       	ldi	r31, 0x13	; 19
    2362:	80 81       	ld	r24, Z
    2364:	91 81       	ldd	r25, Z+1	; 0x01
    2366:	9a 87       	std	Y+10, r25	; 0x0a
    2368:	89 87       	std	Y+9, r24	; 0x09
    236a:	85 81       	ldd	r24, Z+5	; 0x05
    236c:	8f 5f       	subi	r24, 0xFF	; 255
    236e:	85 83       	std	Z+5, r24	; 0x05
    2370:	8c 83       	std	Y+4, r24	; 0x04
    2372:	8f 81       	ldd	r24, Y+7	; 0x07
    2374:	98 85       	ldd	r25, Y+8	; 0x08
    2376:	01 96       	adiw	r24, 0x01	; 1
    2378:	69 f4       	brne	.+26     	; 0x2394 <nwkTxFrame+0x86>
    237a:	81 e4       	ldi	r24, 0x41	; 65
    237c:	98 e8       	ldi	r25, 0x88	; 136
    237e:	9b 83       	std	Y+3, r25	; 0x03
    2380:	8a 83       	std	Y+2, r24	; 0x02
    2382:	34 d6       	rcall	.+3176   	; 0x2fec <rand>
    2384:	cc 57       	subi	r28, 0x7C	; 124
    2386:	df 4f       	sbci	r29, 0xFF	; 255
    2388:	87 70       	andi	r24, 0x07	; 7
    238a:	99 27       	eor	r25, r25
    238c:	01 96       	adiw	r24, 0x01	; 1
    238e:	99 83       	std	Y+1, r25	; 0x01
    2390:	88 83       	st	Y, r24
    2392:	08 c0       	rjmp	.+16     	; 0x23a4 <nwkTxFrame+0x96>
    2394:	81 e6       	ldi	r24, 0x61	; 97
    2396:	98 e8       	ldi	r25, 0x88	; 136
    2398:	9b 83       	std	Y+3, r25	; 0x03
    239a:	8a 83       	std	Y+2, r24	; 0x02
    239c:	cc 57       	subi	r28, 0x7C	; 124
    239e:	df 4f       	sbci	r29, 0xFF	; 255
    23a0:	19 82       	std	Y+1, r1	; 0x01
    23a2:	18 82       	st	Y, r1
    23a4:	df 91       	pop	r29
    23a6:	cf 91       	pop	r28
    23a8:	08 95       	ret

000023aa <nwkTxBroadcastFrame>:
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	8c 01       	movw	r16, r24
    23b4:	5f da       	rcall	.-2882   	; 0x1874 <nwkFrameAlloc>
    23b6:	ec 01       	movw	r28, r24
    23b8:	89 2b       	or	r24, r25
    23ba:	a9 f1       	breq	.+106    	; 0x2426 <nwkTxBroadcastFrame+0x7c>
    23bc:	82 e1       	ldi	r24, 0x12	; 18
    23be:	88 83       	st	Y, r24
    23c0:	f8 01       	movw	r30, r16
    23c2:	81 81       	ldd	r24, Z+1	; 0x01
    23c4:	89 83       	std	Y+1, r24	; 0x01
    23c6:	fe 01       	movw	r30, r28
    23c8:	ed 57       	subi	r30, 0x7D	; 125
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	10 82       	st	Z, r1
    23ce:	0e d6       	rcall	.+3100   	; 0x2fec <rand>
    23d0:	fe 01       	movw	r30, r28
    23d2:	ec 57       	subi	r30, 0x7C	; 124
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	87 70       	andi	r24, 0x07	; 7
    23d8:	99 27       	eor	r25, r25
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	91 83       	std	Z+1, r25	; 0x01
    23de:	80 83       	st	Z, r24
    23e0:	33 96       	adiw	r30, 0x03	; 3
    23e2:	11 82       	std	Z+1, r1	; 0x01
    23e4:	10 82       	st	Z, r1
    23e6:	f8 01       	movw	r30, r16
    23e8:	41 81       	ldd	r20, Z+1	; 0x01
    23ea:	50 e0       	ldi	r21, 0x00	; 0
    23ec:	b8 01       	movw	r22, r16
    23ee:	6e 5f       	subi	r22, 0xFE	; 254
    23f0:	7f 4f       	sbci	r23, 0xFF	; 255
    23f2:	ce 01       	movw	r24, r28
    23f4:	02 96       	adiw	r24, 0x02	; 2
    23f6:	08 d6       	rcall	.+3088   	; 0x3008 <memcpy>
    23f8:	81 e4       	ldi	r24, 0x41	; 65
    23fa:	98 e8       	ldi	r25, 0x88	; 136
    23fc:	9b 83       	std	Y+3, r25	; 0x03
    23fe:	8a 83       	std	Y+2, r24	; 0x02
    2400:	8f ef       	ldi	r24, 0xFF	; 255
    2402:	9f ef       	ldi	r25, 0xFF	; 255
    2404:	98 87       	std	Y+8, r25	; 0x08
    2406:	8f 83       	std	Y+7, r24	; 0x07
    2408:	f8 01       	movw	r30, r16
    240a:	85 81       	ldd	r24, Z+5	; 0x05
    240c:	96 81       	ldd	r25, Z+6	; 0x06
    240e:	9e 83       	std	Y+6, r25	; 0x06
    2410:	8d 83       	std	Y+5, r24	; 0x05
    2412:	e4 e4       	ldi	r30, 0x44	; 68
    2414:	f3 e1       	ldi	r31, 0x13	; 19
    2416:	80 81       	ld	r24, Z
    2418:	91 81       	ldd	r25, Z+1	; 0x01
    241a:	9a 87       	std	Y+10, r25	; 0x0a
    241c:	89 87       	std	Y+9, r24	; 0x09
    241e:	85 81       	ldd	r24, Z+5	; 0x05
    2420:	8f 5f       	subi	r24, 0xFF	; 255
    2422:	85 83       	std	Z+5, r24	; 0x05
    2424:	8c 83       	std	Y+4, r24	; 0x04
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	1f 91       	pop	r17
    242c:	0f 91       	pop	r16
    242e:	08 95       	ret

00002430 <nwkTxAckReceived>:
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	fc 01       	movw	r30, r24
    2436:	21 85       	ldd	r18, Z+9	; 0x09
    2438:	23 30       	cpi	r18, 0x03	; 3
    243a:	d9 f4       	brne	.+54     	; 0x2472 <nwkTxAckReceived+0x42>
    243c:	10 c0       	rjmp	.+32     	; 0x245e <nwkTxAckReceived+0x2e>
    243e:	fc 01       	movw	r30, r24
    2440:	20 81       	ld	r18, Z
    2442:	26 31       	cpi	r18, 0x16	; 22
    2444:	89 f4       	brne	.+34     	; 0x2468 <nwkTxAckReceived+0x38>
    2446:	34 85       	ldd	r19, Z+12	; 0x0c
    2448:	29 81       	ldd	r18, Y+1	; 0x01
    244a:	32 13       	cpse	r19, r18
    244c:	0d c0       	rjmp	.+26     	; 0x2468 <nwkTxAckReceived+0x38>
    244e:	27 e1       	ldi	r18, 0x17	; 23
    2450:	20 83       	st	Z, r18
    2452:	2a 81       	ldd	r18, Y+2	; 0x02
    2454:	ea 57       	subi	r30, 0x7A	; 122
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	20 83       	st	Z, r18
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	0b c0       	rjmp	.+22     	; 0x2474 <nwkTxAckReceived+0x44>
    245e:	fc 01       	movw	r30, r24
    2460:	c7 81       	ldd	r28, Z+7	; 0x07
    2462:	d0 85       	ldd	r29, Z+8	; 0x08
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	46 da       	rcall	.-2932   	; 0x18f6 <nwkFrameNext>
    246a:	00 97       	sbiw	r24, 0x00	; 0
    246c:	41 f7       	brne	.-48     	; 0x243e <nwkTxAckReceived+0xe>
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <nwkTxAckReceived+0x44>
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	08 95       	ret

0000247a <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    247a:	e0 91 bb 12 	lds	r30, 0x12BB	; 0x8012bb <nwkTxPhyActiveFrame>
    247e:	f0 91 bc 12 	lds	r31, 0x12BC	; 0x8012bc <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    2482:	81 30       	cpi	r24, 0x01	; 1
    2484:	21 f0       	breq	.+8      	; 0x248e <PHY_DataConf+0x14>
    2486:	48 f0       	brcs	.+18     	; 0x249a <PHY_DataConf+0x20>
    2488:	82 30       	cpi	r24, 0x02	; 2
    248a:	19 f0       	breq	.+6      	; 0x2492 <PHY_DataConf+0x18>
    248c:	04 c0       	rjmp	.+8      	; 0x2496 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    248e:	80 e2       	ldi	r24, 0x20	; 32
    2490:	05 c0       	rjmp	.+10     	; 0x249c <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    2492:	81 e2       	ldi	r24, 0x21	; 33
    2494:	03 c0       	rjmp	.+6      	; 0x249c <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	01 c0       	rjmp	.+2      	; 0x249c <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    249a:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    249c:	df 01       	movw	r26, r30
    249e:	ad 57       	subi	r26, 0x7D	; 125
    24a0:	bf 4f       	sbci	r27, 0xFF	; 255
    24a2:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    24a4:	85 e1       	ldi	r24, 0x15	; 21
    24a6:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    24a8:	10 92 bc 12 	sts	0x12BC, r1	; 0x8012bc <nwkTxPhyActiveFrame+0x1>
    24ac:	10 92 bb 12 	sts	0x12BB, r1	; 0x8012bb <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    24b0:	e4 e4       	ldi	r30, 0x44	; 68
    24b2:	f3 e1       	ldi	r31, 0x13	; 19
    24b4:	86 a1       	ldd	r24, Z+38	; 0x26
    24b6:	97 a1       	ldd	r25, Z+39	; 0x27
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	97 a3       	std	Z+39, r25	; 0x27
    24bc:	86 a3       	std	Z+38, r24	; 0x26
    24be:	08 95       	ret

000024c0 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    24c0:	9f 92       	push	r9
    24c2:	af 92       	push	r10
    24c4:	bf 92       	push	r11
    24c6:	cf 92       	push	r12
    24c8:	df 92       	push	r13
    24ca:	ef 92       	push	r14
    24cc:	ff 92       	push	r15
    24ce:	0f 93       	push	r16
    24d0:	1f 93       	push	r17
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    24d6:	c0 e0       	ldi	r28, 0x00	; 0
    24d8:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    24da:	0f 2e       	mov	r0, r31
    24dc:	f4 e1       	ldi	r31, 0x14	; 20
    24de:	af 2e       	mov	r10, r31
    24e0:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    24e2:	04 e4       	ldi	r16, 0x44	; 68
    24e4:	13 e1       	ldi	r17, 0x13	; 19
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    24e6:	0f 2e       	mov	r0, r31
    24e8:	f7 e1       	ldi	r31, 0x17	; 23
    24ea:	df 2e       	mov	r13, r31
    24ec:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    24ee:	0f 2e       	mov	r0, r31
    24f0:	f6 e1       	ldi	r31, 0x16	; 22
    24f2:	9f 2e       	mov	r9, r31
    24f4:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    24f6:	0f 2e       	mov	r0, r31
    24f8:	f5 e1       	ldi	r31, 0x15	; 21
    24fa:	ef 2e       	mov	r14, r31
    24fc:	f1 2c       	mov	r15, r1
    24fe:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    2500:	0f 2e       	mov	r0, r31
    2502:	f3 e1       	ldi	r31, 0x13	; 19
    2504:	cf 2e       	mov	r12, r31
    2506:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    2508:	0f 2e       	mov	r0, r31
    250a:	f1 e1       	ldi	r31, 0x11	; 17
    250c:	bf 2e       	mov	r11, r31
    250e:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    2510:	60 c0       	rjmp	.+192    	; 0x25d2 <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    2512:	88 81       	ld	r24, Y
    2514:	83 31       	cpi	r24, 0x13	; 19
    2516:	c1 f0       	breq	.+48     	; 0x2548 <nwkTxTaskHandler+0x88>
    2518:	18 f4       	brcc	.+6      	; 0x2520 <nwkTxTaskHandler+0x60>
    251a:	82 31       	cpi	r24, 0x12	; 18
    251c:	39 f0       	breq	.+14     	; 0x252c <nwkTxTaskHandler+0x6c>
    251e:	59 c0       	rjmp	.+178    	; 0x25d2 <nwkTxTaskHandler+0x112>
    2520:	85 31       	cpi	r24, 0x15	; 21
    2522:	49 f1       	breq	.+82     	; 0x2576 <nwkTxTaskHandler+0xb6>
    2524:	87 31       	cpi	r24, 0x17	; 23
    2526:	09 f4       	brne	.+2      	; 0x252a <nwkTxTaskHandler+0x6a>
    2528:	45 c0       	rjmp	.+138    	; 0x25b4 <nwkTxTaskHandler+0xf4>
    252a:	53 c0       	rjmp	.+166    	; 0x25d2 <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    252c:	fe 01       	movw	r30, r28
    252e:	ec 57       	subi	r30, 0x7C	; 124
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	89 2b       	or	r24, r25
    2538:	29 f0       	breq	.+10     	; 0x2544 <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    253a:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    253c:	81 ea       	ldi	r24, 0xA1	; 161
    253e:	92 e1       	ldi	r25, 0x12	; 18
    2540:	63 d2       	rcall	.+1222   	; 0x2a08 <SYS_TimerStart>
    2542:	47 c0       	rjmp	.+142    	; 0x25d2 <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    2544:	c8 82       	st	Y, r12
    2546:	45 c0       	rjmp	.+138    	; 0x25d2 <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    2548:	80 91 bb 12 	lds	r24, 0x12BB	; 0x8012bb <nwkTxPhyActiveFrame>
    254c:	90 91 bc 12 	lds	r25, 0x12BC	; 0x8012bc <nwkTxPhyActiveFrame+0x1>
    2550:	89 2b       	or	r24, r25
    2552:	09 f0       	breq	.+2      	; 0x2556 <nwkTxTaskHandler+0x96>
    2554:	3e c0       	rjmp	.+124    	; 0x25d2 <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    2556:	d0 93 bc 12 	sts	0x12BC, r29	; 0x8012bc <nwkTxPhyActiveFrame+0x1>
    255a:	c0 93 bb 12 	sts	0x12BB, r28	; 0x8012bb <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    255e:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    2560:	69 81       	ldd	r22, Y+1	; 0x01
    2562:	ce 01       	movw	r24, r28
    2564:	02 96       	adiw	r24, 0x02	; 2
    2566:	e0 d0       	rcall	.+448    	; 0x2728 <PHY_DataReq>
          nwkIb.lock++;
    2568:	f8 01       	movw	r30, r16
    256a:	86 a1       	ldd	r24, Z+38	; 0x26
    256c:	97 a1       	ldd	r25, Z+39	; 0x27
    256e:	01 96       	adiw	r24, 0x01	; 1
    2570:	97 a3       	std	Z+39, r25	; 0x27
    2572:	86 a3       	std	Z+38, r24	; 0x26
    2574:	2e c0       	rjmp	.+92     	; 0x25d2 <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    2576:	fe 01       	movw	r30, r28
    2578:	ed 57       	subi	r30, 0x7D	; 125
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	80 81       	ld	r24, Z
    257e:	81 11       	cpse	r24, r1
    2580:	17 c0       	rjmp	.+46     	; 0x25b0 <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    2582:	2d 85       	ldd	r18, Y+13	; 0x0d
    2584:	3e 85       	ldd	r19, Y+14	; 0x0e
    2586:	f8 01       	movw	r30, r16
    2588:	80 81       	ld	r24, Z
    258a:	91 81       	ldd	r25, Z+1	; 0x01
    258c:	28 17       	cp	r18, r24
    258e:	39 07       	cpc	r19, r25
    2590:	69 f4       	brne	.+26     	; 0x25ac <nwkTxTaskHandler+0xec>
    2592:	8b 85       	ldd	r24, Y+11	; 0x0b
    2594:	80 ff       	sbrs	r24, 0
    2596:	0a c0       	rjmp	.+20     	; 0x25ac <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    2598:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    259a:	fe 01       	movw	r30, r28
    259c:	ec 57       	subi	r30, 0x7C	; 124
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	f1 82       	std	Z+1, r15	; 0x01
    25a2:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    25a4:	8e ea       	ldi	r24, 0xAE	; 174
    25a6:	92 e1       	ldi	r25, 0x12	; 18
    25a8:	2f d2       	rcall	.+1118   	; 0x2a08 <SYS_TimerStart>
    25aa:	13 c0       	rjmp	.+38     	; 0x25d2 <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    25ac:	d8 82       	st	Y, r13
    25ae:	11 c0       	rjmp	.+34     	; 0x25d2 <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    25b0:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    25b2:	0f c0       	rjmp	.+30     	; 0x25d2 <nwkTxTaskHandler+0x112>
    25b4:	ce 01       	movw	r24, r28
    25b6:	b4 da       	rcall	.-2712   	; 0x1b20 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    25b8:	fe 01       	movw	r30, r28
    25ba:	e9 57       	subi	r30, 0x79	; 121
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	01 90       	ld	r0, Z+
    25c0:	f0 81       	ld	r31, Z
    25c2:	e0 2d       	mov	r30, r0
    25c4:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    25c6:	19 f4       	brne	.+6      	; 0x25ce <nwkTxTaskHandler+0x10e>
    25c8:	ce 01       	movw	r24, r28
    25ca:	8b d9       	rcall	.-3306   	; 0x18e2 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <nwkTxTaskHandler+0x112>
    25ce:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    25d0:	19 95       	eicall
    25d2:	ce 01       	movw	r24, r28
    25d4:	90 d9       	rcall	.-3296   	; 0x18f6 <nwkFrameNext>
    25d6:	ec 01       	movw	r28, r24
    25d8:	89 2b       	or	r24, r25
    25da:	09 f0       	breq	.+2      	; 0x25de <nwkTxTaskHandler+0x11e>
    25dc:	9a cf       	rjmp	.-204    	; 0x2512 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	ff 90       	pop	r15
    25e8:	ef 90       	pop	r14
    25ea:	df 90       	pop	r13
    25ec:	cf 90       	pop	r12
    25ee:	bf 90       	pop	r11
    25f0:	af 90       	pop	r10
    25f2:	9f 90       	pop	r9
    25f4:	08 95       	ret

000025f6 <phySetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
  PHY_TX_PWR_REG_s.txPwr = txPower;
    25f6:	80 91 bd 12 	lds	r24, 0x12BD	; 0x8012bd <phyBand>
    25fa:	98 2f       	mov	r25, r24
    25fc:	9f 70       	andi	r25, 0x0F	; 15
    25fe:	e4 e5       	ldi	r30, 0x54	; 84
    2600:	f1 e0       	ldi	r31, 0x01	; 1
    2602:	80 81       	ld	r24, Z
    2604:	80 7f       	andi	r24, 0xF0	; 240
    2606:	89 2b       	or	r24, r25
    2608:	80 83       	st	Z, r24
    260a:	80 91 bd 12 	lds	r24, 0x12BD	; 0x8012bd <phyBand>
    260e:	88 23       	and	r24, r24
    2610:	29 f0       	breq	.+10     	; 0x261c <phySetChannel+0x26>
    2612:	80 91 be 12 	lds	r24, 0x12BE	; 0x8012be <phyChannel>
    2616:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    261a:	08 95       	ret
    261c:	80 91 be 12 	lds	r24, 0x12BE	; 0x8012be <phyChannel>
    2620:	98 2f       	mov	r25, r24
    2622:	9f 71       	andi	r25, 0x1F	; 31
    2624:	e8 e4       	ldi	r30, 0x48	; 72
    2626:	f1 e0       	ldi	r31, 0x01	; 1
    2628:	80 81       	ld	r24, Z
    262a:	80 7e       	andi	r24, 0xE0	; 224
    262c:	89 2b       	or	r24, r25
    262e:	80 83       	st	Z, r24
    2630:	08 95       	ret

00002632 <phyTrxSetState>:
    2632:	93 e0       	ldi	r25, 0x03	; 3
    2634:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    2638:	e1 e4       	ldi	r30, 0x41	; 65
    263a:	f1 e0       	ldi	r31, 0x01	; 1
    263c:	90 81       	ld	r25, Z
    263e:	9f 71       	andi	r25, 0x1F	; 31
    2640:	98 30       	cpi	r25, 0x08	; 8
    2642:	e1 f7       	brne	.-8      	; 0x263c <phyTrxSetState+0xa>
    2644:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    2648:	e1 e4       	ldi	r30, 0x41	; 65
    264a:	f1 e0       	ldi	r31, 0x01	; 1
    264c:	90 81       	ld	r25, Z
    264e:	9f 71       	andi	r25, 0x1F	; 31
    2650:	89 13       	cpse	r24, r25
    2652:	fc cf       	rjmp	.-8      	; 0x264c <phyTrxSetState+0x1a>
    2654:	08 95       	ret

00002656 <phySetRxState>:
    2656:	88 e0       	ldi	r24, 0x08	; 8
    2658:	ec df       	rcall	.-40     	; 0x2632 <phyTrxSetState>
    265a:	8f ef       	ldi	r24, 0xFF	; 255
    265c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    2660:	80 91 bf 12 	lds	r24, 0x12BF	; 0x8012bf <phyRxState>
    2664:	88 23       	and	r24, r24
    2666:	11 f0       	breq	.+4      	; 0x266c <phySetRxState+0x16>
    2668:	86 e1       	ldi	r24, 0x16	; 22
    266a:	e3 cf       	rjmp	.-58     	; 0x2632 <phyTrxSetState>
    266c:	08 95       	ret

0000266e <PHY_Init>:
    266e:	e9 e3       	ldi	r30, 0x39	; 57
    2670:	f1 e0       	ldi	r31, 0x01	; 1
    2672:	80 81       	ld	r24, Z
    2674:	81 60       	ori	r24, 0x01	; 1
    2676:	80 83       	st	Z, r24
    2678:	10 92 bf 12 	sts	0x12BF, r1	; 0x8012bf <phyRxState>
    267c:	10 92 bd 12 	sts	0x12BD, r1	; 0x8012bd <phyBand>
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	80 93 40 13 	sts	0x1340, r24	; 0x801340 <phyState>
    2686:	88 e0       	ldi	r24, 0x08	; 8
    2688:	d4 df       	rcall	.-88     	; 0x2632 <phyTrxSetState>
    268a:	8b ee       	ldi	r24, 0xEB	; 235
    268c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    2690:	ec e4       	ldi	r30, 0x4C	; 76
    2692:	f1 e0       	ldi	r31, 0x01	; 1
    2694:	80 81       	ld	r24, Z
    2696:	80 68       	ori	r24, 0x80	; 128
    2698:	80 83       	st	Z, r24
    269a:	08 95       	ret

0000269c <PHY_SetRxState>:
    269c:	80 93 bf 12 	sts	0x12BF, r24	; 0x8012bf <phyRxState>
    26a0:	da cf       	rjmp	.-76     	; 0x2656 <phySetRxState>
    26a2:	08 95       	ret

000026a4 <PHY_SetChannel>:
    26a4:	80 93 be 12 	sts	0x12BE, r24	; 0x8012be <phyChannel>
    26a8:	a6 cf       	rjmp	.-180    	; 0x25f6 <phySetChannel>
    26aa:	08 95       	ret

000026ac <PHY_SetPanId>:
    26ac:	cf 93       	push	r28
    26ae:	df 93       	push	r29
    26b0:	1f 92       	push	r1
    26b2:	1f 92       	push	r1
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	9a 83       	std	Y+2, r25	; 0x02
    26ba:	89 83       	std	Y+1, r24	; 0x01
    26bc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    26c0:	8a 81       	ldd	r24, Y+2	; 0x02
    26c2:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	08 95       	ret

000026d0 <PHY_SetShortAddr>:
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	1f 92       	push	r1
    26d6:	1f 92       	push	r1
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	9a 83       	std	Y+2, r25	; 0x02
    26de:	89 83       	std	Y+1, r24	; 0x01
    26e0:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    26e4:	8a 81       	ldd	r24, Y+2	; 0x02
    26e6:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    26ea:	99 81       	ldd	r25, Y+1	; 0x01
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	89 0f       	add	r24, r25
    26f0:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	df 91       	pop	r29
    26fa:	cf 91       	pop	r28
    26fc:	08 95       	ret

000026fe <PHY_Sleep>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Sleep(void)
{
  phyTrxSetState(TRX_CMD_TRX_OFF);
    26fe:	88 e0       	ldi	r24, 0x08	; 8
    2700:	98 df       	rcall	.-208    	; 0x2632 <phyTrxSetState>
  TRXPR_REG_s.slptr = 1;
    2702:	e9 e3       	ldi	r30, 0x39	; 57
    2704:	f1 e0       	ldi	r31, 0x01	; 1
    2706:	80 81       	ld	r24, Z
    2708:	82 60       	ori	r24, 0x02	; 2
    270a:	80 83       	st	Z, r24
  phyState = PHY_STATE_SLEEP;
    270c:	82 e0       	ldi	r24, 0x02	; 2
    270e:	80 93 40 13 	sts	0x1340, r24	; 0x801340 <phyState>
    2712:	08 95       	ret

00002714 <PHY_Wakeup>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
    2714:	e9 e3       	ldi	r30, 0x39	; 57
    2716:	f1 e0       	ldi	r31, 0x01	; 1
    2718:	80 81       	ld	r24, Z
    271a:	8d 7f       	andi	r24, 0xFD	; 253
    271c:	80 83       	st	Z, r24
  phySetRxState();
    271e:	9b df       	rcall	.-202    	; 0x2656 <phySetRxState>
  phyState = PHY_STATE_IDLE;
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	80 93 40 13 	sts	0x1340, r24	; 0x801340 <phyState>
    2726:	08 95       	ret

00002728 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    2728:	1f 93       	push	r17
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	18 2f       	mov	r17, r24
    2730:	d9 2f       	mov	r29, r25
    2732:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    2734:	89 e1       	ldi	r24, 0x19	; 25
    2736:	7d df       	rcall	.-262    	; 0x2632 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    2738:	8f ef       	ldi	r24, 0xFF	; 255
    273a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    273e:	82 e0       	ldi	r24, 0x02	; 2
    2740:	8c 0f       	add	r24, r28
    2742:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    2746:	cc 23       	and	r28, r28
    2748:	71 f0       	breq	.+28     	; 0x2766 <PHY_DataReq+0x3e>
    274a:	a1 2f       	mov	r26, r17
    274c:	bd 2f       	mov	r27, r29
    274e:	c1 50       	subi	r28, 0x01	; 1
    2750:	6c 2f       	mov	r22, r28
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	6e 57       	subi	r22, 0x7E	; 126
    2756:	7e 4f       	sbci	r23, 0xFE	; 254
    2758:	e1 e8       	ldi	r30, 0x81	; 129
    275a:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    275c:	8d 91       	ld	r24, X+
    275e:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    2760:	e6 17       	cp	r30, r22
    2762:	f7 07       	cpc	r31, r23
    2764:	d9 f7       	brne	.-10     	; 0x275c <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    2766:	83 e0       	ldi	r24, 0x03	; 3
    2768:	80 93 40 13 	sts	0x1340, r24	; 0x801340 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    276c:	82 e0       	ldi	r24, 0x02	; 2
    276e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    2772:	df 91       	pop	r29
    2774:	cf 91       	pop	r28
    2776:	1f 91       	pop	r17
    2778:	08 95       	ret

0000277a <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    277a:	1f 93       	push	r17
    277c:	cf 93       	push	r28
    277e:	df 93       	push	r29
    2780:	00 d0       	rcall	.+0      	; 0x2782 <PHY_TaskHandler+0x8>
    2782:	1f 92       	push	r1
    2784:	1f 92       	push	r1
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    278a:	80 91 40 13 	lds	r24, 0x1340	; 0x801340 <phyState>
    278e:	82 30       	cpi	r24, 0x02	; 2
    2790:	09 f4       	brne	.+2      	; 0x2794 <PHY_TaskHandler+0x1a>
    2792:	65 c0       	rjmp	.+202    	; 0x285e <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    2794:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    2798:	83 ff       	sbrs	r24, 3
    279a:	3e c0       	rjmp	.+124    	; 0x2818 <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    279c:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    27a0:	6a 2f       	mov	r22, r26
    27a2:	70 e0       	ldi	r23, 0x00	; 0
    27a4:	ab 01       	movw	r20, r22
    27a6:	4f 5f       	subi	r20, 0xFF	; 255
    27a8:	5f 4f       	sbci	r21, 0xFF	; 255
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    27b0:	fc 01       	movw	r30, r24
    27b2:	e0 58       	subi	r30, 0x80	; 128
    27b4:	fe 4f       	sbci	r31, 0xFE	; 254
    27b6:	30 81       	ld	r19, Z
    27b8:	fc 01       	movw	r30, r24
    27ba:	e0 54       	subi	r30, 0x40	; 64
    27bc:	fd 4e       	sbci	r31, 0xED	; 237
    27be:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    27c0:	2f 5f       	subi	r18, 0xFF	; 255
    27c2:	82 2f       	mov	r24, r18
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	84 17       	cp	r24, r20
    27c8:	95 07       	cpc	r25, r21
    27ca:	94 f3       	brlt	.-28     	; 0x27b0 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    27cc:	80 ec       	ldi	r24, 0xC0	; 192
    27ce:	92 e1       	ldi	r25, 0x12	; 18
    27d0:	9a 83       	std	Y+2, r25	; 0x02
    27d2:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    27d4:	a2 50       	subi	r26, 0x02	; 2
    27d6:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    27d8:	fb 01       	movw	r30, r22
    27da:	e0 54       	subi	r30, 0x40	; 64
    27dc:	fd 4e       	sbci	r31, 0xED	; 237
    27de:	80 81       	ld	r24, Z
    27e0:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    27e2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    27e6:	8a 55       	subi	r24, 0x5A	; 90
    27e8:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    27ea:	ce 01       	movw	r24, r28
    27ec:	01 96       	adiw	r24, 0x01	; 1
    27ee:	a4 da       	rcall	.-2744   	; 0x1d38 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    27f0:	e1 e4       	ldi	r30, 0x41	; 65
    27f2:	f1 e0       	ldi	r31, 0x01	; 1
    27f4:	80 81       	ld	r24, Z
    27f6:	8f 71       	andi	r24, 0x1F	; 31
    27f8:	86 31       	cpi	r24, 0x16	; 22
    27fa:	e1 f7       	brne	.-8      	; 0x27f4 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    27fc:	ef e4       	ldi	r30, 0x4F	; 79
    27fe:	f1 e0       	ldi	r31, 0x01	; 1
    2800:	80 81       	ld	r24, Z
    2802:	88 60       	ori	r24, 0x08	; 8
    2804:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    2806:	ec e4       	ldi	r30, 0x4C	; 76
    2808:	f1 e0       	ldi	r31, 0x01	; 1
    280a:	80 81       	ld	r24, Z
    280c:	8f 77       	andi	r24, 0x7F	; 127
    280e:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    2810:	80 81       	ld	r24, Z
    2812:	80 68       	ori	r24, 0x80	; 128
    2814:	80 83       	st	Z, r24
    2816:	23 c0       	rjmp	.+70     	; 0x285e <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    2818:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    281c:	86 ff       	sbrs	r24, 6
    281e:	1f c0       	rjmp	.+62     	; 0x285e <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    2820:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    2824:	8f 71       	andi	r24, 0x1F	; 31
    2826:	89 31       	cpi	r24, 0x19	; 25
    2828:	a9 f4       	brne	.+42     	; 0x2854 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    282a:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    282e:	12 95       	swap	r17
    2830:	16 95       	lsr	r17
    2832:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    2834:	49 f0       	breq	.+18     	; 0x2848 <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    2836:	13 30       	cpi	r17, 0x03	; 3
    2838:	21 f0       	breq	.+8      	; 0x2842 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    283a:	15 30       	cpi	r17, 0x05	; 5
    283c:	21 f0       	breq	.+8      	; 0x2846 <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    283e:	13 e0       	ldi	r17, 0x03	; 3
    2840:	03 c0       	rjmp	.+6      	; 0x2848 <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    2842:	11 e0       	ldi	r17, 0x01	; 1
    2844:	01 c0       	rjmp	.+2      	; 0x2848 <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    2846:	12 e0       	ldi	r17, 0x02	; 2
    2848:	06 df       	rcall	.-500    	; 0x2656 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	80 93 40 13 	sts	0x1340, r24	; 0x801340 <phyState>

      PHY_DataConf(status);
    2850:	81 2f       	mov	r24, r17
    2852:	13 de       	rcall	.-986    	; 0x247a <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    2854:	ef e4       	ldi	r30, 0x4F	; 79
    2856:	f1 e0       	ldi	r31, 0x01	; 1
    2858:	80 81       	ld	r24, Z
    285a:	80 64       	ori	r24, 0x40	; 64
    285c:	80 83       	st	Z, r24
  }
}
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	df 91       	pop	r29
    286a:	cf 91       	pop	r28
    286c:	1f 91       	pop	r17
    286e:	08 95       	ret

00002870 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    2870:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <HAL_Init>
  SYS_TimerInit();
    2874:	6d d0       	rcall	.+218    	; 0x2950 <SYS_TimerInit>
  PHY_Init();
    2876:	fb de       	rcall	.-522    	; 0x266e <PHY_Init>
    2878:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <NWK_Init>
  NWK_Init();
    287c:	08 95       	ret

0000287e <SYS_TaskHandler>:
    287e:	7d df       	rcall	.-262    	; 0x277a <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    2880:	0e 94 3c 0b 	call	0x1678	; 0x1678 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    2884:	cc c0       	rjmp	.+408    	; 0x2a1e <SYS_TimerTaskHandler>
    2886:	08 95       	ret

00002888 <placeTimer>:
    2888:	0f 93       	push	r16
    288a:	1f 93       	push	r17
    288c:	cf 93       	push	r28
    288e:	df 93       	push	r29
    2890:	ec 01       	movw	r28, r24
    2892:	80 91 41 13 	lds	r24, 0x1341	; 0x801341 <timers>
    2896:	90 91 42 13 	lds	r25, 0x1342	; 0x801342 <timers+0x1>
    289a:	00 97       	sbiw	r24, 0x00	; 0
    289c:	09 f4       	brne	.+2      	; 0x28a0 <placeTimer+0x18>
    289e:	45 c0       	rjmp	.+138    	; 0x292a <placeTimer+0xa2>
    28a0:	4e 81       	ldd	r20, Y+6	; 0x06
    28a2:	5f 81       	ldd	r21, Y+7	; 0x07
    28a4:	68 85       	ldd	r22, Y+8	; 0x08
    28a6:	79 85       	ldd	r23, Y+9	; 0x09
    28a8:	fc 01       	movw	r30, r24
    28aa:	02 81       	ldd	r16, Z+2	; 0x02
    28ac:	13 81       	ldd	r17, Z+3	; 0x03
    28ae:	24 81       	ldd	r18, Z+4	; 0x04
    28b0:	35 81       	ldd	r19, Z+5	; 0x05
    28b2:	40 17       	cp	r20, r16
    28b4:	51 07       	cpc	r21, r17
    28b6:	62 07       	cpc	r22, r18
    28b8:	73 07       	cpc	r23, r19
    28ba:	60 f0       	brcs	.+24     	; 0x28d4 <placeTimer+0x4c>
    28bc:	dc 01       	movw	r26, r24
    28be:	17 c0       	rjmp	.+46     	; 0x28ee <placeTimer+0x66>
    28c0:	02 81       	ldd	r16, Z+2	; 0x02
    28c2:	13 81       	ldd	r17, Z+3	; 0x03
    28c4:	24 81       	ldd	r18, Z+4	; 0x04
    28c6:	35 81       	ldd	r19, Z+5	; 0x05
    28c8:	40 17       	cp	r20, r16
    28ca:	51 07       	cpc	r21, r17
    28cc:	62 07       	cpc	r22, r18
    28ce:	73 07       	cpc	r23, r19
    28d0:	68 f4       	brcc	.+26     	; 0x28ec <placeTimer+0x64>
    28d2:	03 c0       	rjmp	.+6      	; 0x28da <placeTimer+0x52>
    28d4:	fc 01       	movw	r30, r24
    28d6:	a0 e0       	ldi	r26, 0x00	; 0
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	04 1b       	sub	r16, r20
    28dc:	15 0b       	sbc	r17, r21
    28de:	26 0b       	sbc	r18, r22
    28e0:	37 0b       	sbc	r19, r23
    28e2:	02 83       	std	Z+2, r16	; 0x02
    28e4:	13 83       	std	Z+3, r17	; 0x03
    28e6:	24 83       	std	Z+4, r18	; 0x04
    28e8:	35 83       	std	Z+5, r19	; 0x05
    28ea:	0a c0       	rjmp	.+20     	; 0x2900 <placeTimer+0x78>
    28ec:	df 01       	movw	r26, r30
    28ee:	40 1b       	sub	r20, r16
    28f0:	51 0b       	sbc	r21, r17
    28f2:	62 0b       	sbc	r22, r18
    28f4:	73 0b       	sbc	r23, r19
    28f6:	ed 91       	ld	r30, X+
    28f8:	fc 91       	ld	r31, X
    28fa:	11 97       	sbiw	r26, 0x01	; 1
    28fc:	30 97       	sbiw	r30, 0x00	; 0
    28fe:	01 f7       	brne	.-64     	; 0x28c0 <placeTimer+0x38>
    2900:	4a 83       	std	Y+2, r20	; 0x02
    2902:	5b 83       	std	Y+3, r21	; 0x03
    2904:	6c 83       	std	Y+4, r22	; 0x04
    2906:	7d 83       	std	Y+5, r23	; 0x05
    2908:	10 97       	sbiw	r26, 0x00	; 0
    290a:	41 f0       	breq	.+16     	; 0x291c <placeTimer+0x94>
    290c:	8d 91       	ld	r24, X+
    290e:	9c 91       	ld	r25, X
    2910:	11 97       	sbiw	r26, 0x01	; 1
    2912:	99 83       	std	Y+1, r25	; 0x01
    2914:	88 83       	st	Y, r24
    2916:	cd 93       	st	X+, r28
    2918:	dc 93       	st	X, r29
    291a:	15 c0       	rjmp	.+42     	; 0x2946 <placeTimer+0xbe>
    291c:	99 83       	std	Y+1, r25	; 0x01
    291e:	88 83       	st	Y, r24
    2920:	d0 93 42 13 	sts	0x1342, r29	; 0x801342 <timers+0x1>
    2924:	c0 93 41 13 	sts	0x1341, r28	; 0x801341 <timers>
    2928:	0e c0       	rjmp	.+28     	; 0x2946 <placeTimer+0xbe>
    292a:	19 82       	std	Y+1, r1	; 0x01
    292c:	18 82       	st	Y, r1
    292e:	8e 81       	ldd	r24, Y+6	; 0x06
    2930:	9f 81       	ldd	r25, Y+7	; 0x07
    2932:	a8 85       	ldd	r26, Y+8	; 0x08
    2934:	b9 85       	ldd	r27, Y+9	; 0x09
    2936:	8a 83       	std	Y+2, r24	; 0x02
    2938:	9b 83       	std	Y+3, r25	; 0x03
    293a:	ac 83       	std	Y+4, r26	; 0x04
    293c:	bd 83       	std	Y+5, r27	; 0x05
    293e:	d0 93 42 13 	sts	0x1342, r29	; 0x801342 <timers+0x1>
    2942:	c0 93 41 13 	sts	0x1341, r28	; 0x801341 <timers>
    2946:	df 91       	pop	r29
    2948:	cf 91       	pop	r28
    294a:	1f 91       	pop	r17
    294c:	0f 91       	pop	r16
    294e:	08 95       	ret

00002950 <SYS_TimerInit>:
    2950:	10 92 42 13 	sts	0x1342, r1	; 0x801342 <timers+0x1>
    2954:	10 92 41 13 	sts	0x1341, r1	; 0x801341 <timers>
    2958:	08 95       	ret

0000295a <SYS_TimerStop>:
    295a:	cf 93       	push	r28
    295c:	df 93       	push	r29
    295e:	a0 91 41 13 	lds	r26, 0x1341	; 0x801341 <timers>
    2962:	b0 91 42 13 	lds	r27, 0x1342	; 0x801342 <timers+0x1>
    2966:	10 97       	sbiw	r26, 0x00	; 0
    2968:	91 f1       	breq	.+100    	; 0x29ce <SYS_TimerStop+0x74>
    296a:	a8 17       	cp	r26, r24
    296c:	b9 07       	cpc	r27, r25
    296e:	51 f5       	brne	.+84     	; 0x29c4 <SYS_TimerStop+0x6a>
    2970:	0a c0       	rjmp	.+20     	; 0x2986 <SYS_TimerStop+0x2c>
    2972:	8e 17       	cp	r24, r30
    2974:	9f 07       	cpc	r25, r31
    2976:	29 f5       	brne	.+74     	; 0x29c2 <SYS_TimerStop+0x68>
    2978:	10 97       	sbiw	r26, 0x00	; 0
    297a:	31 f0       	breq	.+12     	; 0x2988 <SYS_TimerStop+0x2e>
    297c:	20 81       	ld	r18, Z
    297e:	31 81       	ldd	r19, Z+1	; 0x01
    2980:	2d 93       	st	X+, r18
    2982:	3c 93       	st	X, r19
    2984:	07 c0       	rjmp	.+14     	; 0x2994 <SYS_TimerStop+0x3a>
    2986:	fc 01       	movw	r30, r24
    2988:	20 81       	ld	r18, Z
    298a:	31 81       	ldd	r19, Z+1	; 0x01
    298c:	30 93 42 13 	sts	0x1342, r19	; 0x801342 <timers+0x1>
    2990:	20 93 41 13 	sts	0x1341, r18	; 0x801341 <timers>
    2994:	01 90       	ld	r0, Z+
    2996:	f0 81       	ld	r31, Z
    2998:	e0 2d       	mov	r30, r0
    299a:	30 97       	sbiw	r30, 0x00	; 0
    299c:	c1 f0       	breq	.+48     	; 0x29ce <SYS_TimerStop+0x74>
    299e:	42 81       	ldd	r20, Z+2	; 0x02
    29a0:	53 81       	ldd	r21, Z+3	; 0x03
    29a2:	64 81       	ldd	r22, Z+4	; 0x04
    29a4:	75 81       	ldd	r23, Z+5	; 0x05
    29a6:	ec 01       	movw	r28, r24
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	9b 81       	ldd	r25, Y+3	; 0x03
    29ac:	ac 81       	ldd	r26, Y+4	; 0x04
    29ae:	bd 81       	ldd	r27, Y+5	; 0x05
    29b0:	84 0f       	add	r24, r20
    29b2:	95 1f       	adc	r25, r21
    29b4:	a6 1f       	adc	r26, r22
    29b6:	b7 1f       	adc	r27, r23
    29b8:	82 83       	std	Z+2, r24	; 0x02
    29ba:	93 83       	std	Z+3, r25	; 0x03
    29bc:	a4 83       	std	Z+4, r26	; 0x04
    29be:	b5 83       	std	Z+5, r27	; 0x05
    29c0:	06 c0       	rjmp	.+12     	; 0x29ce <SYS_TimerStop+0x74>
    29c2:	df 01       	movw	r26, r30
    29c4:	ed 91       	ld	r30, X+
    29c6:	fc 91       	ld	r31, X
    29c8:	11 97       	sbiw	r26, 0x01	; 1
    29ca:	30 97       	sbiw	r30, 0x00	; 0
    29cc:	91 f6       	brne	.-92     	; 0x2972 <SYS_TimerStop+0x18>
    29ce:	df 91       	pop	r29
    29d0:	cf 91       	pop	r28
    29d2:	08 95       	ret

000029d4 <SYS_TimerStarted>:
    29d4:	e0 91 41 13 	lds	r30, 0x1341	; 0x801341 <timers>
    29d8:	f0 91 42 13 	lds	r31, 0x1342	; 0x801342 <timers+0x1>
    29dc:	30 97       	sbiw	r30, 0x00	; 0
    29de:	71 f0       	breq	.+28     	; 0x29fc <SYS_TimerStarted+0x28>
    29e0:	e8 17       	cp	r30, r24
    29e2:	f9 07       	cpc	r31, r25
    29e4:	21 f4       	brne	.+8      	; 0x29ee <SYS_TimerStarted+0x1a>
    29e6:	0c c0       	rjmp	.+24     	; 0x2a00 <SYS_TimerStarted+0x2c>
    29e8:	8e 17       	cp	r24, r30
    29ea:	9f 07       	cpc	r25, r31
    29ec:	59 f0       	breq	.+22     	; 0x2a04 <SYS_TimerStarted+0x30>
    29ee:	01 90       	ld	r0, Z+
    29f0:	f0 81       	ld	r31, Z
    29f2:	e0 2d       	mov	r30, r0
    29f4:	30 97       	sbiw	r30, 0x00	; 0
    29f6:	c1 f7       	brne	.-16     	; 0x29e8 <SYS_TimerStarted+0x14>
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	08 95       	ret
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	08 95       	ret
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	08 95       	ret
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	08 95       	ret

00002a08 <SYS_TimerStart>:
    2a08:	cf 93       	push	r28
    2a0a:	df 93       	push	r29
    2a0c:	ec 01       	movw	r28, r24
    2a0e:	e2 df       	rcall	.-60     	; 0x29d4 <SYS_TimerStarted>
    2a10:	81 11       	cpse	r24, r1
    2a12:	02 c0       	rjmp	.+4      	; 0x2a18 <SYS_TimerStart+0x10>
    2a14:	ce 01       	movw	r24, r28
    2a16:	38 df       	rcall	.-400    	; 0x2888 <placeTimer>
    2a18:	df 91       	pop	r29
    2a1a:	cf 91       	pop	r28
    2a1c:	08 95       	ret

00002a1e <SYS_TimerTaskHandler>:
    2a1e:	cf 92       	push	r12
    2a20:	df 92       	push	r13
    2a22:	ef 92       	push	r14
    2a24:	ff 92       	push	r15
    2a26:	cf 93       	push	r28
    2a28:	df 93       	push	r29
    2a2a:	80 91 43 13 	lds	r24, 0x1343	; 0x801343 <halTimerIrqCount>
    2a2e:	88 23       	and	r24, r24
    2a30:	09 f4       	brne	.+2      	; 0x2a34 <SYS_TimerTaskHandler+0x16>
    2a32:	59 c0       	rjmp	.+178    	; 0x2ae6 <SYS_TimerTaskHandler+0xc8>
    2a34:	8f b7       	in	r24, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	c0 90 43 13 	lds	r12, 0x1343	; 0x801343 <halTimerIrqCount>
    2a3c:	10 92 43 13 	sts	0x1343, r1	; 0x801343 <halTimerIrqCount>
    2a40:	8f bf       	out	0x3f, r24	; 63
    2a42:	d1 2c       	mov	r13, r1
    2a44:	e1 2c       	mov	r14, r1
    2a46:	f1 2c       	mov	r15, r1
    2a48:	cc 0c       	add	r12, r12
    2a4a:	dd 1c       	adc	r13, r13
    2a4c:	ee 1c       	adc	r14, r14
    2a4e:	ff 1c       	adc	r15, r15
    2a50:	d7 01       	movw	r26, r14
    2a52:	c6 01       	movw	r24, r12
    2a54:	88 0f       	add	r24, r24
    2a56:	99 1f       	adc	r25, r25
    2a58:	aa 1f       	adc	r26, r26
    2a5a:	bb 1f       	adc	r27, r27
    2a5c:	88 0f       	add	r24, r24
    2a5e:	99 1f       	adc	r25, r25
    2a60:	aa 1f       	adc	r26, r26
    2a62:	bb 1f       	adc	r27, r27
    2a64:	c8 0e       	add	r12, r24
    2a66:	d9 1e       	adc	r13, r25
    2a68:	ea 1e       	adc	r14, r26
    2a6a:	fb 1e       	adc	r15, r27
    2a6c:	c0 91 41 13 	lds	r28, 0x1341	; 0x801341 <timers>
    2a70:	d0 91 42 13 	lds	r29, 0x1342	; 0x801342 <timers+0x1>
    2a74:	20 97       	sbiw	r28, 0x00	; 0
    2a76:	b9 f1       	breq	.+110    	; 0x2ae6 <SYS_TimerTaskHandler+0xc8>
    2a78:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a7c:	ac 81       	ldd	r26, Y+4	; 0x04
    2a7e:	bd 81       	ldd	r27, Y+5	; 0x05
    2a80:	c8 16       	cp	r12, r24
    2a82:	d9 06       	cpc	r13, r25
    2a84:	ea 06       	cpc	r14, r26
    2a86:	fb 06       	cpc	r15, r27
    2a88:	10 f1       	brcs	.+68     	; 0x2ace <SYS_TimerTaskHandler+0xb0>
    2a8a:	c8 1a       	sub	r12, r24
    2a8c:	d9 0a       	sbc	r13, r25
    2a8e:	ea 0a       	sbc	r14, r26
    2a90:	fb 0a       	sbc	r15, r27
    2a92:	88 81       	ld	r24, Y
    2a94:	99 81       	ldd	r25, Y+1	; 0x01
    2a96:	90 93 42 13 	sts	0x1342, r25	; 0x801342 <timers+0x1>
    2a9a:	80 93 41 13 	sts	0x1341, r24	; 0x801341 <timers>
    2a9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aa0:	81 30       	cpi	r24, 0x01	; 1
    2aa2:	11 f4       	brne	.+4      	; 0x2aa8 <SYS_TimerTaskHandler+0x8a>
    2aa4:	ce 01       	movw	r24, r28
    2aa6:	f0 de       	rcall	.-544    	; 0x2888 <placeTimer>
    2aa8:	eb 85       	ldd	r30, Y+11	; 0x0b
    2aaa:	fc 85       	ldd	r31, Y+12	; 0x0c
    2aac:	ce 01       	movw	r24, r28
    2aae:	19 95       	eicall
    2ab0:	c0 91 41 13 	lds	r28, 0x1341	; 0x801341 <timers>
    2ab4:	d0 91 42 13 	lds	r29, 0x1342	; 0x801342 <timers+0x1>
    2ab8:	20 97       	sbiw	r28, 0x00	; 0
    2aba:	a9 f0       	breq	.+42     	; 0x2ae6 <SYS_TimerTaskHandler+0xc8>
    2abc:	8a 81       	ldd	r24, Y+2	; 0x02
    2abe:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac0:	ac 81       	ldd	r26, Y+4	; 0x04
    2ac2:	bd 81       	ldd	r27, Y+5	; 0x05
    2ac4:	c8 16       	cp	r12, r24
    2ac6:	d9 06       	cpc	r13, r25
    2ac8:	ea 06       	cpc	r14, r26
    2aca:	fb 06       	cpc	r15, r27
    2acc:	f0 f6       	brcc	.-68     	; 0x2a8a <SYS_TimerTaskHandler+0x6c>
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad2:	ac 81       	ldd	r26, Y+4	; 0x04
    2ad4:	bd 81       	ldd	r27, Y+5	; 0x05
    2ad6:	8c 19       	sub	r24, r12
    2ad8:	9d 09       	sbc	r25, r13
    2ada:	ae 09       	sbc	r26, r14
    2adc:	bf 09       	sbc	r27, r15
    2ade:	8a 83       	std	Y+2, r24	; 0x02
    2ae0:	9b 83       	std	Y+3, r25	; 0x03
    2ae2:	ac 83       	std	Y+4, r26	; 0x04
    2ae4:	bd 83       	std	Y+5, r27	; 0x05
    2ae6:	df 91       	pop	r29
    2ae8:	cf 91       	pop	r28
    2aea:	ff 90       	pop	r15
    2aec:	ef 90       	pop	r14
    2aee:	df 90       	pop	r13
    2af0:	cf 90       	pop	r12
    2af2:	08 95       	ret

00002af4 <__subsf3>:
    2af4:	50 58       	subi	r21, 0x80	; 128

00002af6 <__addsf3>:
    2af6:	bb 27       	eor	r27, r27
    2af8:	aa 27       	eor	r26, r26
    2afa:	0e d0       	rcall	.+28     	; 0x2b18 <__addsf3x>
    2afc:	4d c1       	rjmp	.+666    	; 0x2d98 <__fp_round>
    2afe:	3e d1       	rcall	.+636    	; 0x2d7c <__fp_pscA>
    2b00:	30 f0       	brcs	.+12     	; 0x2b0e <__addsf3+0x18>
    2b02:	43 d1       	rcall	.+646    	; 0x2d8a <__fp_pscB>
    2b04:	20 f0       	brcs	.+8      	; 0x2b0e <__addsf3+0x18>
    2b06:	31 f4       	brne	.+12     	; 0x2b14 <__addsf3+0x1e>
    2b08:	9f 3f       	cpi	r25, 0xFF	; 255
    2b0a:	11 f4       	brne	.+4      	; 0x2b10 <__addsf3+0x1a>
    2b0c:	1e f4       	brtc	.+6      	; 0x2b14 <__addsf3+0x1e>
    2b0e:	33 c1       	rjmp	.+614    	; 0x2d76 <__fp_nan>
    2b10:	0e f4       	brtc	.+2      	; 0x2b14 <__addsf3+0x1e>
    2b12:	e0 95       	com	r30
    2b14:	e7 fb       	bst	r30, 7
    2b16:	29 c1       	rjmp	.+594    	; 0x2d6a <__fp_inf>

00002b18 <__addsf3x>:
    2b18:	e9 2f       	mov	r30, r25
    2b1a:	4f d1       	rcall	.+670    	; 0x2dba <__fp_split3>
    2b1c:	80 f3       	brcs	.-32     	; 0x2afe <__addsf3+0x8>
    2b1e:	ba 17       	cp	r27, r26
    2b20:	62 07       	cpc	r22, r18
    2b22:	73 07       	cpc	r23, r19
    2b24:	84 07       	cpc	r24, r20
    2b26:	95 07       	cpc	r25, r21
    2b28:	18 f0       	brcs	.+6      	; 0x2b30 <__addsf3x+0x18>
    2b2a:	71 f4       	brne	.+28     	; 0x2b48 <__addsf3x+0x30>
    2b2c:	9e f5       	brtc	.+102    	; 0x2b94 <__addsf3x+0x7c>
    2b2e:	67 c1       	rjmp	.+718    	; 0x2dfe <__fp_zero>
    2b30:	0e f4       	brtc	.+2      	; 0x2b34 <__addsf3x+0x1c>
    2b32:	e0 95       	com	r30
    2b34:	0b 2e       	mov	r0, r27
    2b36:	ba 2f       	mov	r27, r26
    2b38:	a0 2d       	mov	r26, r0
    2b3a:	0b 01       	movw	r0, r22
    2b3c:	b9 01       	movw	r22, r18
    2b3e:	90 01       	movw	r18, r0
    2b40:	0c 01       	movw	r0, r24
    2b42:	ca 01       	movw	r24, r20
    2b44:	a0 01       	movw	r20, r0
    2b46:	11 24       	eor	r1, r1
    2b48:	ff 27       	eor	r31, r31
    2b4a:	59 1b       	sub	r21, r25
    2b4c:	99 f0       	breq	.+38     	; 0x2b74 <__addsf3x+0x5c>
    2b4e:	59 3f       	cpi	r21, 0xF9	; 249
    2b50:	50 f4       	brcc	.+20     	; 0x2b66 <__addsf3x+0x4e>
    2b52:	50 3e       	cpi	r21, 0xE0	; 224
    2b54:	68 f1       	brcs	.+90     	; 0x2bb0 <__addsf3x+0x98>
    2b56:	1a 16       	cp	r1, r26
    2b58:	f0 40       	sbci	r31, 0x00	; 0
    2b5a:	a2 2f       	mov	r26, r18
    2b5c:	23 2f       	mov	r18, r19
    2b5e:	34 2f       	mov	r19, r20
    2b60:	44 27       	eor	r20, r20
    2b62:	58 5f       	subi	r21, 0xF8	; 248
    2b64:	f3 cf       	rjmp	.-26     	; 0x2b4c <__addsf3x+0x34>
    2b66:	46 95       	lsr	r20
    2b68:	37 95       	ror	r19
    2b6a:	27 95       	ror	r18
    2b6c:	a7 95       	ror	r26
    2b6e:	f0 40       	sbci	r31, 0x00	; 0
    2b70:	53 95       	inc	r21
    2b72:	c9 f7       	brne	.-14     	; 0x2b66 <__addsf3x+0x4e>
    2b74:	7e f4       	brtc	.+30     	; 0x2b94 <__addsf3x+0x7c>
    2b76:	1f 16       	cp	r1, r31
    2b78:	ba 0b       	sbc	r27, r26
    2b7a:	62 0b       	sbc	r22, r18
    2b7c:	73 0b       	sbc	r23, r19
    2b7e:	84 0b       	sbc	r24, r20
    2b80:	ba f0       	brmi	.+46     	; 0x2bb0 <__addsf3x+0x98>
    2b82:	91 50       	subi	r25, 0x01	; 1
    2b84:	a1 f0       	breq	.+40     	; 0x2bae <__addsf3x+0x96>
    2b86:	ff 0f       	add	r31, r31
    2b88:	bb 1f       	adc	r27, r27
    2b8a:	66 1f       	adc	r22, r22
    2b8c:	77 1f       	adc	r23, r23
    2b8e:	88 1f       	adc	r24, r24
    2b90:	c2 f7       	brpl	.-16     	; 0x2b82 <__addsf3x+0x6a>
    2b92:	0e c0       	rjmp	.+28     	; 0x2bb0 <__addsf3x+0x98>
    2b94:	ba 0f       	add	r27, r26
    2b96:	62 1f       	adc	r22, r18
    2b98:	73 1f       	adc	r23, r19
    2b9a:	84 1f       	adc	r24, r20
    2b9c:	48 f4       	brcc	.+18     	; 0x2bb0 <__addsf3x+0x98>
    2b9e:	87 95       	ror	r24
    2ba0:	77 95       	ror	r23
    2ba2:	67 95       	ror	r22
    2ba4:	b7 95       	ror	r27
    2ba6:	f7 95       	ror	r31
    2ba8:	9e 3f       	cpi	r25, 0xFE	; 254
    2baa:	08 f0       	brcs	.+2      	; 0x2bae <__addsf3x+0x96>
    2bac:	b3 cf       	rjmp	.-154    	; 0x2b14 <__addsf3+0x1e>
    2bae:	93 95       	inc	r25
    2bb0:	88 0f       	add	r24, r24
    2bb2:	08 f0       	brcs	.+2      	; 0x2bb6 <__addsf3x+0x9e>
    2bb4:	99 27       	eor	r25, r25
    2bb6:	ee 0f       	add	r30, r30
    2bb8:	97 95       	ror	r25
    2bba:	87 95       	ror	r24
    2bbc:	08 95       	ret

00002bbe <__divsf3>:
    2bbe:	0c d0       	rcall	.+24     	; 0x2bd8 <__divsf3x>
    2bc0:	eb c0       	rjmp	.+470    	; 0x2d98 <__fp_round>
    2bc2:	e3 d0       	rcall	.+454    	; 0x2d8a <__fp_pscB>
    2bc4:	40 f0       	brcs	.+16     	; 0x2bd6 <__divsf3+0x18>
    2bc6:	da d0       	rcall	.+436    	; 0x2d7c <__fp_pscA>
    2bc8:	30 f0       	brcs	.+12     	; 0x2bd6 <__divsf3+0x18>
    2bca:	21 f4       	brne	.+8      	; 0x2bd4 <__divsf3+0x16>
    2bcc:	5f 3f       	cpi	r21, 0xFF	; 255
    2bce:	19 f0       	breq	.+6      	; 0x2bd6 <__divsf3+0x18>
    2bd0:	cc c0       	rjmp	.+408    	; 0x2d6a <__fp_inf>
    2bd2:	51 11       	cpse	r21, r1
    2bd4:	15 c1       	rjmp	.+554    	; 0x2e00 <__fp_szero>
    2bd6:	cf c0       	rjmp	.+414    	; 0x2d76 <__fp_nan>

00002bd8 <__divsf3x>:
    2bd8:	f0 d0       	rcall	.+480    	; 0x2dba <__fp_split3>
    2bda:	98 f3       	brcs	.-26     	; 0x2bc2 <__divsf3+0x4>

00002bdc <__divsf3_pse>:
    2bdc:	99 23       	and	r25, r25
    2bde:	c9 f3       	breq	.-14     	; 0x2bd2 <__divsf3+0x14>
    2be0:	55 23       	and	r21, r21
    2be2:	b1 f3       	breq	.-20     	; 0x2bd0 <__divsf3+0x12>
    2be4:	95 1b       	sub	r25, r21
    2be6:	55 0b       	sbc	r21, r21
    2be8:	bb 27       	eor	r27, r27
    2bea:	aa 27       	eor	r26, r26
    2bec:	62 17       	cp	r22, r18
    2bee:	73 07       	cpc	r23, r19
    2bf0:	84 07       	cpc	r24, r20
    2bf2:	38 f0       	brcs	.+14     	; 0x2c02 <__divsf3_pse+0x26>
    2bf4:	9f 5f       	subi	r25, 0xFF	; 255
    2bf6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bf8:	22 0f       	add	r18, r18
    2bfa:	33 1f       	adc	r19, r19
    2bfc:	44 1f       	adc	r20, r20
    2bfe:	aa 1f       	adc	r26, r26
    2c00:	a9 f3       	breq	.-22     	; 0x2bec <__divsf3_pse+0x10>
    2c02:	33 d0       	rcall	.+102    	; 0x2c6a <__divsf3_pse+0x8e>
    2c04:	0e 2e       	mov	r0, r30
    2c06:	3a f0       	brmi	.+14     	; 0x2c16 <__divsf3_pse+0x3a>
    2c08:	e0 e8       	ldi	r30, 0x80	; 128
    2c0a:	30 d0       	rcall	.+96     	; 0x2c6c <__divsf3_pse+0x90>
    2c0c:	91 50       	subi	r25, 0x01	; 1
    2c0e:	50 40       	sbci	r21, 0x00	; 0
    2c10:	e6 95       	lsr	r30
    2c12:	00 1c       	adc	r0, r0
    2c14:	ca f7       	brpl	.-14     	; 0x2c08 <__divsf3_pse+0x2c>
    2c16:	29 d0       	rcall	.+82     	; 0x2c6a <__divsf3_pse+0x8e>
    2c18:	fe 2f       	mov	r31, r30
    2c1a:	27 d0       	rcall	.+78     	; 0x2c6a <__divsf3_pse+0x8e>
    2c1c:	66 0f       	add	r22, r22
    2c1e:	77 1f       	adc	r23, r23
    2c20:	88 1f       	adc	r24, r24
    2c22:	bb 1f       	adc	r27, r27
    2c24:	26 17       	cp	r18, r22
    2c26:	37 07       	cpc	r19, r23
    2c28:	48 07       	cpc	r20, r24
    2c2a:	ab 07       	cpc	r26, r27
    2c2c:	b0 e8       	ldi	r27, 0x80	; 128
    2c2e:	09 f0       	breq	.+2      	; 0x2c32 <__divsf3_pse+0x56>
    2c30:	bb 0b       	sbc	r27, r27
    2c32:	80 2d       	mov	r24, r0
    2c34:	bf 01       	movw	r22, r30
    2c36:	ff 27       	eor	r31, r31
    2c38:	93 58       	subi	r25, 0x83	; 131
    2c3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c3c:	2a f0       	brmi	.+10     	; 0x2c48 <__divsf3_pse+0x6c>
    2c3e:	9e 3f       	cpi	r25, 0xFE	; 254
    2c40:	51 05       	cpc	r21, r1
    2c42:	68 f0       	brcs	.+26     	; 0x2c5e <__divsf3_pse+0x82>
    2c44:	92 c0       	rjmp	.+292    	; 0x2d6a <__fp_inf>
    2c46:	dc c0       	rjmp	.+440    	; 0x2e00 <__fp_szero>
    2c48:	5f 3f       	cpi	r21, 0xFF	; 255
    2c4a:	ec f3       	brlt	.-6      	; 0x2c46 <__divsf3_pse+0x6a>
    2c4c:	98 3e       	cpi	r25, 0xE8	; 232
    2c4e:	dc f3       	brlt	.-10     	; 0x2c46 <__divsf3_pse+0x6a>
    2c50:	86 95       	lsr	r24
    2c52:	77 95       	ror	r23
    2c54:	67 95       	ror	r22
    2c56:	b7 95       	ror	r27
    2c58:	f7 95       	ror	r31
    2c5a:	9f 5f       	subi	r25, 0xFF	; 255
    2c5c:	c9 f7       	brne	.-14     	; 0x2c50 <__divsf3_pse+0x74>
    2c5e:	88 0f       	add	r24, r24
    2c60:	91 1d       	adc	r25, r1
    2c62:	96 95       	lsr	r25
    2c64:	87 95       	ror	r24
    2c66:	97 f9       	bld	r25, 7
    2c68:	08 95       	ret
    2c6a:	e1 e0       	ldi	r30, 0x01	; 1
    2c6c:	66 0f       	add	r22, r22
    2c6e:	77 1f       	adc	r23, r23
    2c70:	88 1f       	adc	r24, r24
    2c72:	bb 1f       	adc	r27, r27
    2c74:	62 17       	cp	r22, r18
    2c76:	73 07       	cpc	r23, r19
    2c78:	84 07       	cpc	r24, r20
    2c7a:	ba 07       	cpc	r27, r26
    2c7c:	20 f0       	brcs	.+8      	; 0x2c86 <__divsf3_pse+0xaa>
    2c7e:	62 1b       	sub	r22, r18
    2c80:	73 0b       	sbc	r23, r19
    2c82:	84 0b       	sbc	r24, r20
    2c84:	ba 0b       	sbc	r27, r26
    2c86:	ee 1f       	adc	r30, r30
    2c88:	88 f7       	brcc	.-30     	; 0x2c6c <__divsf3_pse+0x90>
    2c8a:	e0 95       	com	r30
    2c8c:	08 95       	ret

00002c8e <__fixsfsi>:
    2c8e:	04 d0       	rcall	.+8      	; 0x2c98 <__fixunssfsi>
    2c90:	68 94       	set
    2c92:	b1 11       	cpse	r27, r1
    2c94:	b5 c0       	rjmp	.+362    	; 0x2e00 <__fp_szero>
    2c96:	08 95       	ret

00002c98 <__fixunssfsi>:
    2c98:	98 d0       	rcall	.+304    	; 0x2dca <__fp_splitA>
    2c9a:	88 f0       	brcs	.+34     	; 0x2cbe <__fixunssfsi+0x26>
    2c9c:	9f 57       	subi	r25, 0x7F	; 127
    2c9e:	90 f0       	brcs	.+36     	; 0x2cc4 <__fixunssfsi+0x2c>
    2ca0:	b9 2f       	mov	r27, r25
    2ca2:	99 27       	eor	r25, r25
    2ca4:	b7 51       	subi	r27, 0x17	; 23
    2ca6:	a0 f0       	brcs	.+40     	; 0x2cd0 <__fixunssfsi+0x38>
    2ca8:	d1 f0       	breq	.+52     	; 0x2cde <__fixunssfsi+0x46>
    2caa:	66 0f       	add	r22, r22
    2cac:	77 1f       	adc	r23, r23
    2cae:	88 1f       	adc	r24, r24
    2cb0:	99 1f       	adc	r25, r25
    2cb2:	1a f0       	brmi	.+6      	; 0x2cba <__fixunssfsi+0x22>
    2cb4:	ba 95       	dec	r27
    2cb6:	c9 f7       	brne	.-14     	; 0x2caa <__fixunssfsi+0x12>
    2cb8:	12 c0       	rjmp	.+36     	; 0x2cde <__fixunssfsi+0x46>
    2cba:	b1 30       	cpi	r27, 0x01	; 1
    2cbc:	81 f0       	breq	.+32     	; 0x2cde <__fixunssfsi+0x46>
    2cbe:	9f d0       	rcall	.+318    	; 0x2dfe <__fp_zero>
    2cc0:	b1 e0       	ldi	r27, 0x01	; 1
    2cc2:	08 95       	ret
    2cc4:	9c c0       	rjmp	.+312    	; 0x2dfe <__fp_zero>
    2cc6:	67 2f       	mov	r22, r23
    2cc8:	78 2f       	mov	r23, r24
    2cca:	88 27       	eor	r24, r24
    2ccc:	b8 5f       	subi	r27, 0xF8	; 248
    2cce:	39 f0       	breq	.+14     	; 0x2cde <__fixunssfsi+0x46>
    2cd0:	b9 3f       	cpi	r27, 0xF9	; 249
    2cd2:	cc f3       	brlt	.-14     	; 0x2cc6 <__fixunssfsi+0x2e>
    2cd4:	86 95       	lsr	r24
    2cd6:	77 95       	ror	r23
    2cd8:	67 95       	ror	r22
    2cda:	b3 95       	inc	r27
    2cdc:	d9 f7       	brne	.-10     	; 0x2cd4 <__fixunssfsi+0x3c>
    2cde:	3e f4       	brtc	.+14     	; 0x2cee <__fixunssfsi+0x56>
    2ce0:	90 95       	com	r25
    2ce2:	80 95       	com	r24
    2ce4:	70 95       	com	r23
    2ce6:	61 95       	neg	r22
    2ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cea:	8f 4f       	sbci	r24, 0xFF	; 255
    2cec:	9f 4f       	sbci	r25, 0xFF	; 255
    2cee:	08 95       	ret

00002cf0 <__floatunsisf>:
    2cf0:	e8 94       	clt
    2cf2:	09 c0       	rjmp	.+18     	; 0x2d06 <__floatsisf+0x12>

00002cf4 <__floatsisf>:
    2cf4:	97 fb       	bst	r25, 7
    2cf6:	3e f4       	brtc	.+14     	; 0x2d06 <__floatsisf+0x12>
    2cf8:	90 95       	com	r25
    2cfa:	80 95       	com	r24
    2cfc:	70 95       	com	r23
    2cfe:	61 95       	neg	r22
    2d00:	7f 4f       	sbci	r23, 0xFF	; 255
    2d02:	8f 4f       	sbci	r24, 0xFF	; 255
    2d04:	9f 4f       	sbci	r25, 0xFF	; 255
    2d06:	99 23       	and	r25, r25
    2d08:	a9 f0       	breq	.+42     	; 0x2d34 <__floatsisf+0x40>
    2d0a:	f9 2f       	mov	r31, r25
    2d0c:	96 e9       	ldi	r25, 0x96	; 150
    2d0e:	bb 27       	eor	r27, r27
    2d10:	93 95       	inc	r25
    2d12:	f6 95       	lsr	r31
    2d14:	87 95       	ror	r24
    2d16:	77 95       	ror	r23
    2d18:	67 95       	ror	r22
    2d1a:	b7 95       	ror	r27
    2d1c:	f1 11       	cpse	r31, r1
    2d1e:	f8 cf       	rjmp	.-16     	; 0x2d10 <__floatsisf+0x1c>
    2d20:	fa f4       	brpl	.+62     	; 0x2d60 <__floatsisf+0x6c>
    2d22:	bb 0f       	add	r27, r27
    2d24:	11 f4       	brne	.+4      	; 0x2d2a <__floatsisf+0x36>
    2d26:	60 ff       	sbrs	r22, 0
    2d28:	1b c0       	rjmp	.+54     	; 0x2d60 <__floatsisf+0x6c>
    2d2a:	6f 5f       	subi	r22, 0xFF	; 255
    2d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d2e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d30:	9f 4f       	sbci	r25, 0xFF	; 255
    2d32:	16 c0       	rjmp	.+44     	; 0x2d60 <__floatsisf+0x6c>
    2d34:	88 23       	and	r24, r24
    2d36:	11 f0       	breq	.+4      	; 0x2d3c <__floatsisf+0x48>
    2d38:	96 e9       	ldi	r25, 0x96	; 150
    2d3a:	11 c0       	rjmp	.+34     	; 0x2d5e <__floatsisf+0x6a>
    2d3c:	77 23       	and	r23, r23
    2d3e:	21 f0       	breq	.+8      	; 0x2d48 <__floatsisf+0x54>
    2d40:	9e e8       	ldi	r25, 0x8E	; 142
    2d42:	87 2f       	mov	r24, r23
    2d44:	76 2f       	mov	r23, r22
    2d46:	05 c0       	rjmp	.+10     	; 0x2d52 <__floatsisf+0x5e>
    2d48:	66 23       	and	r22, r22
    2d4a:	71 f0       	breq	.+28     	; 0x2d68 <__floatsisf+0x74>
    2d4c:	96 e8       	ldi	r25, 0x86	; 134
    2d4e:	86 2f       	mov	r24, r22
    2d50:	70 e0       	ldi	r23, 0x00	; 0
    2d52:	60 e0       	ldi	r22, 0x00	; 0
    2d54:	2a f0       	brmi	.+10     	; 0x2d60 <__floatsisf+0x6c>
    2d56:	9a 95       	dec	r25
    2d58:	66 0f       	add	r22, r22
    2d5a:	77 1f       	adc	r23, r23
    2d5c:	88 1f       	adc	r24, r24
    2d5e:	da f7       	brpl	.-10     	; 0x2d56 <__floatsisf+0x62>
    2d60:	88 0f       	add	r24, r24
    2d62:	96 95       	lsr	r25
    2d64:	87 95       	ror	r24
    2d66:	97 f9       	bld	r25, 7
    2d68:	08 95       	ret

00002d6a <__fp_inf>:
    2d6a:	97 f9       	bld	r25, 7
    2d6c:	9f 67       	ori	r25, 0x7F	; 127
    2d6e:	80 e8       	ldi	r24, 0x80	; 128
    2d70:	70 e0       	ldi	r23, 0x00	; 0
    2d72:	60 e0       	ldi	r22, 0x00	; 0
    2d74:	08 95       	ret

00002d76 <__fp_nan>:
    2d76:	9f ef       	ldi	r25, 0xFF	; 255
    2d78:	80 ec       	ldi	r24, 0xC0	; 192
    2d7a:	08 95       	ret

00002d7c <__fp_pscA>:
    2d7c:	00 24       	eor	r0, r0
    2d7e:	0a 94       	dec	r0
    2d80:	16 16       	cp	r1, r22
    2d82:	17 06       	cpc	r1, r23
    2d84:	18 06       	cpc	r1, r24
    2d86:	09 06       	cpc	r0, r25
    2d88:	08 95       	ret

00002d8a <__fp_pscB>:
    2d8a:	00 24       	eor	r0, r0
    2d8c:	0a 94       	dec	r0
    2d8e:	12 16       	cp	r1, r18
    2d90:	13 06       	cpc	r1, r19
    2d92:	14 06       	cpc	r1, r20
    2d94:	05 06       	cpc	r0, r21
    2d96:	08 95       	ret

00002d98 <__fp_round>:
    2d98:	09 2e       	mov	r0, r25
    2d9a:	03 94       	inc	r0
    2d9c:	00 0c       	add	r0, r0
    2d9e:	11 f4       	brne	.+4      	; 0x2da4 <__fp_round+0xc>
    2da0:	88 23       	and	r24, r24
    2da2:	52 f0       	brmi	.+20     	; 0x2db8 <__fp_round+0x20>
    2da4:	bb 0f       	add	r27, r27
    2da6:	40 f4       	brcc	.+16     	; 0x2db8 <__fp_round+0x20>
    2da8:	bf 2b       	or	r27, r31
    2daa:	11 f4       	brne	.+4      	; 0x2db0 <__fp_round+0x18>
    2dac:	60 ff       	sbrs	r22, 0
    2dae:	04 c0       	rjmp	.+8      	; 0x2db8 <__fp_round+0x20>
    2db0:	6f 5f       	subi	r22, 0xFF	; 255
    2db2:	7f 4f       	sbci	r23, 0xFF	; 255
    2db4:	8f 4f       	sbci	r24, 0xFF	; 255
    2db6:	9f 4f       	sbci	r25, 0xFF	; 255
    2db8:	08 95       	ret

00002dba <__fp_split3>:
    2dba:	57 fd       	sbrc	r21, 7
    2dbc:	90 58       	subi	r25, 0x80	; 128
    2dbe:	44 0f       	add	r20, r20
    2dc0:	55 1f       	adc	r21, r21
    2dc2:	59 f0       	breq	.+22     	; 0x2dda <__fp_splitA+0x10>
    2dc4:	5f 3f       	cpi	r21, 0xFF	; 255
    2dc6:	71 f0       	breq	.+28     	; 0x2de4 <__fp_splitA+0x1a>
    2dc8:	47 95       	ror	r20

00002dca <__fp_splitA>:
    2dca:	88 0f       	add	r24, r24
    2dcc:	97 fb       	bst	r25, 7
    2dce:	99 1f       	adc	r25, r25
    2dd0:	61 f0       	breq	.+24     	; 0x2dea <__fp_splitA+0x20>
    2dd2:	9f 3f       	cpi	r25, 0xFF	; 255
    2dd4:	79 f0       	breq	.+30     	; 0x2df4 <__fp_splitA+0x2a>
    2dd6:	87 95       	ror	r24
    2dd8:	08 95       	ret
    2dda:	12 16       	cp	r1, r18
    2ddc:	13 06       	cpc	r1, r19
    2dde:	14 06       	cpc	r1, r20
    2de0:	55 1f       	adc	r21, r21
    2de2:	f2 cf       	rjmp	.-28     	; 0x2dc8 <__fp_split3+0xe>
    2de4:	46 95       	lsr	r20
    2de6:	f1 df       	rcall	.-30     	; 0x2dca <__fp_splitA>
    2de8:	08 c0       	rjmp	.+16     	; 0x2dfa <__fp_splitA+0x30>
    2dea:	16 16       	cp	r1, r22
    2dec:	17 06       	cpc	r1, r23
    2dee:	18 06       	cpc	r1, r24
    2df0:	99 1f       	adc	r25, r25
    2df2:	f1 cf       	rjmp	.-30     	; 0x2dd6 <__fp_splitA+0xc>
    2df4:	86 95       	lsr	r24
    2df6:	71 05       	cpc	r23, r1
    2df8:	61 05       	cpc	r22, r1
    2dfa:	08 94       	sec
    2dfc:	08 95       	ret

00002dfe <__fp_zero>:
    2dfe:	e8 94       	clt

00002e00 <__fp_szero>:
    2e00:	bb 27       	eor	r27, r27
    2e02:	66 27       	eor	r22, r22
    2e04:	77 27       	eor	r23, r23
    2e06:	cb 01       	movw	r24, r22
    2e08:	97 f9       	bld	r25, 7
    2e0a:	08 95       	ret

00002e0c <__mulsf3>:
    2e0c:	0b d0       	rcall	.+22     	; 0x2e24 <__mulsf3x>
    2e0e:	c4 cf       	rjmp	.-120    	; 0x2d98 <__fp_round>
    2e10:	b5 df       	rcall	.-150    	; 0x2d7c <__fp_pscA>
    2e12:	28 f0       	brcs	.+10     	; 0x2e1e <__mulsf3+0x12>
    2e14:	ba df       	rcall	.-140    	; 0x2d8a <__fp_pscB>
    2e16:	18 f0       	brcs	.+6      	; 0x2e1e <__mulsf3+0x12>
    2e18:	95 23       	and	r25, r21
    2e1a:	09 f0       	breq	.+2      	; 0x2e1e <__mulsf3+0x12>
    2e1c:	a6 cf       	rjmp	.-180    	; 0x2d6a <__fp_inf>
    2e1e:	ab cf       	rjmp	.-170    	; 0x2d76 <__fp_nan>
    2e20:	11 24       	eor	r1, r1
    2e22:	ee cf       	rjmp	.-36     	; 0x2e00 <__fp_szero>

00002e24 <__mulsf3x>:
    2e24:	ca df       	rcall	.-108    	; 0x2dba <__fp_split3>
    2e26:	a0 f3       	brcs	.-24     	; 0x2e10 <__mulsf3+0x4>

00002e28 <__mulsf3_pse>:
    2e28:	95 9f       	mul	r25, r21
    2e2a:	d1 f3       	breq	.-12     	; 0x2e20 <__mulsf3+0x14>
    2e2c:	95 0f       	add	r25, r21
    2e2e:	50 e0       	ldi	r21, 0x00	; 0
    2e30:	55 1f       	adc	r21, r21
    2e32:	62 9f       	mul	r22, r18
    2e34:	f0 01       	movw	r30, r0
    2e36:	72 9f       	mul	r23, r18
    2e38:	bb 27       	eor	r27, r27
    2e3a:	f0 0d       	add	r31, r0
    2e3c:	b1 1d       	adc	r27, r1
    2e3e:	63 9f       	mul	r22, r19
    2e40:	aa 27       	eor	r26, r26
    2e42:	f0 0d       	add	r31, r0
    2e44:	b1 1d       	adc	r27, r1
    2e46:	aa 1f       	adc	r26, r26
    2e48:	64 9f       	mul	r22, r20
    2e4a:	66 27       	eor	r22, r22
    2e4c:	b0 0d       	add	r27, r0
    2e4e:	a1 1d       	adc	r26, r1
    2e50:	66 1f       	adc	r22, r22
    2e52:	82 9f       	mul	r24, r18
    2e54:	22 27       	eor	r18, r18
    2e56:	b0 0d       	add	r27, r0
    2e58:	a1 1d       	adc	r26, r1
    2e5a:	62 1f       	adc	r22, r18
    2e5c:	73 9f       	mul	r23, r19
    2e5e:	b0 0d       	add	r27, r0
    2e60:	a1 1d       	adc	r26, r1
    2e62:	62 1f       	adc	r22, r18
    2e64:	83 9f       	mul	r24, r19
    2e66:	a0 0d       	add	r26, r0
    2e68:	61 1d       	adc	r22, r1
    2e6a:	22 1f       	adc	r18, r18
    2e6c:	74 9f       	mul	r23, r20
    2e6e:	33 27       	eor	r19, r19
    2e70:	a0 0d       	add	r26, r0
    2e72:	61 1d       	adc	r22, r1
    2e74:	23 1f       	adc	r18, r19
    2e76:	84 9f       	mul	r24, r20
    2e78:	60 0d       	add	r22, r0
    2e7a:	21 1d       	adc	r18, r1
    2e7c:	82 2f       	mov	r24, r18
    2e7e:	76 2f       	mov	r23, r22
    2e80:	6a 2f       	mov	r22, r26
    2e82:	11 24       	eor	r1, r1
    2e84:	9f 57       	subi	r25, 0x7F	; 127
    2e86:	50 40       	sbci	r21, 0x00	; 0
    2e88:	8a f0       	brmi	.+34     	; 0x2eac <__mulsf3_pse+0x84>
    2e8a:	e1 f0       	breq	.+56     	; 0x2ec4 <__mulsf3_pse+0x9c>
    2e8c:	88 23       	and	r24, r24
    2e8e:	4a f0       	brmi	.+18     	; 0x2ea2 <__mulsf3_pse+0x7a>
    2e90:	ee 0f       	add	r30, r30
    2e92:	ff 1f       	adc	r31, r31
    2e94:	bb 1f       	adc	r27, r27
    2e96:	66 1f       	adc	r22, r22
    2e98:	77 1f       	adc	r23, r23
    2e9a:	88 1f       	adc	r24, r24
    2e9c:	91 50       	subi	r25, 0x01	; 1
    2e9e:	50 40       	sbci	r21, 0x00	; 0
    2ea0:	a9 f7       	brne	.-22     	; 0x2e8c <__mulsf3_pse+0x64>
    2ea2:	9e 3f       	cpi	r25, 0xFE	; 254
    2ea4:	51 05       	cpc	r21, r1
    2ea6:	70 f0       	brcs	.+28     	; 0x2ec4 <__mulsf3_pse+0x9c>
    2ea8:	60 cf       	rjmp	.-320    	; 0x2d6a <__fp_inf>
    2eaa:	aa cf       	rjmp	.-172    	; 0x2e00 <__fp_szero>
    2eac:	5f 3f       	cpi	r21, 0xFF	; 255
    2eae:	ec f3       	brlt	.-6      	; 0x2eaa <__mulsf3_pse+0x82>
    2eb0:	98 3e       	cpi	r25, 0xE8	; 232
    2eb2:	dc f3       	brlt	.-10     	; 0x2eaa <__mulsf3_pse+0x82>
    2eb4:	86 95       	lsr	r24
    2eb6:	77 95       	ror	r23
    2eb8:	67 95       	ror	r22
    2eba:	b7 95       	ror	r27
    2ebc:	f7 95       	ror	r31
    2ebe:	e7 95       	ror	r30
    2ec0:	9f 5f       	subi	r25, 0xFF	; 255
    2ec2:	c1 f7       	brne	.-16     	; 0x2eb4 <__mulsf3_pse+0x8c>
    2ec4:	fe 2b       	or	r31, r30
    2ec6:	88 0f       	add	r24, r24
    2ec8:	91 1d       	adc	r25, r1
    2eca:	96 95       	lsr	r25
    2ecc:	87 95       	ror	r24
    2ece:	97 f9       	bld	r25, 7
    2ed0:	08 95       	ret

00002ed2 <__udivmodsi4>:
    2ed2:	a1 e2       	ldi	r26, 0x21	; 33
    2ed4:	1a 2e       	mov	r1, r26
    2ed6:	aa 1b       	sub	r26, r26
    2ed8:	bb 1b       	sub	r27, r27
    2eda:	fd 01       	movw	r30, r26
    2edc:	0d c0       	rjmp	.+26     	; 0x2ef8 <__udivmodsi4_ep>

00002ede <__udivmodsi4_loop>:
    2ede:	aa 1f       	adc	r26, r26
    2ee0:	bb 1f       	adc	r27, r27
    2ee2:	ee 1f       	adc	r30, r30
    2ee4:	ff 1f       	adc	r31, r31
    2ee6:	a2 17       	cp	r26, r18
    2ee8:	b3 07       	cpc	r27, r19
    2eea:	e4 07       	cpc	r30, r20
    2eec:	f5 07       	cpc	r31, r21
    2eee:	20 f0       	brcs	.+8      	; 0x2ef8 <__udivmodsi4_ep>
    2ef0:	a2 1b       	sub	r26, r18
    2ef2:	b3 0b       	sbc	r27, r19
    2ef4:	e4 0b       	sbc	r30, r20
    2ef6:	f5 0b       	sbc	r31, r21

00002ef8 <__udivmodsi4_ep>:
    2ef8:	66 1f       	adc	r22, r22
    2efa:	77 1f       	adc	r23, r23
    2efc:	88 1f       	adc	r24, r24
    2efe:	99 1f       	adc	r25, r25
    2f00:	1a 94       	dec	r1
    2f02:	69 f7       	brne	.-38     	; 0x2ede <__udivmodsi4_loop>
    2f04:	60 95       	com	r22
    2f06:	70 95       	com	r23
    2f08:	80 95       	com	r24
    2f0a:	90 95       	com	r25
    2f0c:	9b 01       	movw	r18, r22
    2f0e:	ac 01       	movw	r20, r24
    2f10:	bd 01       	movw	r22, r26
    2f12:	cf 01       	movw	r24, r30
    2f14:	08 95       	ret

00002f16 <__divmodsi4>:
    2f16:	05 2e       	mov	r0, r21
    2f18:	97 fb       	bst	r25, 7
    2f1a:	16 f4       	brtc	.+4      	; 0x2f20 <__divmodsi4+0xa>
    2f1c:	00 94       	com	r0
    2f1e:	0f d0       	rcall	.+30     	; 0x2f3e <__negsi2>
    2f20:	57 fd       	sbrc	r21, 7
    2f22:	05 d0       	rcall	.+10     	; 0x2f2e <__divmodsi4_neg2>
    2f24:	d6 df       	rcall	.-84     	; 0x2ed2 <__udivmodsi4>
    2f26:	07 fc       	sbrc	r0, 7
    2f28:	02 d0       	rcall	.+4      	; 0x2f2e <__divmodsi4_neg2>
    2f2a:	46 f4       	brtc	.+16     	; 0x2f3c <__divmodsi4_exit>
    2f2c:	08 c0       	rjmp	.+16     	; 0x2f3e <__negsi2>

00002f2e <__divmodsi4_neg2>:
    2f2e:	50 95       	com	r21
    2f30:	40 95       	com	r20
    2f32:	30 95       	com	r19
    2f34:	21 95       	neg	r18
    2f36:	3f 4f       	sbci	r19, 0xFF	; 255
    2f38:	4f 4f       	sbci	r20, 0xFF	; 255
    2f3a:	5f 4f       	sbci	r21, 0xFF	; 255

00002f3c <__divmodsi4_exit>:
    2f3c:	08 95       	ret

00002f3e <__negsi2>:
    2f3e:	90 95       	com	r25
    2f40:	80 95       	com	r24
    2f42:	70 95       	com	r23
    2f44:	61 95       	neg	r22
    2f46:	7f 4f       	sbci	r23, 0xFF	; 255
    2f48:	8f 4f       	sbci	r24, 0xFF	; 255
    2f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f4c:	08 95       	ret

00002f4e <__tablejump2__>:
    2f4e:	ee 0f       	add	r30, r30
    2f50:	ff 1f       	adc	r31, r31
    2f52:	88 1f       	adc	r24, r24
    2f54:	8b bf       	out	0x3b, r24	; 59
    2f56:	07 90       	elpm	r0, Z+
    2f58:	f6 91       	elpm	r31, Z
    2f5a:	e0 2d       	mov	r30, r0
    2f5c:	19 94       	eijmp

00002f5e <do_rand>:
    2f5e:	8f 92       	push	r8
    2f60:	9f 92       	push	r9
    2f62:	af 92       	push	r10
    2f64:	bf 92       	push	r11
    2f66:	cf 92       	push	r12
    2f68:	df 92       	push	r13
    2f6a:	ef 92       	push	r14
    2f6c:	ff 92       	push	r15
    2f6e:	cf 93       	push	r28
    2f70:	df 93       	push	r29
    2f72:	ec 01       	movw	r28, r24
    2f74:	68 81       	ld	r22, Y
    2f76:	79 81       	ldd	r23, Y+1	; 0x01
    2f78:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f7c:	61 15       	cp	r22, r1
    2f7e:	71 05       	cpc	r23, r1
    2f80:	81 05       	cpc	r24, r1
    2f82:	91 05       	cpc	r25, r1
    2f84:	21 f4       	brne	.+8      	; 0x2f8e <do_rand+0x30>
    2f86:	64 e2       	ldi	r22, 0x24	; 36
    2f88:	79 ed       	ldi	r23, 0xD9	; 217
    2f8a:	8b e5       	ldi	r24, 0x5B	; 91
    2f8c:	97 e0       	ldi	r25, 0x07	; 7
    2f8e:	2d e1       	ldi	r18, 0x1D	; 29
    2f90:	33 ef       	ldi	r19, 0xF3	; 243
    2f92:	41 e0       	ldi	r20, 0x01	; 1
    2f94:	50 e0       	ldi	r21, 0x00	; 0
    2f96:	bf df       	rcall	.-130    	; 0x2f16 <__divmodsi4>
    2f98:	49 01       	movw	r8, r18
    2f9a:	5a 01       	movw	r10, r20
    2f9c:	9b 01       	movw	r18, r22
    2f9e:	ac 01       	movw	r20, r24
    2fa0:	a7 ea       	ldi	r26, 0xA7	; 167
    2fa2:	b1 e4       	ldi	r27, 0x41	; 65
    2fa4:	2d d3       	rcall	.+1626   	; 0x3600 <__muluhisi3>
    2fa6:	6b 01       	movw	r12, r22
    2fa8:	7c 01       	movw	r14, r24
    2faa:	ac ee       	ldi	r26, 0xEC	; 236
    2fac:	b4 ef       	ldi	r27, 0xF4	; 244
    2fae:	a5 01       	movw	r20, r10
    2fb0:	94 01       	movw	r18, r8
    2fb2:	32 d3       	rcall	.+1636   	; 0x3618 <__mulohisi3>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	8c 0d       	add	r24, r12
    2fba:	9d 1d       	adc	r25, r13
    2fbc:	ae 1d       	adc	r26, r14
    2fbe:	bf 1d       	adc	r27, r15
    2fc0:	b7 ff       	sbrs	r27, 7
    2fc2:	03 c0       	rjmp	.+6      	; 0x2fca <do_rand+0x6c>
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	a1 09       	sbc	r26, r1
    2fc8:	b0 48       	sbci	r27, 0x80	; 128
    2fca:	88 83       	st	Y, r24
    2fcc:	99 83       	std	Y+1, r25	; 0x01
    2fce:	aa 83       	std	Y+2, r26	; 0x02
    2fd0:	bb 83       	std	Y+3, r27	; 0x03
    2fd2:	9f 77       	andi	r25, 0x7F	; 127
    2fd4:	df 91       	pop	r29
    2fd6:	cf 91       	pop	r28
    2fd8:	ff 90       	pop	r15
    2fda:	ef 90       	pop	r14
    2fdc:	df 90       	pop	r13
    2fde:	cf 90       	pop	r12
    2fe0:	bf 90       	pop	r11
    2fe2:	af 90       	pop	r10
    2fe4:	9f 90       	pop	r9
    2fe6:	8f 90       	pop	r8
    2fe8:	08 95       	ret

00002fea <rand_r>:
    2fea:	b9 cf       	rjmp	.-142    	; 0x2f5e <do_rand>

00002fec <rand>:
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	92 e0       	ldi	r25, 0x02	; 2
    2ff0:	b6 cf       	rjmp	.-148    	; 0x2f5e <do_rand>

00002ff2 <srand>:
    2ff2:	a0 e0       	ldi	r26, 0x00	; 0
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    2ffa:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2ffe:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    3002:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    3006:	08 95       	ret

00003008 <memcpy>:
    3008:	fb 01       	movw	r30, r22
    300a:	dc 01       	movw	r26, r24
    300c:	02 c0       	rjmp	.+4      	; 0x3012 <memcpy+0xa>
    300e:	01 90       	ld	r0, Z+
    3010:	0d 92       	st	X+, r0
    3012:	41 50       	subi	r20, 0x01	; 1
    3014:	50 40       	sbci	r21, 0x00	; 0
    3016:	d8 f7       	brcc	.-10     	; 0x300e <memcpy+0x6>
    3018:	08 95       	ret

0000301a <printf>:
    301a:	cf 93       	push	r28
    301c:	df 93       	push	r29
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
    3022:	ae 01       	movw	r20, r28
    3024:	4a 5f       	subi	r20, 0xFA	; 250
    3026:	5f 4f       	sbci	r21, 0xFF	; 255
    3028:	fa 01       	movw	r30, r20
    302a:	61 91       	ld	r22, Z+
    302c:	71 91       	ld	r23, Z+
    302e:	af 01       	movw	r20, r30
    3030:	80 91 6e 13 	lds	r24, 0x136E	; 0x80136e <__iob+0x2>
    3034:	90 91 6f 13 	lds	r25, 0x136F	; 0x80136f <__iob+0x3>
    3038:	36 d0       	rcall	.+108    	; 0x30a6 <vfprintf>
    303a:	df 91       	pop	r29
    303c:	cf 91       	pop	r28
    303e:	08 95       	ret

00003040 <putchar>:
    3040:	60 91 6e 13 	lds	r22, 0x136E	; 0x80136e <__iob+0x2>
    3044:	70 91 6f 13 	lds	r23, 0x136F	; 0x80136f <__iob+0x3>
    3048:	41 c2       	rjmp	.+1154   	; 0x34cc <fputc>

0000304a <sprintf>:
    304a:	0f 93       	push	r16
    304c:	1f 93       	push	r17
    304e:	cf 93       	push	r28
    3050:	df 93       	push	r29
    3052:	cd b7       	in	r28, 0x3d	; 61
    3054:	de b7       	in	r29, 0x3e	; 62
    3056:	2e 97       	sbiw	r28, 0x0e	; 14
    3058:	0f b6       	in	r0, 0x3f	; 63
    305a:	f8 94       	cli
    305c:	de bf       	out	0x3e, r29	; 62
    305e:	0f be       	out	0x3f, r0	; 63
    3060:	cd bf       	out	0x3d, r28	; 61
    3062:	0e 89       	ldd	r16, Y+22	; 0x16
    3064:	1f 89       	ldd	r17, Y+23	; 0x17
    3066:	86 e0       	ldi	r24, 0x06	; 6
    3068:	8c 83       	std	Y+4, r24	; 0x04
    306a:	1a 83       	std	Y+2, r17	; 0x02
    306c:	09 83       	std	Y+1, r16	; 0x01
    306e:	8f ef       	ldi	r24, 0xFF	; 255
    3070:	9f e7       	ldi	r25, 0x7F	; 127
    3072:	9e 83       	std	Y+6, r25	; 0x06
    3074:	8d 83       	std	Y+5, r24	; 0x05
    3076:	ae 01       	movw	r20, r28
    3078:	46 5e       	subi	r20, 0xE6	; 230
    307a:	5f 4f       	sbci	r21, 0xFF	; 255
    307c:	68 8d       	ldd	r22, Y+24	; 0x18
    307e:	79 8d       	ldd	r23, Y+25	; 0x19
    3080:	ce 01       	movw	r24, r28
    3082:	01 96       	adiw	r24, 0x01	; 1
    3084:	10 d0       	rcall	.+32     	; 0x30a6 <vfprintf>
    3086:	ef 81       	ldd	r30, Y+7	; 0x07
    3088:	f8 85       	ldd	r31, Y+8	; 0x08
    308a:	e0 0f       	add	r30, r16
    308c:	f1 1f       	adc	r31, r17
    308e:	10 82       	st	Z, r1
    3090:	2e 96       	adiw	r28, 0x0e	; 14
    3092:	0f b6       	in	r0, 0x3f	; 63
    3094:	f8 94       	cli
    3096:	de bf       	out	0x3e, r29	; 62
    3098:	0f be       	out	0x3f, r0	; 63
    309a:	cd bf       	out	0x3d, r28	; 61
    309c:	df 91       	pop	r29
    309e:	cf 91       	pop	r28
    30a0:	1f 91       	pop	r17
    30a2:	0f 91       	pop	r16
    30a4:	08 95       	ret

000030a6 <vfprintf>:
    30a6:	2f 92       	push	r2
    30a8:	3f 92       	push	r3
    30aa:	4f 92       	push	r4
    30ac:	5f 92       	push	r5
    30ae:	6f 92       	push	r6
    30b0:	7f 92       	push	r7
    30b2:	8f 92       	push	r8
    30b4:	9f 92       	push	r9
    30b6:	af 92       	push	r10
    30b8:	bf 92       	push	r11
    30ba:	cf 92       	push	r12
    30bc:	df 92       	push	r13
    30be:	ef 92       	push	r14
    30c0:	ff 92       	push	r15
    30c2:	0f 93       	push	r16
    30c4:	1f 93       	push	r17
    30c6:	cf 93       	push	r28
    30c8:	df 93       	push	r29
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
    30ce:	2b 97       	sbiw	r28, 0x0b	; 11
    30d0:	0f b6       	in	r0, 0x3f	; 63
    30d2:	f8 94       	cli
    30d4:	de bf       	out	0x3e, r29	; 62
    30d6:	0f be       	out	0x3f, r0	; 63
    30d8:	cd bf       	out	0x3d, r28	; 61
    30da:	6c 01       	movw	r12, r24
    30dc:	7b 01       	movw	r14, r22
    30de:	8a 01       	movw	r16, r20
    30e0:	fc 01       	movw	r30, r24
    30e2:	17 82       	std	Z+7, r1	; 0x07
    30e4:	16 82       	std	Z+6, r1	; 0x06
    30e6:	83 81       	ldd	r24, Z+3	; 0x03
    30e8:	81 ff       	sbrs	r24, 1
    30ea:	bf c1       	rjmp	.+894    	; 0x346a <vfprintf+0x3c4>
    30ec:	ce 01       	movw	r24, r28
    30ee:	01 96       	adiw	r24, 0x01	; 1
    30f0:	3c 01       	movw	r6, r24
    30f2:	f6 01       	movw	r30, r12
    30f4:	93 81       	ldd	r25, Z+3	; 0x03
    30f6:	f7 01       	movw	r30, r14
    30f8:	93 fd       	sbrc	r25, 3
    30fa:	85 91       	lpm	r24, Z+
    30fc:	93 ff       	sbrs	r25, 3
    30fe:	81 91       	ld	r24, Z+
    3100:	7f 01       	movw	r14, r30
    3102:	88 23       	and	r24, r24
    3104:	09 f4       	brne	.+2      	; 0x3108 <vfprintf+0x62>
    3106:	ad c1       	rjmp	.+858    	; 0x3462 <vfprintf+0x3bc>
    3108:	85 32       	cpi	r24, 0x25	; 37
    310a:	39 f4       	brne	.+14     	; 0x311a <vfprintf+0x74>
    310c:	93 fd       	sbrc	r25, 3
    310e:	85 91       	lpm	r24, Z+
    3110:	93 ff       	sbrs	r25, 3
    3112:	81 91       	ld	r24, Z+
    3114:	7f 01       	movw	r14, r30
    3116:	85 32       	cpi	r24, 0x25	; 37
    3118:	21 f4       	brne	.+8      	; 0x3122 <vfprintf+0x7c>
    311a:	b6 01       	movw	r22, r12
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	d6 d1       	rcall	.+940    	; 0x34cc <fputc>
    3120:	e8 cf       	rjmp	.-48     	; 0x30f2 <vfprintf+0x4c>
    3122:	91 2c       	mov	r9, r1
    3124:	21 2c       	mov	r2, r1
    3126:	31 2c       	mov	r3, r1
    3128:	ff e1       	ldi	r31, 0x1F	; 31
    312a:	f3 15       	cp	r31, r3
    312c:	d8 f0       	brcs	.+54     	; 0x3164 <vfprintf+0xbe>
    312e:	8b 32       	cpi	r24, 0x2B	; 43
    3130:	79 f0       	breq	.+30     	; 0x3150 <vfprintf+0xaa>
    3132:	38 f4       	brcc	.+14     	; 0x3142 <vfprintf+0x9c>
    3134:	80 32       	cpi	r24, 0x20	; 32
    3136:	79 f0       	breq	.+30     	; 0x3156 <vfprintf+0xb0>
    3138:	83 32       	cpi	r24, 0x23	; 35
    313a:	a1 f4       	brne	.+40     	; 0x3164 <vfprintf+0xbe>
    313c:	23 2d       	mov	r18, r3
    313e:	20 61       	ori	r18, 0x10	; 16
    3140:	1d c0       	rjmp	.+58     	; 0x317c <vfprintf+0xd6>
    3142:	8d 32       	cpi	r24, 0x2D	; 45
    3144:	61 f0       	breq	.+24     	; 0x315e <vfprintf+0xb8>
    3146:	80 33       	cpi	r24, 0x30	; 48
    3148:	69 f4       	brne	.+26     	; 0x3164 <vfprintf+0xbe>
    314a:	23 2d       	mov	r18, r3
    314c:	21 60       	ori	r18, 0x01	; 1
    314e:	16 c0       	rjmp	.+44     	; 0x317c <vfprintf+0xd6>
    3150:	83 2d       	mov	r24, r3
    3152:	82 60       	ori	r24, 0x02	; 2
    3154:	38 2e       	mov	r3, r24
    3156:	e3 2d       	mov	r30, r3
    3158:	e4 60       	ori	r30, 0x04	; 4
    315a:	3e 2e       	mov	r3, r30
    315c:	2a c0       	rjmp	.+84     	; 0x31b2 <vfprintf+0x10c>
    315e:	f3 2d       	mov	r31, r3
    3160:	f8 60       	ori	r31, 0x08	; 8
    3162:	1d c0       	rjmp	.+58     	; 0x319e <vfprintf+0xf8>
    3164:	37 fc       	sbrc	r3, 7
    3166:	2d c0       	rjmp	.+90     	; 0x31c2 <vfprintf+0x11c>
    3168:	20 ed       	ldi	r18, 0xD0	; 208
    316a:	28 0f       	add	r18, r24
    316c:	2a 30       	cpi	r18, 0x0A	; 10
    316e:	40 f0       	brcs	.+16     	; 0x3180 <vfprintf+0xda>
    3170:	8e 32       	cpi	r24, 0x2E	; 46
    3172:	b9 f4       	brne	.+46     	; 0x31a2 <vfprintf+0xfc>
    3174:	36 fc       	sbrc	r3, 6
    3176:	75 c1       	rjmp	.+746    	; 0x3462 <vfprintf+0x3bc>
    3178:	23 2d       	mov	r18, r3
    317a:	20 64       	ori	r18, 0x40	; 64
    317c:	32 2e       	mov	r3, r18
    317e:	19 c0       	rjmp	.+50     	; 0x31b2 <vfprintf+0x10c>
    3180:	36 fe       	sbrs	r3, 6
    3182:	06 c0       	rjmp	.+12     	; 0x3190 <vfprintf+0xea>
    3184:	8a e0       	ldi	r24, 0x0A	; 10
    3186:	98 9e       	mul	r9, r24
    3188:	20 0d       	add	r18, r0
    318a:	11 24       	eor	r1, r1
    318c:	92 2e       	mov	r9, r18
    318e:	11 c0       	rjmp	.+34     	; 0x31b2 <vfprintf+0x10c>
    3190:	ea e0       	ldi	r30, 0x0A	; 10
    3192:	2e 9e       	mul	r2, r30
    3194:	20 0d       	add	r18, r0
    3196:	11 24       	eor	r1, r1
    3198:	22 2e       	mov	r2, r18
    319a:	f3 2d       	mov	r31, r3
    319c:	f0 62       	ori	r31, 0x20	; 32
    319e:	3f 2e       	mov	r3, r31
    31a0:	08 c0       	rjmp	.+16     	; 0x31b2 <vfprintf+0x10c>
    31a2:	8c 36       	cpi	r24, 0x6C	; 108
    31a4:	21 f4       	brne	.+8      	; 0x31ae <vfprintf+0x108>
    31a6:	83 2d       	mov	r24, r3
    31a8:	80 68       	ori	r24, 0x80	; 128
    31aa:	38 2e       	mov	r3, r24
    31ac:	02 c0       	rjmp	.+4      	; 0x31b2 <vfprintf+0x10c>
    31ae:	88 36       	cpi	r24, 0x68	; 104
    31b0:	41 f4       	brne	.+16     	; 0x31c2 <vfprintf+0x11c>
    31b2:	f7 01       	movw	r30, r14
    31b4:	93 fd       	sbrc	r25, 3
    31b6:	85 91       	lpm	r24, Z+
    31b8:	93 ff       	sbrs	r25, 3
    31ba:	81 91       	ld	r24, Z+
    31bc:	7f 01       	movw	r14, r30
    31be:	81 11       	cpse	r24, r1
    31c0:	b3 cf       	rjmp	.-154    	; 0x3128 <vfprintf+0x82>
    31c2:	98 2f       	mov	r25, r24
    31c4:	9f 7d       	andi	r25, 0xDF	; 223
    31c6:	95 54       	subi	r25, 0x45	; 69
    31c8:	93 30       	cpi	r25, 0x03	; 3
    31ca:	28 f4       	brcc	.+10     	; 0x31d6 <vfprintf+0x130>
    31cc:	0c 5f       	subi	r16, 0xFC	; 252
    31ce:	1f 4f       	sbci	r17, 0xFF	; 255
    31d0:	9f e3       	ldi	r25, 0x3F	; 63
    31d2:	99 83       	std	Y+1, r25	; 0x01
    31d4:	0d c0       	rjmp	.+26     	; 0x31f0 <vfprintf+0x14a>
    31d6:	83 36       	cpi	r24, 0x63	; 99
    31d8:	31 f0       	breq	.+12     	; 0x31e6 <vfprintf+0x140>
    31da:	83 37       	cpi	r24, 0x73	; 115
    31dc:	71 f0       	breq	.+28     	; 0x31fa <vfprintf+0x154>
    31de:	83 35       	cpi	r24, 0x53	; 83
    31e0:	09 f0       	breq	.+2      	; 0x31e4 <vfprintf+0x13e>
    31e2:	55 c0       	rjmp	.+170    	; 0x328e <vfprintf+0x1e8>
    31e4:	20 c0       	rjmp	.+64     	; 0x3226 <vfprintf+0x180>
    31e6:	f8 01       	movw	r30, r16
    31e8:	80 81       	ld	r24, Z
    31ea:	89 83       	std	Y+1, r24	; 0x01
    31ec:	0e 5f       	subi	r16, 0xFE	; 254
    31ee:	1f 4f       	sbci	r17, 0xFF	; 255
    31f0:	88 24       	eor	r8, r8
    31f2:	83 94       	inc	r8
    31f4:	91 2c       	mov	r9, r1
    31f6:	53 01       	movw	r10, r6
    31f8:	12 c0       	rjmp	.+36     	; 0x321e <vfprintf+0x178>
    31fa:	28 01       	movw	r4, r16
    31fc:	f2 e0       	ldi	r31, 0x02	; 2
    31fe:	4f 0e       	add	r4, r31
    3200:	51 1c       	adc	r5, r1
    3202:	f8 01       	movw	r30, r16
    3204:	a0 80       	ld	r10, Z
    3206:	b1 80       	ldd	r11, Z+1	; 0x01
    3208:	36 fe       	sbrs	r3, 6
    320a:	03 c0       	rjmp	.+6      	; 0x3212 <vfprintf+0x16c>
    320c:	69 2d       	mov	r22, r9
    320e:	70 e0       	ldi	r23, 0x00	; 0
    3210:	02 c0       	rjmp	.+4      	; 0x3216 <vfprintf+0x170>
    3212:	6f ef       	ldi	r22, 0xFF	; 255
    3214:	7f ef       	ldi	r23, 0xFF	; 255
    3216:	c5 01       	movw	r24, r10
    3218:	4e d1       	rcall	.+668    	; 0x34b6 <strnlen>
    321a:	4c 01       	movw	r8, r24
    321c:	82 01       	movw	r16, r4
    321e:	f3 2d       	mov	r31, r3
    3220:	ff 77       	andi	r31, 0x7F	; 127
    3222:	3f 2e       	mov	r3, r31
    3224:	15 c0       	rjmp	.+42     	; 0x3250 <vfprintf+0x1aa>
    3226:	28 01       	movw	r4, r16
    3228:	22 e0       	ldi	r18, 0x02	; 2
    322a:	42 0e       	add	r4, r18
    322c:	51 1c       	adc	r5, r1
    322e:	f8 01       	movw	r30, r16
    3230:	a0 80       	ld	r10, Z
    3232:	b1 80       	ldd	r11, Z+1	; 0x01
    3234:	36 fe       	sbrs	r3, 6
    3236:	03 c0       	rjmp	.+6      	; 0x323e <vfprintf+0x198>
    3238:	69 2d       	mov	r22, r9
    323a:	70 e0       	ldi	r23, 0x00	; 0
    323c:	02 c0       	rjmp	.+4      	; 0x3242 <vfprintf+0x19c>
    323e:	6f ef       	ldi	r22, 0xFF	; 255
    3240:	7f ef       	ldi	r23, 0xFF	; 255
    3242:	c5 01       	movw	r24, r10
    3244:	2d d1       	rcall	.+602    	; 0x34a0 <strnlen_P>
    3246:	4c 01       	movw	r8, r24
    3248:	f3 2d       	mov	r31, r3
    324a:	f0 68       	ori	r31, 0x80	; 128
    324c:	3f 2e       	mov	r3, r31
    324e:	82 01       	movw	r16, r4
    3250:	33 fc       	sbrc	r3, 3
    3252:	19 c0       	rjmp	.+50     	; 0x3286 <vfprintf+0x1e0>
    3254:	82 2d       	mov	r24, r2
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	88 16       	cp	r8, r24
    325a:	99 06       	cpc	r9, r25
    325c:	a0 f4       	brcc	.+40     	; 0x3286 <vfprintf+0x1e0>
    325e:	b6 01       	movw	r22, r12
    3260:	80 e2       	ldi	r24, 0x20	; 32
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	33 d1       	rcall	.+614    	; 0x34cc <fputc>
    3266:	2a 94       	dec	r2
    3268:	f5 cf       	rjmp	.-22     	; 0x3254 <vfprintf+0x1ae>
    326a:	f5 01       	movw	r30, r10
    326c:	37 fc       	sbrc	r3, 7
    326e:	85 91       	lpm	r24, Z+
    3270:	37 fe       	sbrs	r3, 7
    3272:	81 91       	ld	r24, Z+
    3274:	5f 01       	movw	r10, r30
    3276:	b6 01       	movw	r22, r12
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	28 d1       	rcall	.+592    	; 0x34cc <fputc>
    327c:	21 10       	cpse	r2, r1
    327e:	2a 94       	dec	r2
    3280:	21 e0       	ldi	r18, 0x01	; 1
    3282:	82 1a       	sub	r8, r18
    3284:	91 08       	sbc	r9, r1
    3286:	81 14       	cp	r8, r1
    3288:	91 04       	cpc	r9, r1
    328a:	79 f7       	brne	.-34     	; 0x326a <vfprintf+0x1c4>
    328c:	e1 c0       	rjmp	.+450    	; 0x3450 <vfprintf+0x3aa>
    328e:	84 36       	cpi	r24, 0x64	; 100
    3290:	11 f0       	breq	.+4      	; 0x3296 <vfprintf+0x1f0>
    3292:	89 36       	cpi	r24, 0x69	; 105
    3294:	39 f5       	brne	.+78     	; 0x32e4 <vfprintf+0x23e>
    3296:	f8 01       	movw	r30, r16
    3298:	37 fe       	sbrs	r3, 7
    329a:	07 c0       	rjmp	.+14     	; 0x32aa <vfprintf+0x204>
    329c:	60 81       	ld	r22, Z
    329e:	71 81       	ldd	r23, Z+1	; 0x01
    32a0:	82 81       	ldd	r24, Z+2	; 0x02
    32a2:	93 81       	ldd	r25, Z+3	; 0x03
    32a4:	0c 5f       	subi	r16, 0xFC	; 252
    32a6:	1f 4f       	sbci	r17, 0xFF	; 255
    32a8:	08 c0       	rjmp	.+16     	; 0x32ba <vfprintf+0x214>
    32aa:	60 81       	ld	r22, Z
    32ac:	71 81       	ldd	r23, Z+1	; 0x01
    32ae:	07 2e       	mov	r0, r23
    32b0:	00 0c       	add	r0, r0
    32b2:	88 0b       	sbc	r24, r24
    32b4:	99 0b       	sbc	r25, r25
    32b6:	0e 5f       	subi	r16, 0xFE	; 254
    32b8:	1f 4f       	sbci	r17, 0xFF	; 255
    32ba:	f3 2d       	mov	r31, r3
    32bc:	ff 76       	andi	r31, 0x6F	; 111
    32be:	3f 2e       	mov	r3, r31
    32c0:	97 ff       	sbrs	r25, 7
    32c2:	09 c0       	rjmp	.+18     	; 0x32d6 <vfprintf+0x230>
    32c4:	90 95       	com	r25
    32c6:	80 95       	com	r24
    32c8:	70 95       	com	r23
    32ca:	61 95       	neg	r22
    32cc:	7f 4f       	sbci	r23, 0xFF	; 255
    32ce:	8f 4f       	sbci	r24, 0xFF	; 255
    32d0:	9f 4f       	sbci	r25, 0xFF	; 255
    32d2:	f0 68       	ori	r31, 0x80	; 128
    32d4:	3f 2e       	mov	r3, r31
    32d6:	2a e0       	ldi	r18, 0x0A	; 10
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	a3 01       	movw	r20, r6
    32dc:	33 d1       	rcall	.+614    	; 0x3544 <__ultoa_invert>
    32de:	88 2e       	mov	r8, r24
    32e0:	86 18       	sub	r8, r6
    32e2:	44 c0       	rjmp	.+136    	; 0x336c <vfprintf+0x2c6>
    32e4:	85 37       	cpi	r24, 0x75	; 117
    32e6:	31 f4       	brne	.+12     	; 0x32f4 <vfprintf+0x24e>
    32e8:	23 2d       	mov	r18, r3
    32ea:	2f 7e       	andi	r18, 0xEF	; 239
    32ec:	b2 2e       	mov	r11, r18
    32ee:	2a e0       	ldi	r18, 0x0A	; 10
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	25 c0       	rjmp	.+74     	; 0x333e <vfprintf+0x298>
    32f4:	93 2d       	mov	r25, r3
    32f6:	99 7f       	andi	r25, 0xF9	; 249
    32f8:	b9 2e       	mov	r11, r25
    32fa:	8f 36       	cpi	r24, 0x6F	; 111
    32fc:	c1 f0       	breq	.+48     	; 0x332e <vfprintf+0x288>
    32fe:	18 f4       	brcc	.+6      	; 0x3306 <vfprintf+0x260>
    3300:	88 35       	cpi	r24, 0x58	; 88
    3302:	79 f0       	breq	.+30     	; 0x3322 <vfprintf+0x27c>
    3304:	ae c0       	rjmp	.+348    	; 0x3462 <vfprintf+0x3bc>
    3306:	80 37       	cpi	r24, 0x70	; 112
    3308:	19 f0       	breq	.+6      	; 0x3310 <vfprintf+0x26a>
    330a:	88 37       	cpi	r24, 0x78	; 120
    330c:	21 f0       	breq	.+8      	; 0x3316 <vfprintf+0x270>
    330e:	a9 c0       	rjmp	.+338    	; 0x3462 <vfprintf+0x3bc>
    3310:	e9 2f       	mov	r30, r25
    3312:	e0 61       	ori	r30, 0x10	; 16
    3314:	be 2e       	mov	r11, r30
    3316:	b4 fe       	sbrs	r11, 4
    3318:	0d c0       	rjmp	.+26     	; 0x3334 <vfprintf+0x28e>
    331a:	fb 2d       	mov	r31, r11
    331c:	f4 60       	ori	r31, 0x04	; 4
    331e:	bf 2e       	mov	r11, r31
    3320:	09 c0       	rjmp	.+18     	; 0x3334 <vfprintf+0x28e>
    3322:	34 fe       	sbrs	r3, 4
    3324:	0a c0       	rjmp	.+20     	; 0x333a <vfprintf+0x294>
    3326:	29 2f       	mov	r18, r25
    3328:	26 60       	ori	r18, 0x06	; 6
    332a:	b2 2e       	mov	r11, r18
    332c:	06 c0       	rjmp	.+12     	; 0x333a <vfprintf+0x294>
    332e:	28 e0       	ldi	r18, 0x08	; 8
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	05 c0       	rjmp	.+10     	; 0x333e <vfprintf+0x298>
    3334:	20 e1       	ldi	r18, 0x10	; 16
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	02 c0       	rjmp	.+4      	; 0x333e <vfprintf+0x298>
    333a:	20 e1       	ldi	r18, 0x10	; 16
    333c:	32 e0       	ldi	r19, 0x02	; 2
    333e:	f8 01       	movw	r30, r16
    3340:	b7 fe       	sbrs	r11, 7
    3342:	07 c0       	rjmp	.+14     	; 0x3352 <vfprintf+0x2ac>
    3344:	60 81       	ld	r22, Z
    3346:	71 81       	ldd	r23, Z+1	; 0x01
    3348:	82 81       	ldd	r24, Z+2	; 0x02
    334a:	93 81       	ldd	r25, Z+3	; 0x03
    334c:	0c 5f       	subi	r16, 0xFC	; 252
    334e:	1f 4f       	sbci	r17, 0xFF	; 255
    3350:	06 c0       	rjmp	.+12     	; 0x335e <vfprintf+0x2b8>
    3352:	60 81       	ld	r22, Z
    3354:	71 81       	ldd	r23, Z+1	; 0x01
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	0e 5f       	subi	r16, 0xFE	; 254
    335c:	1f 4f       	sbci	r17, 0xFF	; 255
    335e:	a3 01       	movw	r20, r6
    3360:	f1 d0       	rcall	.+482    	; 0x3544 <__ultoa_invert>
    3362:	88 2e       	mov	r8, r24
    3364:	86 18       	sub	r8, r6
    3366:	fb 2d       	mov	r31, r11
    3368:	ff 77       	andi	r31, 0x7F	; 127
    336a:	3f 2e       	mov	r3, r31
    336c:	36 fe       	sbrs	r3, 6
    336e:	0d c0       	rjmp	.+26     	; 0x338a <vfprintf+0x2e4>
    3370:	23 2d       	mov	r18, r3
    3372:	2e 7f       	andi	r18, 0xFE	; 254
    3374:	a2 2e       	mov	r10, r18
    3376:	89 14       	cp	r8, r9
    3378:	58 f4       	brcc	.+22     	; 0x3390 <vfprintf+0x2ea>
    337a:	34 fe       	sbrs	r3, 4
    337c:	0b c0       	rjmp	.+22     	; 0x3394 <vfprintf+0x2ee>
    337e:	32 fc       	sbrc	r3, 2
    3380:	09 c0       	rjmp	.+18     	; 0x3394 <vfprintf+0x2ee>
    3382:	83 2d       	mov	r24, r3
    3384:	8e 7e       	andi	r24, 0xEE	; 238
    3386:	a8 2e       	mov	r10, r24
    3388:	05 c0       	rjmp	.+10     	; 0x3394 <vfprintf+0x2ee>
    338a:	b8 2c       	mov	r11, r8
    338c:	a3 2c       	mov	r10, r3
    338e:	03 c0       	rjmp	.+6      	; 0x3396 <vfprintf+0x2f0>
    3390:	b8 2c       	mov	r11, r8
    3392:	01 c0       	rjmp	.+2      	; 0x3396 <vfprintf+0x2f0>
    3394:	b9 2c       	mov	r11, r9
    3396:	a4 fe       	sbrs	r10, 4
    3398:	0f c0       	rjmp	.+30     	; 0x33b8 <vfprintf+0x312>
    339a:	fe 01       	movw	r30, r28
    339c:	e8 0d       	add	r30, r8
    339e:	f1 1d       	adc	r31, r1
    33a0:	80 81       	ld	r24, Z
    33a2:	80 33       	cpi	r24, 0x30	; 48
    33a4:	21 f4       	brne	.+8      	; 0x33ae <vfprintf+0x308>
    33a6:	9a 2d       	mov	r25, r10
    33a8:	99 7e       	andi	r25, 0xE9	; 233
    33aa:	a9 2e       	mov	r10, r25
    33ac:	09 c0       	rjmp	.+18     	; 0x33c0 <vfprintf+0x31a>
    33ae:	a2 fe       	sbrs	r10, 2
    33b0:	06 c0       	rjmp	.+12     	; 0x33be <vfprintf+0x318>
    33b2:	b3 94       	inc	r11
    33b4:	b3 94       	inc	r11
    33b6:	04 c0       	rjmp	.+8      	; 0x33c0 <vfprintf+0x31a>
    33b8:	8a 2d       	mov	r24, r10
    33ba:	86 78       	andi	r24, 0x86	; 134
    33bc:	09 f0       	breq	.+2      	; 0x33c0 <vfprintf+0x31a>
    33be:	b3 94       	inc	r11
    33c0:	a3 fc       	sbrc	r10, 3
    33c2:	10 c0       	rjmp	.+32     	; 0x33e4 <vfprintf+0x33e>
    33c4:	a0 fe       	sbrs	r10, 0
    33c6:	06 c0       	rjmp	.+12     	; 0x33d4 <vfprintf+0x32e>
    33c8:	b2 14       	cp	r11, r2
    33ca:	80 f4       	brcc	.+32     	; 0x33ec <vfprintf+0x346>
    33cc:	28 0c       	add	r2, r8
    33ce:	92 2c       	mov	r9, r2
    33d0:	9b 18       	sub	r9, r11
    33d2:	0d c0       	rjmp	.+26     	; 0x33ee <vfprintf+0x348>
    33d4:	b2 14       	cp	r11, r2
    33d6:	58 f4       	brcc	.+22     	; 0x33ee <vfprintf+0x348>
    33d8:	b6 01       	movw	r22, r12
    33da:	80 e2       	ldi	r24, 0x20	; 32
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	76 d0       	rcall	.+236    	; 0x34cc <fputc>
    33e0:	b3 94       	inc	r11
    33e2:	f8 cf       	rjmp	.-16     	; 0x33d4 <vfprintf+0x32e>
    33e4:	b2 14       	cp	r11, r2
    33e6:	18 f4       	brcc	.+6      	; 0x33ee <vfprintf+0x348>
    33e8:	2b 18       	sub	r2, r11
    33ea:	02 c0       	rjmp	.+4      	; 0x33f0 <vfprintf+0x34a>
    33ec:	98 2c       	mov	r9, r8
    33ee:	21 2c       	mov	r2, r1
    33f0:	a4 fe       	sbrs	r10, 4
    33f2:	0f c0       	rjmp	.+30     	; 0x3412 <vfprintf+0x36c>
    33f4:	b6 01       	movw	r22, r12
    33f6:	80 e3       	ldi	r24, 0x30	; 48
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	68 d0       	rcall	.+208    	; 0x34cc <fputc>
    33fc:	a2 fe       	sbrs	r10, 2
    33fe:	16 c0       	rjmp	.+44     	; 0x342c <vfprintf+0x386>
    3400:	a1 fc       	sbrc	r10, 1
    3402:	03 c0       	rjmp	.+6      	; 0x340a <vfprintf+0x364>
    3404:	88 e7       	ldi	r24, 0x78	; 120
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	02 c0       	rjmp	.+4      	; 0x340e <vfprintf+0x368>
    340a:	88 e5       	ldi	r24, 0x58	; 88
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	b6 01       	movw	r22, r12
    3410:	0c c0       	rjmp	.+24     	; 0x342a <vfprintf+0x384>
    3412:	8a 2d       	mov	r24, r10
    3414:	86 78       	andi	r24, 0x86	; 134
    3416:	51 f0       	breq	.+20     	; 0x342c <vfprintf+0x386>
    3418:	a1 fe       	sbrs	r10, 1
    341a:	02 c0       	rjmp	.+4      	; 0x3420 <vfprintf+0x37a>
    341c:	8b e2       	ldi	r24, 0x2B	; 43
    341e:	01 c0       	rjmp	.+2      	; 0x3422 <vfprintf+0x37c>
    3420:	80 e2       	ldi	r24, 0x20	; 32
    3422:	a7 fc       	sbrc	r10, 7
    3424:	8d e2       	ldi	r24, 0x2D	; 45
    3426:	b6 01       	movw	r22, r12
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	50 d0       	rcall	.+160    	; 0x34cc <fputc>
    342c:	89 14       	cp	r8, r9
    342e:	30 f4       	brcc	.+12     	; 0x343c <vfprintf+0x396>
    3430:	b6 01       	movw	r22, r12
    3432:	80 e3       	ldi	r24, 0x30	; 48
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	4a d0       	rcall	.+148    	; 0x34cc <fputc>
    3438:	9a 94       	dec	r9
    343a:	f8 cf       	rjmp	.-16     	; 0x342c <vfprintf+0x386>
    343c:	8a 94       	dec	r8
    343e:	f3 01       	movw	r30, r6
    3440:	e8 0d       	add	r30, r8
    3442:	f1 1d       	adc	r31, r1
    3444:	80 81       	ld	r24, Z
    3446:	b6 01       	movw	r22, r12
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	40 d0       	rcall	.+128    	; 0x34cc <fputc>
    344c:	81 10       	cpse	r8, r1
    344e:	f6 cf       	rjmp	.-20     	; 0x343c <vfprintf+0x396>
    3450:	22 20       	and	r2, r2
    3452:	09 f4       	brne	.+2      	; 0x3456 <vfprintf+0x3b0>
    3454:	4e ce       	rjmp	.-868    	; 0x30f2 <vfprintf+0x4c>
    3456:	b6 01       	movw	r22, r12
    3458:	80 e2       	ldi	r24, 0x20	; 32
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	37 d0       	rcall	.+110    	; 0x34cc <fputc>
    345e:	2a 94       	dec	r2
    3460:	f7 cf       	rjmp	.-18     	; 0x3450 <vfprintf+0x3aa>
    3462:	f6 01       	movw	r30, r12
    3464:	86 81       	ldd	r24, Z+6	; 0x06
    3466:	97 81       	ldd	r25, Z+7	; 0x07
    3468:	02 c0       	rjmp	.+4      	; 0x346e <vfprintf+0x3c8>
    346a:	8f ef       	ldi	r24, 0xFF	; 255
    346c:	9f ef       	ldi	r25, 0xFF	; 255
    346e:	2b 96       	adiw	r28, 0x0b	; 11
    3470:	0f b6       	in	r0, 0x3f	; 63
    3472:	f8 94       	cli
    3474:	de bf       	out	0x3e, r29	; 62
    3476:	0f be       	out	0x3f, r0	; 63
    3478:	cd bf       	out	0x3d, r28	; 61
    347a:	df 91       	pop	r29
    347c:	cf 91       	pop	r28
    347e:	1f 91       	pop	r17
    3480:	0f 91       	pop	r16
    3482:	ff 90       	pop	r15
    3484:	ef 90       	pop	r14
    3486:	df 90       	pop	r13
    3488:	cf 90       	pop	r12
    348a:	bf 90       	pop	r11
    348c:	af 90       	pop	r10
    348e:	9f 90       	pop	r9
    3490:	8f 90       	pop	r8
    3492:	7f 90       	pop	r7
    3494:	6f 90       	pop	r6
    3496:	5f 90       	pop	r5
    3498:	4f 90       	pop	r4
    349a:	3f 90       	pop	r3
    349c:	2f 90       	pop	r2
    349e:	08 95       	ret

000034a0 <strnlen_P>:
    34a0:	fc 01       	movw	r30, r24
    34a2:	05 90       	lpm	r0, Z+
    34a4:	61 50       	subi	r22, 0x01	; 1
    34a6:	70 40       	sbci	r23, 0x00	; 0
    34a8:	01 10       	cpse	r0, r1
    34aa:	d8 f7       	brcc	.-10     	; 0x34a2 <strnlen_P+0x2>
    34ac:	80 95       	com	r24
    34ae:	90 95       	com	r25
    34b0:	8e 0f       	add	r24, r30
    34b2:	9f 1f       	adc	r25, r31
    34b4:	08 95       	ret

000034b6 <strnlen>:
    34b6:	fc 01       	movw	r30, r24
    34b8:	61 50       	subi	r22, 0x01	; 1
    34ba:	70 40       	sbci	r23, 0x00	; 0
    34bc:	01 90       	ld	r0, Z+
    34be:	01 10       	cpse	r0, r1
    34c0:	d8 f7       	brcc	.-10     	; 0x34b8 <strnlen+0x2>
    34c2:	80 95       	com	r24
    34c4:	90 95       	com	r25
    34c6:	8e 0f       	add	r24, r30
    34c8:	9f 1f       	adc	r25, r31
    34ca:	08 95       	ret

000034cc <fputc>:
    34cc:	0f 93       	push	r16
    34ce:	1f 93       	push	r17
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	fb 01       	movw	r30, r22
    34d6:	23 81       	ldd	r18, Z+3	; 0x03
    34d8:	21 fd       	sbrc	r18, 1
    34da:	03 c0       	rjmp	.+6      	; 0x34e2 <fputc+0x16>
    34dc:	8f ef       	ldi	r24, 0xFF	; 255
    34de:	9f ef       	ldi	r25, 0xFF	; 255
    34e0:	2c c0       	rjmp	.+88     	; 0x353a <fputc+0x6e>
    34e2:	22 ff       	sbrs	r18, 2
    34e4:	16 c0       	rjmp	.+44     	; 0x3512 <fputc+0x46>
    34e6:	46 81       	ldd	r20, Z+6	; 0x06
    34e8:	57 81       	ldd	r21, Z+7	; 0x07
    34ea:	24 81       	ldd	r18, Z+4	; 0x04
    34ec:	35 81       	ldd	r19, Z+5	; 0x05
    34ee:	42 17       	cp	r20, r18
    34f0:	53 07       	cpc	r21, r19
    34f2:	44 f4       	brge	.+16     	; 0x3504 <fputc+0x38>
    34f4:	a0 81       	ld	r26, Z
    34f6:	b1 81       	ldd	r27, Z+1	; 0x01
    34f8:	9d 01       	movw	r18, r26
    34fa:	2f 5f       	subi	r18, 0xFF	; 255
    34fc:	3f 4f       	sbci	r19, 0xFF	; 255
    34fe:	31 83       	std	Z+1, r19	; 0x01
    3500:	20 83       	st	Z, r18
    3502:	8c 93       	st	X, r24
    3504:	26 81       	ldd	r18, Z+6	; 0x06
    3506:	37 81       	ldd	r19, Z+7	; 0x07
    3508:	2f 5f       	subi	r18, 0xFF	; 255
    350a:	3f 4f       	sbci	r19, 0xFF	; 255
    350c:	37 83       	std	Z+7, r19	; 0x07
    350e:	26 83       	std	Z+6, r18	; 0x06
    3510:	14 c0       	rjmp	.+40     	; 0x353a <fputc+0x6e>
    3512:	8b 01       	movw	r16, r22
    3514:	ec 01       	movw	r28, r24
    3516:	fb 01       	movw	r30, r22
    3518:	00 84       	ldd	r0, Z+8	; 0x08
    351a:	f1 85       	ldd	r31, Z+9	; 0x09
    351c:	e0 2d       	mov	r30, r0
    351e:	19 95       	eicall
    3520:	89 2b       	or	r24, r25
    3522:	e1 f6       	brne	.-72     	; 0x34dc <fputc+0x10>
    3524:	d8 01       	movw	r26, r16
    3526:	16 96       	adiw	r26, 0x06	; 6
    3528:	8d 91       	ld	r24, X+
    352a:	9c 91       	ld	r25, X
    352c:	17 97       	sbiw	r26, 0x07	; 7
    352e:	01 96       	adiw	r24, 0x01	; 1
    3530:	17 96       	adiw	r26, 0x07	; 7
    3532:	9c 93       	st	X, r25
    3534:	8e 93       	st	-X, r24
    3536:	16 97       	sbiw	r26, 0x06	; 6
    3538:	ce 01       	movw	r24, r28
    353a:	df 91       	pop	r29
    353c:	cf 91       	pop	r28
    353e:	1f 91       	pop	r17
    3540:	0f 91       	pop	r16
    3542:	08 95       	ret

00003544 <__ultoa_invert>:
    3544:	fa 01       	movw	r30, r20
    3546:	aa 27       	eor	r26, r26
    3548:	28 30       	cpi	r18, 0x08	; 8
    354a:	51 f1       	breq	.+84     	; 0x35a0 <__ultoa_invert+0x5c>
    354c:	20 31       	cpi	r18, 0x10	; 16
    354e:	81 f1       	breq	.+96     	; 0x35b0 <__ultoa_invert+0x6c>
    3550:	e8 94       	clt
    3552:	6f 93       	push	r22
    3554:	6e 7f       	andi	r22, 0xFE	; 254
    3556:	6e 5f       	subi	r22, 0xFE	; 254
    3558:	7f 4f       	sbci	r23, 0xFF	; 255
    355a:	8f 4f       	sbci	r24, 0xFF	; 255
    355c:	9f 4f       	sbci	r25, 0xFF	; 255
    355e:	af 4f       	sbci	r26, 0xFF	; 255
    3560:	b1 e0       	ldi	r27, 0x01	; 1
    3562:	3e d0       	rcall	.+124    	; 0x35e0 <__ultoa_invert+0x9c>
    3564:	b4 e0       	ldi	r27, 0x04	; 4
    3566:	3c d0       	rcall	.+120    	; 0x35e0 <__ultoa_invert+0x9c>
    3568:	67 0f       	add	r22, r23
    356a:	78 1f       	adc	r23, r24
    356c:	89 1f       	adc	r24, r25
    356e:	9a 1f       	adc	r25, r26
    3570:	a1 1d       	adc	r26, r1
    3572:	68 0f       	add	r22, r24
    3574:	79 1f       	adc	r23, r25
    3576:	8a 1f       	adc	r24, r26
    3578:	91 1d       	adc	r25, r1
    357a:	a1 1d       	adc	r26, r1
    357c:	6a 0f       	add	r22, r26
    357e:	71 1d       	adc	r23, r1
    3580:	81 1d       	adc	r24, r1
    3582:	91 1d       	adc	r25, r1
    3584:	a1 1d       	adc	r26, r1
    3586:	20 d0       	rcall	.+64     	; 0x35c8 <__ultoa_invert+0x84>
    3588:	09 f4       	brne	.+2      	; 0x358c <__ultoa_invert+0x48>
    358a:	68 94       	set
    358c:	3f 91       	pop	r19
    358e:	2a e0       	ldi	r18, 0x0A	; 10
    3590:	26 9f       	mul	r18, r22
    3592:	11 24       	eor	r1, r1
    3594:	30 19       	sub	r19, r0
    3596:	30 5d       	subi	r19, 0xD0	; 208
    3598:	31 93       	st	Z+, r19
    359a:	de f6       	brtc	.-74     	; 0x3552 <__ultoa_invert+0xe>
    359c:	cf 01       	movw	r24, r30
    359e:	08 95       	ret
    35a0:	46 2f       	mov	r20, r22
    35a2:	47 70       	andi	r20, 0x07	; 7
    35a4:	40 5d       	subi	r20, 0xD0	; 208
    35a6:	41 93       	st	Z+, r20
    35a8:	b3 e0       	ldi	r27, 0x03	; 3
    35aa:	0f d0       	rcall	.+30     	; 0x35ca <__ultoa_invert+0x86>
    35ac:	c9 f7       	brne	.-14     	; 0x35a0 <__ultoa_invert+0x5c>
    35ae:	f6 cf       	rjmp	.-20     	; 0x359c <__ultoa_invert+0x58>
    35b0:	46 2f       	mov	r20, r22
    35b2:	4f 70       	andi	r20, 0x0F	; 15
    35b4:	40 5d       	subi	r20, 0xD0	; 208
    35b6:	4a 33       	cpi	r20, 0x3A	; 58
    35b8:	18 f0       	brcs	.+6      	; 0x35c0 <__ultoa_invert+0x7c>
    35ba:	49 5d       	subi	r20, 0xD9	; 217
    35bc:	31 fd       	sbrc	r19, 1
    35be:	40 52       	subi	r20, 0x20	; 32
    35c0:	41 93       	st	Z+, r20
    35c2:	02 d0       	rcall	.+4      	; 0x35c8 <__ultoa_invert+0x84>
    35c4:	a9 f7       	brne	.-22     	; 0x35b0 <__ultoa_invert+0x6c>
    35c6:	ea cf       	rjmp	.-44     	; 0x359c <__ultoa_invert+0x58>
    35c8:	b4 e0       	ldi	r27, 0x04	; 4
    35ca:	a6 95       	lsr	r26
    35cc:	97 95       	ror	r25
    35ce:	87 95       	ror	r24
    35d0:	77 95       	ror	r23
    35d2:	67 95       	ror	r22
    35d4:	ba 95       	dec	r27
    35d6:	c9 f7       	brne	.-14     	; 0x35ca <__ultoa_invert+0x86>
    35d8:	00 97       	sbiw	r24, 0x00	; 0
    35da:	61 05       	cpc	r22, r1
    35dc:	71 05       	cpc	r23, r1
    35de:	08 95       	ret
    35e0:	9b 01       	movw	r18, r22
    35e2:	ac 01       	movw	r20, r24
    35e4:	0a 2e       	mov	r0, r26
    35e6:	06 94       	lsr	r0
    35e8:	57 95       	ror	r21
    35ea:	47 95       	ror	r20
    35ec:	37 95       	ror	r19
    35ee:	27 95       	ror	r18
    35f0:	ba 95       	dec	r27
    35f2:	c9 f7       	brne	.-14     	; 0x35e6 <__ultoa_invert+0xa2>
    35f4:	62 0f       	add	r22, r18
    35f6:	73 1f       	adc	r23, r19
    35f8:	84 1f       	adc	r24, r20
    35fa:	95 1f       	adc	r25, r21
    35fc:	a0 1d       	adc	r26, r0
    35fe:	08 95       	ret

00003600 <__muluhisi3>:
    3600:	0f d0       	rcall	.+30     	; 0x3620 <__umulhisi3>
    3602:	a5 9f       	mul	r26, r21
    3604:	90 0d       	add	r25, r0
    3606:	b4 9f       	mul	r27, r20
    3608:	90 0d       	add	r25, r0
    360a:	a4 9f       	mul	r26, r20
    360c:	80 0d       	add	r24, r0
    360e:	91 1d       	adc	r25, r1
    3610:	11 24       	eor	r1, r1
    3612:	08 95       	ret

00003614 <__mulshisi3>:
    3614:	b7 ff       	sbrs	r27, 7
    3616:	f4 cf       	rjmp	.-24     	; 0x3600 <__muluhisi3>

00003618 <__mulohisi3>:
    3618:	f3 df       	rcall	.-26     	; 0x3600 <__muluhisi3>
    361a:	82 1b       	sub	r24, r18
    361c:	93 0b       	sbc	r25, r19
    361e:	08 95       	ret

00003620 <__umulhisi3>:
    3620:	a2 9f       	mul	r26, r18
    3622:	b0 01       	movw	r22, r0
    3624:	b3 9f       	mul	r27, r19
    3626:	c0 01       	movw	r24, r0
    3628:	a3 9f       	mul	r26, r19
    362a:	70 0d       	add	r23, r0
    362c:	81 1d       	adc	r24, r1
    362e:	11 24       	eor	r1, r1
    3630:	91 1d       	adc	r25, r1
    3632:	b2 9f       	mul	r27, r18
    3634:	70 0d       	add	r23, r0
    3636:	81 1d       	adc	r24, r1
    3638:	11 24       	eor	r1, r1
    363a:	91 1d       	adc	r25, r1
    363c:	08 95       	ret

0000363e <_exit>:
    363e:	f8 94       	cli

00003640 <__stop_program>:
    3640:	ff cf       	rjmp	.-2      	; 0x3640 <__stop_program>
